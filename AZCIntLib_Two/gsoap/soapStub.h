/* soapStub.h
   Generated by gSOAP 2.8.21 from CyjgNewWebservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://webservice.webservice.egintra.com"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__writeObjectOut
#define SOAP_TYPE__ns1__writeObjectOut (8)
/* ns1:writeObjectOut */
class SOAP_CMAC _ns1__writeObjectOut
{
public:
	std::wstring *xtlb;	/* required element of type xsd:string */
	std::wstring *jkxlh;	/* required element of type xsd:string */
	std::wstring *jkid;	/* required element of type xsd:string */
	std::wstring *jylsh;	/* required element of type xsd:string */
	std::wstring *cjbh;	/* required element of type xsd:string */
	std::wstring *yhbz;	/* required element of type xsd:string */
	std::wstring *dwmc;	/* required element of type xsd:string */
	std::wstring *dwjgdm;	/* required element of type xsd:string */
	std::wstring *yhxm;	/* required element of type xsd:string */
	std::wstring *zdbs;	/* required element of type xsd:string */
	std::wstring *writeXml;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__ns1__writeObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__writeObjectOut() { _ns1__writeObjectOut::soap_default(NULL); }
	virtual ~_ns1__writeObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__writeObjectOutResponse
#define SOAP_TYPE__ns1__writeObjectOutResponse (9)
/* ns1:writeObjectOutResponse */
class SOAP_CMAC _ns1__writeObjectOutResponse
{
public:
	std::wstring *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__writeObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__writeObjectOutResponse() { _ns1__writeObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__writeObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__queryObjectOut
#define SOAP_TYPE__ns1__queryObjectOut (10)
/* ns1:queryObjectOut */
class SOAP_CMAC _ns1__queryObjectOut
{
public:
	std::wstring *xtlb;	/* required element of type xsd:string */
	std::wstring *jkxlh;	/* required element of type xsd:string */
	std::wstring *jkid;	/* required element of type xsd:string */
	std::wstring *jylsh;	/* required element of type xsd:string */
	std::wstring *cjbh;	/* required element of type xsd:string */
	std::wstring *yhbz;	/* required element of type xsd:string */
	std::wstring *dwmc;	/* required element of type xsd:string */
	std::wstring *dwjgdm;	/* required element of type xsd:string */
	std::wstring *yhxm;	/* required element of type xsd:string */
	std::wstring *zdbs;	/* required element of type xsd:string */
	std::wstring *queryXml;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__queryObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__queryObjectOut() { _ns1__queryObjectOut::soap_default(NULL); }
	virtual ~_ns1__queryObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__queryObjectOutResponse
#define SOAP_TYPE__ns1__queryObjectOutResponse (11)
/* ns1:queryObjectOutResponse */
class SOAP_CMAC _ns1__queryObjectOutResponse
{
public:
	std::wstring *out;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__queryObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__queryObjectOutResponse() { _ns1__queryObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__queryObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__writeObjectOut
#define SOAP_TYPE___ns1__writeObjectOut (18)
/* Operation wrapper: */
struct __ns1__writeObjectOut
{
public:
	_ns1__writeObjectOut *ns1__writeObjectOut;	/* optional element of type ns1:writeObjectOut */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE___ns1__writeObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__queryObjectOut
#define SOAP_TYPE___ns1__queryObjectOut (22)
/* Operation wrapper: */
struct __ns1__queryObjectOut
{
public:
	_ns1__queryObjectOut *ns1__queryObjectOut;	/* optional element of type ns1:queryObjectOut */
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE___ns1__queryObjectOut */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 30; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
