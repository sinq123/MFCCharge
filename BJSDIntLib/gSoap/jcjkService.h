/* jcjkService.h
   Generated by wsdl2h 2.8.108 from jcjkService.wsdl and typemap2.dat
   2021-03-09 08:59:43 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on jcjkService.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://192.168.70.254:9380/jcjklw/services/jcjkService                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://192.168.70.254:9380/jcjklw/services/jcjkService"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://192.168.70.254:9380/jcjklw/services/jcjkService"
//gsoap ns1   schema namespace:	http://192.168.70.254:9380/jcjklw/services/jcjkService
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "SOAP-ENC:Array".
class SOAP_ENC__Array
{ public:
/// Pointer to array of XML strings
    _XML *__ptr;
/// Size of the array
    int __size;
};

/// Built-in type "SOAP-ENC:base64Binary".
class SOAP_ENC__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ArrayOf_USCOREsoapenc_USCOREstring;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://192.168.70.254:9380/jcjklw/services/jcjkService                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://192.168.70.254:9380/jcjklw/services/jcjkService                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://192.168.70.254:9380/jcjklw/services/jcjkService":ArrayOf_soapenc_string is a complexType with complexContent restriction of type SOAP-ENC:Array.
///
/// @note class ArrayOf_USCOREsoapenc_USCOREstring operations:
/// - ArrayOf_USCOREsoapenc_USCOREstring* soap_new_ArrayOf_USCOREsoapenc_USCOREstring(soap*) allocate and default initialize
/// - ArrayOf_USCOREsoapenc_USCOREstring* soap_new_ArrayOf_USCOREsoapenc_USCOREstring(soap*, int num) allocate and default initialize an array
/// - ArrayOf_USCOREsoapenc_USCOREstring* soap_new_req_ArrayOf_USCOREsoapenc_USCOREstring(soap*, ...) allocate, set required members
/// - ArrayOf_USCOREsoapenc_USCOREstring* soap_new_set_ArrayOf_USCOREsoapenc_USCOREstring(soap*, ...) allocate, set all public members
/// - ArrayOf_USCOREsoapenc_USCOREstring::soap_default(soap*) default initialize members
/// - int soap_read_ArrayOf_USCOREsoapenc_USCOREstring(soap*, ArrayOf_USCOREsoapenc_USCOREstring*) deserialize from a stream
/// - int soap_write_ArrayOf_USCOREsoapenc_USCOREstring(soap*, ArrayOf_USCOREsoapenc_USCOREstring*) serialize to a stream
/// - ArrayOf_USCOREsoapenc_USCOREstring* ArrayOf_USCOREsoapenc_USCOREstring::soap_dup(soap*) returns deep copy of ArrayOf_USCOREsoapenc_USCOREstring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ArrayOf_USCOREsoapenc_USCOREstring::soap_del() deep deletes ArrayOf_USCOREsoapenc_USCOREstring data members, use only after ArrayOf_USCOREsoapenc_USCOREstring::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ArrayOf_USCOREsoapenc_USCOREstring::soap_type() returns SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring or derived type identifier
/// SOAP encoded array of values of type xs:string.
class ArrayOf_USCOREsoapenc_USCOREstring
{ public:
/// Pointer to dynamic array of elements <item> of type std::wstring.
    std::wstring                        *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://192.168.70.254:9380/jcjklw/services/jcjkService                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://192.168.70.254:9380/jcjklw/services/jcjkService                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	jcjkServiceSoapBinding 
//gsoap ns2  service type:	SuperviseWebService 
//gsoap ns2  service port:	http://192.168.70.254:9380/jcjklw/services/jcjkService 
//gsoap ns2  service namespace:	http://webservice.basefrm.power.com 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref jcjkServiceSoapBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page jcjkServiceSoapBinding Binding "jcjkServiceSoapBinding"

@section jcjkServiceSoapBinding_operations Operations of Binding "jcjkServiceSoapBinding"

  - @ref ns2__main

  - @ref ns2__init

  - @ref ns2__checkNull

  - @ref ns2__writeObjectOut

  - @ref ns2__uploadFile

  - @ref ns2__getZpgwcs

  - @ref ns2__uploadWjzp

  - @ref ns2__queryObjectOut

@section jcjkServiceSoapBinding_ports Default endpoints of Binding "jcjkServiceSoapBinding"

  - http://192.168.70.254:9380/jcjklw/services/jcjkService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   jcjkServiceSoapBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__main                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__mainResponse" of operation "ns2__main".
struct ns2__mainResponse
{
};

/** Operation "ns2__main" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__main(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ArrayOf_USCOREsoapenc_USCOREstring* args,
    // output parameters:
    struct ns2__mainResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__main(
    struct soap *soap,
    // input parameters:
    ArrayOf_USCOREsoapenc_USCOREstring* args,
    // output parameters:
    struct ns2__mainResponse&
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	main SOAP
//gsoap ns2  service method-style:	main rpc
//gsoap ns2  service method-encoding:	main http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	main ""
//gsoap ns2  service method-output-action:	main Response
int ns2__main(
    ArrayOf_USCOREsoapenc_USCOREstring* :_args,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct ns2__mainResponse           &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__init                                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__initResponse" of operation "ns2__init".
struct ns2__initResponse
{
};

/** Operation "ns2__init" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__init(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    struct ns2__initResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__init(
    struct soap *soap,
    // input parameters:
    // output parameters:
    struct ns2__initResponse&
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	init SOAP
//gsoap ns2  service method-style:	init rpc
//gsoap ns2  service method-encoding:	init http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	init ""
//gsoap ns2  service method-output-action:	init Response
int ns2__init(
    struct ns2__initResponse           &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__checkNull                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns2__checkNullResponse" of operation "ns2__checkNull".
struct ns2__checkNullResponse
{
    ArrayOf_USCOREsoapenc_USCOREstring* :_checkNullReturn;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "ns2__checkNull" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__checkNull(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ArrayOf_USCOREsoapenc_USCOREstring* params,
    ArrayOf_USCOREsoapenc_USCOREstring* paramNames,
    // output parameters:
    struct ns2__checkNullResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__checkNull(
    struct soap *soap,
    // input parameters:
    ArrayOf_USCOREsoapenc_USCOREstring* params,
    ArrayOf_USCOREsoapenc_USCOREstring* paramNames,
    // output parameters:
    struct ns2__checkNullResponse&
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	checkNull SOAP
//gsoap ns2  service method-style:	checkNull rpc
//gsoap ns2  service method-encoding:	checkNull http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	checkNull ""
//gsoap ns2  service method-output-action:	checkNull Response
int ns2__checkNull(
    ArrayOf_USCOREsoapenc_USCOREstring* :_params,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    ArrayOf_USCOREsoapenc_USCOREstring* :_paramNames,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct ns2__checkNullResponse      &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__writeObjectOut                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "ns2__writeObjectOut" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__writeObjectOut(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    std::wstring                        WriteXmlDoc,
    // output parameters:
    std::wstring                       &_writeObjectOutReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__writeObjectOut(
    struct soap *soap,
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    std::wstring                        WriteXmlDoc,
    // output parameters:
    std::wstring                       &_writeObjectOutReturn
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	writeObjectOut SOAP
//gsoap ns2  service method-style:	writeObjectOut rpc
//gsoap ns2  service method-encoding:	writeObjectOut http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	writeObjectOut ""
//gsoap ns2  service method-output-action:	writeObjectOut Response
int ns2__writeObjectOut(
    std::wstring                        :_xtlb,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkxlh,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkid,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_WriteXmlDoc,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                       &:_writeObjectOutReturn	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__uploadFile                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns2__uploadFile" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__uploadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    SOAP_ENC__base64Binary              fileNode,
    std::wstring                        WriteXmlDoc,
    // output parameters:
    std::wstring                       &_uploadFileReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__uploadFile(
    struct soap *soap,
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    SOAP_ENC__base64Binary              fileNode,
    std::wstring                        WriteXmlDoc,
    // output parameters:
    std::wstring                       &_uploadFileReturn
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	uploadFile SOAP
//gsoap ns2  service method-style:	uploadFile rpc
//gsoap ns2  service method-encoding:	uploadFile http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	uploadFile ""
//gsoap ns2  service method-output-action:	uploadFile Response
int ns2__uploadFile(
    std::wstring                        :_xtlb,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkxlh,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkid,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    SOAP_ENC__base64Binary              :_fileNode,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_WriteXmlDoc,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                       &:_uploadFileReturn	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__getZpgwcs                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "ns2__getZpgwcs" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__getZpgwcs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        jcz,
    std::wstring                        jcxdm,
    std::wstring                        jcxm,
    // output parameters:
    std::wstring                       &_getZpgwcsReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__getZpgwcs(
    struct soap *soap,
    // input parameters:
    std::wstring                        jcz,
    std::wstring                        jcxdm,
    std::wstring                        jcxm,
    // output parameters:
    std::wstring                       &_getZpgwcsReturn
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	getZpgwcs SOAP
//gsoap ns2  service method-style:	getZpgwcs rpc
//gsoap ns2  service method-encoding:	getZpgwcs http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	getZpgwcs ""
//gsoap ns2  service method-output-action:	getZpgwcs Response
int ns2__getZpgwcs(
    std::wstring                        :_jcz,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jcxdm,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jcxm,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                       &:_getZpgwcsReturn	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__uploadWjzp                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "ns2__uploadWjzp" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__uploadWjzp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        imgStr,
    // output parameters:
    std::wstring                       &_uploadWjzpReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__uploadWjzp(
    struct soap *soap,
    // input parameters:
    std::wstring                        imgStr,
    // output parameters:
    std::wstring                       &_uploadWjzpReturn
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	uploadWjzp SOAP
//gsoap ns2  service method-style:	uploadWjzp rpc
//gsoap ns2  service method-encoding:	uploadWjzp http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	uploadWjzp ""
//gsoap ns2  service method-output-action:	uploadWjzp Response
int ns2__uploadWjzp(
    std::wstring                        :_imgStr,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                       &:_uploadWjzpReturn	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns2__queryObjectOut                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "ns2__queryObjectOut" of service binding "jcjkServiceSoapBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://192.168.70.254:9380/jcjklw/services/jcjkService

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns2__queryObjectOut(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    std::wstring                        QueryXmlDoc,
    // output parameters:
    std::wstring                       &_queryObjectOutReturn
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns2__queryObjectOut(
    struct soap *soap,
    // input parameters:
    std::wstring                        xtlb,
    std::wstring                        jkxlh,
    std::wstring                        jkid,
    std::wstring                        QueryXmlDoc,
    // output parameters:
    std::wstring                       &_queryObjectOutReturn
  );
@endcode

C++ proxy class (defined in soapjcjkServiceSoapBindingProxy.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapjcjkServiceSoapBindingService.h generated with soapcpp2):
@code
  class jcjkServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns2  service method-protocol:	queryObjectOut SOAP
//gsoap ns2  service method-style:	queryObjectOut rpc
//gsoap ns2  service method-encoding:	queryObjectOut http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns2  service method-action:	queryObjectOut ""
//gsoap ns2  service method-output-action:	queryObjectOut Response
int ns2__queryObjectOut(
    std::wstring                        :_xtlb,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkxlh,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_jkid,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                        :_QueryXmlDoc,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    std::wstring                       &:_queryObjectOutReturn	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
);

/** @page jcjkServiceSoapBinding Binding "jcjkServiceSoapBinding"

@section jcjkServiceSoapBinding_policy_enablers Policy Enablers of Binding "jcjkServiceSoapBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://192.168.70.254:9380/jcjklw/services/jcjkService"

*/

/* End of jcjkService.h */
