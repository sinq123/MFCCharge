/* soapC.cpp
   Generated by gSOAP 2.8.108 for jcjkService.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.108 2021-03-09 08:59:45 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		return soap_in_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		return soap_in_SOAP_ENC__base64Binary(soap, tag, NULL, "SOAP-ENC:base64Binary");
	case SOAP_TYPE_SOAP_ENC__Array:
		return soap_in_SOAP_ENC__Array(soap, tag, NULL, "SOAP-ENC:Array");
	case SOAP_TYPE_ns2__queryObjectOut:
		return soap_in_ns2__queryObjectOut(soap, tag, NULL, "ns2:queryObjectOut");
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		return soap_in_ns2__queryObjectOutResponse(soap, tag, NULL, "ns2:queryObjectOutResponse");
	case SOAP_TYPE_ns2__uploadWjzp:
		return soap_in_ns2__uploadWjzp(soap, tag, NULL, "ns2:uploadWjzp");
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		return soap_in_ns2__uploadWjzpResponse(soap, tag, NULL, "ns2:uploadWjzpResponse");
	case SOAP_TYPE_ns2__getZpgwcs:
		return soap_in_ns2__getZpgwcs(soap, tag, NULL, "ns2:getZpgwcs");
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		return soap_in_ns2__getZpgwcsResponse(soap, tag, NULL, "ns2:getZpgwcsResponse");
	case SOAP_TYPE_ns2__uploadFile:
		return soap_in_ns2__uploadFile(soap, tag, NULL, "ns2:uploadFile");
	case SOAP_TYPE_ns2__uploadFileResponse:
		return soap_in_ns2__uploadFileResponse(soap, tag, NULL, "ns2:uploadFileResponse");
	case SOAP_TYPE_ns2__writeObjectOut:
		return soap_in_ns2__writeObjectOut(soap, tag, NULL, "ns2:writeObjectOut");
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		return soap_in_ns2__writeObjectOutResponse(soap, tag, NULL, "ns2:writeObjectOutResponse");
	case SOAP_TYPE_ns2__checkNull:
		return soap_in_ns2__checkNull(soap, tag, NULL, "ns2:checkNull");
	case SOAP_TYPE_ns2__checkNullResponse:
		return soap_in_ns2__checkNullResponse(soap, tag, NULL, "ns2:checkNullResponse");
	case SOAP_TYPE_ns2__init:
		return soap_in_ns2__init(soap, tag, NULL, "ns2:init");
	case SOAP_TYPE_ns2__initResponse:
		return soap_in_ns2__initResponse(soap, tag, NULL, "ns2:initResponse");
	case SOAP_TYPE_ns2__main:
		return soap_in_ns2__main(soap, tag, NULL, "ns2:main");
	case SOAP_TYPE_ns2__mainResponse:
		return soap_in_ns2__mainResponse(soap, tag, NULL, "ns2:mainResponse");
	case SOAP_TYPE_PointerToArrayOf_USCOREsoapenc_USCOREstring:
		return soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, tag, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring;
			return soap_in_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENC:base64Binary"))
		{	*type = SOAP_TYPE_SOAP_ENC__base64Binary;
			return soap_in_SOAP_ENC__base64Binary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENC:Array"))
		{	*type = SOAP_TYPE_SOAP_ENC__Array;
			return soap_in_SOAP_ENC__Array(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryObjectOut"))
		{	*type = SOAP_TYPE_ns2__queryObjectOut;
			return soap_in_ns2__queryObjectOut(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:queryObjectOutResponse"))
		{	*type = SOAP_TYPE_ns2__queryObjectOutResponse;
			return soap_in_ns2__queryObjectOutResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:uploadWjzp"))
		{	*type = SOAP_TYPE_ns2__uploadWjzp;
			return soap_in_ns2__uploadWjzp(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:uploadWjzpResponse"))
		{	*type = SOAP_TYPE_ns2__uploadWjzpResponse;
			return soap_in_ns2__uploadWjzpResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getZpgwcs"))
		{	*type = SOAP_TYPE_ns2__getZpgwcs;
			return soap_in_ns2__getZpgwcs(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:getZpgwcsResponse"))
		{	*type = SOAP_TYPE_ns2__getZpgwcsResponse;
			return soap_in_ns2__getZpgwcsResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:uploadFile"))
		{	*type = SOAP_TYPE_ns2__uploadFile;
			return soap_in_ns2__uploadFile(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:uploadFileResponse"))
		{	*type = SOAP_TYPE_ns2__uploadFileResponse;
			return soap_in_ns2__uploadFileResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:writeObjectOut"))
		{	*type = SOAP_TYPE_ns2__writeObjectOut;
			return soap_in_ns2__writeObjectOut(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:writeObjectOutResponse"))
		{	*type = SOAP_TYPE_ns2__writeObjectOutResponse;
			return soap_in_ns2__writeObjectOutResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:checkNull"))
		{	*type = SOAP_TYPE_ns2__checkNull;
			return soap_in_ns2__checkNull(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:checkNullResponse"))
		{	*type = SOAP_TYPE_ns2__checkNullResponse;
			return soap_in_ns2__checkNullResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:init"))
		{	*type = SOAP_TYPE_ns2__init;
			return soap_in_ns2__init(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:initResponse"))
		{	*type = SOAP_TYPE_ns2__initResponse;
			return soap_in_ns2__initResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:main"))
		{	*type = SOAP_TYPE_ns2__main;
			return soap_in_ns2__main(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:mainResponse"))
		{	*type = SOAP_TYPE_ns2__mainResponse;
			return soap_in_ns2__mainResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		return ((ArrayOf_USCOREsoapenc_USCOREstring *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		return ((SOAP_ENC__base64Binary *)ptr)->soap_out(soap, tag, id, "SOAP-ENC:base64Binary");
	case SOAP_TYPE_SOAP_ENC__Array:
		return ((SOAP_ENC__Array *)ptr)->soap_out(soap, tag, id, "SOAP-ENC:Array");
	case SOAP_TYPE_ns2__queryObjectOut:
		return soap_out_ns2__queryObjectOut(soap, tag, id, (const struct ns2__queryObjectOut *)ptr, "ns2:queryObjectOut");
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		return soap_out_ns2__queryObjectOutResponse(soap, tag, id, (const struct ns2__queryObjectOutResponse *)ptr, "ns2:queryObjectOutResponse");
	case SOAP_TYPE_ns2__uploadWjzp:
		return soap_out_ns2__uploadWjzp(soap, tag, id, (const struct ns2__uploadWjzp *)ptr, "ns2:uploadWjzp");
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		return soap_out_ns2__uploadWjzpResponse(soap, tag, id, (const struct ns2__uploadWjzpResponse *)ptr, "ns2:uploadWjzpResponse");
	case SOAP_TYPE_ns2__getZpgwcs:
		return soap_out_ns2__getZpgwcs(soap, tag, id, (const struct ns2__getZpgwcs *)ptr, "ns2:getZpgwcs");
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		return soap_out_ns2__getZpgwcsResponse(soap, tag, id, (const struct ns2__getZpgwcsResponse *)ptr, "ns2:getZpgwcsResponse");
	case SOAP_TYPE_ns2__uploadFile:
		return soap_out_ns2__uploadFile(soap, tag, id, (const struct ns2__uploadFile *)ptr, "ns2:uploadFile");
	case SOAP_TYPE_ns2__uploadFileResponse:
		return soap_out_ns2__uploadFileResponse(soap, tag, id, (const struct ns2__uploadFileResponse *)ptr, "ns2:uploadFileResponse");
	case SOAP_TYPE_ns2__writeObjectOut:
		return soap_out_ns2__writeObjectOut(soap, tag, id, (const struct ns2__writeObjectOut *)ptr, "ns2:writeObjectOut");
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		return soap_out_ns2__writeObjectOutResponse(soap, tag, id, (const struct ns2__writeObjectOutResponse *)ptr, "ns2:writeObjectOutResponse");
	case SOAP_TYPE_ns2__checkNull:
		return soap_out_ns2__checkNull(soap, tag, id, (const struct ns2__checkNull *)ptr, "ns2:checkNull");
	case SOAP_TYPE_ns2__checkNullResponse:
		return soap_out_ns2__checkNullResponse(soap, tag, id, (const struct ns2__checkNullResponse *)ptr, "ns2:checkNullResponse");
	case SOAP_TYPE_ns2__init:
		return soap_out_ns2__init(soap, tag, id, (const struct ns2__init *)ptr, "ns2:init");
	case SOAP_TYPE_ns2__initResponse:
		return soap_out_ns2__initResponse(soap, tag, id, (const struct ns2__initResponse *)ptr, "ns2:initResponse");
	case SOAP_TYPE_ns2__main:
		return soap_out_ns2__main(soap, tag, id, (const struct ns2__main *)ptr, "ns2:main");
	case SOAP_TYPE_ns2__mainResponse:
		return soap_out_ns2__mainResponse(soap, tag, id, (const struct ns2__mainResponse *)ptr, "ns2:mainResponse");
	case SOAP_TYPE_PointerToArrayOf_USCOREsoapenc_USCOREstring:
		return soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, tag, id, (ArrayOf_USCOREsoapenc_USCOREstring *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		((ArrayOf_USCOREsoapenc_USCOREstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		((SOAP_ENC__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENC__Array:
		((SOAP_ENC__Array *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__queryObjectOut:
		soap_serialize_ns2__queryObjectOut(soap, (const struct ns2__queryObjectOut *)ptr);
		break;
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		soap_serialize_ns2__queryObjectOutResponse(soap, (const struct ns2__queryObjectOutResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__uploadWjzp:
		soap_serialize_ns2__uploadWjzp(soap, (const struct ns2__uploadWjzp *)ptr);
		break;
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		soap_serialize_ns2__uploadWjzpResponse(soap, (const struct ns2__uploadWjzpResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__getZpgwcs:
		soap_serialize_ns2__getZpgwcs(soap, (const struct ns2__getZpgwcs *)ptr);
		break;
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		soap_serialize_ns2__getZpgwcsResponse(soap, (const struct ns2__getZpgwcsResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__uploadFile:
		soap_serialize_ns2__uploadFile(soap, (const struct ns2__uploadFile *)ptr);
		break;
	case SOAP_TYPE_ns2__uploadFileResponse:
		soap_serialize_ns2__uploadFileResponse(soap, (const struct ns2__uploadFileResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__writeObjectOut:
		soap_serialize_ns2__writeObjectOut(soap, (const struct ns2__writeObjectOut *)ptr);
		break;
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		soap_serialize_ns2__writeObjectOutResponse(soap, (const struct ns2__writeObjectOutResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__checkNull:
		soap_serialize_ns2__checkNull(soap, (const struct ns2__checkNull *)ptr);
		break;
	case SOAP_TYPE_ns2__checkNullResponse:
		soap_serialize_ns2__checkNullResponse(soap, (const struct ns2__checkNullResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__init:
		soap_serialize_ns2__init(soap, (const struct ns2__init *)ptr);
		break;
	case SOAP_TYPE_ns2__initResponse:
		soap_serialize_ns2__initResponse(soap, (const struct ns2__initResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__main:
		soap_serialize_ns2__main(soap, (const struct ns2__main *)ptr);
		break;
	case SOAP_TYPE_ns2__mainResponse:
		soap_serialize_ns2__mainResponse(soap, (const struct ns2__mainResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToArrayOf_USCOREsoapenc_USCOREstring:
		soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, (ArrayOf_USCOREsoapenc_USCOREstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_SOAP_ENC__Array:
		return (void*)soap_instantiate_SOAP_ENC__Array(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		return (void*)soap_instantiate_SOAP_ENC__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		return (void*)soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__mainResponse:
		return (void*)soap_instantiate_ns2__mainResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__main:
		return (void*)soap_instantiate_ns2__main(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__initResponse:
		return (void*)soap_instantiate_ns2__initResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__init:
		return (void*)soap_instantiate_ns2__init(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__checkNullResponse:
		return (void*)soap_instantiate_ns2__checkNullResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__checkNull:
		return (void*)soap_instantiate_ns2__checkNull(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		return (void*)soap_instantiate_ns2__writeObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__writeObjectOut:
		return (void*)soap_instantiate_ns2__writeObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__uploadFileResponse:
		return (void*)soap_instantiate_ns2__uploadFileResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__uploadFile:
		return (void*)soap_instantiate_ns2__uploadFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		return (void*)soap_instantiate_ns2__getZpgwcsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__getZpgwcs:
		return (void*)soap_instantiate_ns2__getZpgwcs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		return (void*)soap_instantiate_ns2__uploadWjzpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__uploadWjzp:
		return (void*)soap_instantiate_ns2__uploadWjzp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		return (void*)soap_instantiate_ns2__queryObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__queryObjectOut:
		return (void*)soap_instantiate_ns2__queryObjectOut(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_SOAP_ENC__Array:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<SOAP_ENC__Array*>(p->ptr), SOAP_ENC__Array);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<SOAP_ENC__Array*>(p->ptr), SOAP_ENC__Array);
		break;
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<SOAP_ENC__base64Binary*>(p->ptr), SOAP_ENC__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<SOAP_ENC__base64Binary*>(p->ptr), SOAP_ENC__base64Binary);
		break;
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		break;
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ArrayOf_USCOREsoapenc_USCOREstring*>(p->ptr), ArrayOf_USCOREsoapenc_USCOREstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ArrayOf_USCOREsoapenc_USCOREstring*>(p->ptr), ArrayOf_USCOREsoapenc_USCOREstring);
		break;
	case SOAP_TYPE_ns2__mainResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__mainResponse*>(p->ptr), struct ns2__mainResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__mainResponse*>(p->ptr), struct ns2__mainResponse);
		break;
	case SOAP_TYPE_ns2__main:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__main*>(p->ptr), struct ns2__main);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__main*>(p->ptr), struct ns2__main);
		break;
	case SOAP_TYPE_ns2__initResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__initResponse*>(p->ptr), struct ns2__initResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__initResponse*>(p->ptr), struct ns2__initResponse);
		break;
	case SOAP_TYPE_ns2__init:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__init*>(p->ptr), struct ns2__init);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__init*>(p->ptr), struct ns2__init);
		break;
	case SOAP_TYPE_ns2__checkNullResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__checkNullResponse*>(p->ptr), struct ns2__checkNullResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__checkNullResponse*>(p->ptr), struct ns2__checkNullResponse);
		break;
	case SOAP_TYPE_ns2__checkNull:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__checkNull*>(p->ptr), struct ns2__checkNull);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__checkNull*>(p->ptr), struct ns2__checkNull);
		break;
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__writeObjectOutResponse*>(p->ptr), struct ns2__writeObjectOutResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__writeObjectOutResponse*>(p->ptr), struct ns2__writeObjectOutResponse);
		break;
	case SOAP_TYPE_ns2__writeObjectOut:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__writeObjectOut*>(p->ptr), struct ns2__writeObjectOut);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__writeObjectOut*>(p->ptr), struct ns2__writeObjectOut);
		break;
	case SOAP_TYPE_ns2__uploadFileResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__uploadFileResponse*>(p->ptr), struct ns2__uploadFileResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__uploadFileResponse*>(p->ptr), struct ns2__uploadFileResponse);
		break;
	case SOAP_TYPE_ns2__uploadFile:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__uploadFile*>(p->ptr), struct ns2__uploadFile);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__uploadFile*>(p->ptr), struct ns2__uploadFile);
		break;
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__getZpgwcsResponse*>(p->ptr), struct ns2__getZpgwcsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__getZpgwcsResponse*>(p->ptr), struct ns2__getZpgwcsResponse);
		break;
	case SOAP_TYPE_ns2__getZpgwcs:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__getZpgwcs*>(p->ptr), struct ns2__getZpgwcs);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__getZpgwcs*>(p->ptr), struct ns2__getZpgwcs);
		break;
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__uploadWjzpResponse*>(p->ptr), struct ns2__uploadWjzpResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__uploadWjzpResponse*>(p->ptr), struct ns2__uploadWjzpResponse);
		break;
	case SOAP_TYPE_ns2__uploadWjzp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__uploadWjzp*>(p->ptr), struct ns2__uploadWjzp);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__uploadWjzp*>(p->ptr), struct ns2__uploadWjzp);
		break;
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__queryObjectOutResponse*>(p->ptr), struct ns2__queryObjectOutResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__queryObjectOutResponse*>(p->ptr), struct ns2__queryObjectOutResponse);
		break;
	case SOAP_TYPE_ns2__queryObjectOut:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__queryObjectOut*>(p->ptr), struct ns2__queryObjectOut);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__queryObjectOut*>(p->ptr), struct ns2__queryObjectOut);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_SOAP_ENC__Array:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy SOAP_ENC__Array type=%d location=%p object=%p\n", t, p, q));
		*(SOAP_ENC__Array*)p = *(SOAP_ENC__Array*)q;
		break;
	case SOAP_TYPE_SOAP_ENC__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy SOAP_ENC__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(SOAP_ENC__base64Binary*)p = *(SOAP_ENC__base64Binary*)q;
		break;
	case SOAP_TYPE_std__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::wstring type=%d location=%p object=%p\n", t, p, q));
		*(std::wstring*)p = *(std::wstring*)q;
		break;
	case SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ArrayOf_USCOREsoapenc_USCOREstring type=%d location=%p object=%p\n", t, p, q));
		*(ArrayOf_USCOREsoapenc_USCOREstring*)p = *(ArrayOf_USCOREsoapenc_USCOREstring*)q;
		break;
	case SOAP_TYPE_ns2__mainResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__mainResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__mainResponse*)p = *(struct ns2__mainResponse*)q;
		break;
	case SOAP_TYPE_ns2__main:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__main type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__main*)p = *(struct ns2__main*)q;
		break;
	case SOAP_TYPE_ns2__initResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__initResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__initResponse*)p = *(struct ns2__initResponse*)q;
		break;
	case SOAP_TYPE_ns2__init:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__init type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__init*)p = *(struct ns2__init*)q;
		break;
	case SOAP_TYPE_ns2__checkNullResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__checkNullResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__checkNullResponse*)p = *(struct ns2__checkNullResponse*)q;
		break;
	case SOAP_TYPE_ns2__checkNull:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__checkNull type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__checkNull*)p = *(struct ns2__checkNull*)q;
		break;
	case SOAP_TYPE_ns2__writeObjectOutResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__writeObjectOutResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__writeObjectOutResponse*)p = *(struct ns2__writeObjectOutResponse*)q;
		break;
	case SOAP_TYPE_ns2__writeObjectOut:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__writeObjectOut type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__writeObjectOut*)p = *(struct ns2__writeObjectOut*)q;
		break;
	case SOAP_TYPE_ns2__uploadFileResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__uploadFileResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__uploadFileResponse*)p = *(struct ns2__uploadFileResponse*)q;
		break;
	case SOAP_TYPE_ns2__uploadFile:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__uploadFile type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__uploadFile*)p = *(struct ns2__uploadFile*)q;
		break;
	case SOAP_TYPE_ns2__getZpgwcsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__getZpgwcsResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__getZpgwcsResponse*)p = *(struct ns2__getZpgwcsResponse*)q;
		break;
	case SOAP_TYPE_ns2__getZpgwcs:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__getZpgwcs type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__getZpgwcs*)p = *(struct ns2__getZpgwcs*)q;
		break;
	case SOAP_TYPE_ns2__uploadWjzpResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__uploadWjzpResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__uploadWjzpResponse*)p = *(struct ns2__uploadWjzpResponse*)q;
		break;
	case SOAP_TYPE_ns2__uploadWjzp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__uploadWjzp type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__uploadWjzp*)p = *(struct ns2__uploadWjzp*)q;
		break;
	case SOAP_TYPE_ns2__queryObjectOutResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__queryObjectOutResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__queryObjectOutResponse*)p = *(struct ns2__queryObjectOutResponse*)q;
		break;
	case SOAP_TYPE_ns2__queryObjectOut:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__queryObjectOut type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__queryObjectOut*)p = *(struct ns2__queryObjectOut*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	wchar_t *t;
		s = (std::wstring*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__wstring, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::wstring *p;
	size_t k = sizeof(std::wstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::wstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::wstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::wstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	if (soap_out_std__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ArrayOf_USCOREsoapenc_USCOREstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
}

void ArrayOf_USCOREsoapenc_USCOREstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring))
	{	for (size_t i = 0; i < (size_t)this->__size; i++)
		{	soap_embedded(soap, this->__ptr + i, SOAP_TYPE_std__wstring);
			soap_serialize_std__wstring(soap, this->__ptr + i);
		}
	}
#endif
}

int ArrayOf_USCOREsoapenc_USCOREstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *tag, int id, const ArrayOf_USCOREsoapenc_USCOREstring *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "xsd:string", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		if (soap_out_std__wstring(soap, "item", -1, &a->__ptr[i], ""))
			return soap->error;
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOf_USCOREsoapenc_USCOREstring::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC4 soap_in_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *tag, ArrayOf_USCOREsoapenc_USCOREstring *a, const char *type)
{
	int i, j;
	std::wstring *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOf_USCOREsoapenc_USCOREstring*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, sizeof(ArrayOf_USCOREsoapenc_USCOREstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if ((size_t)a->__size > soap->maxoccurs)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = soap_new_std__wstring(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__wstring(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__wstring(soap, NULL, a->__ptr + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_alloc_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = soap_block<std::wstring>::push(soap, NULL);
				if (!p)
					break;
				soap_default_std__wstring(soap, p);
				if (!soap_in_std__wstring(soap, NULL, p, "xsd:string"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					soap_block<std::wstring>::pop(soap, NULL);
					break;
				}
				if ((size_t)a->__size > soap->maxoccurs)
				{	soap->error = SOAP_OCCURS;
					return NULL;
				}
			}
			if (soap->blist->size)
				a->__ptr = soap_new_std__wstring(soap, soap->blist->size/sizeof(std::wstring));
			else
				a->__ptr = NULL;
			if (a->__ptr)
				soap_block<std::wstring>::save(soap, NULL, a->__ptr);
			else
				soap_block<std::wstring>::end(soap, NULL);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOf_USCOREsoapenc_USCOREstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, sizeof(ArrayOf_USCOREsoapenc_USCOREstring), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC2 soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ArrayOf_USCOREsoapenc_USCOREstring *p;
	size_t k = sizeof(ArrayOf_USCOREsoapenc_USCOREstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ArrayOf_USCOREsoapenc_USCOREstring);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ArrayOf_USCOREsoapenc_USCOREstring, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ArrayOf_USCOREsoapenc_USCOREstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ArrayOf_USCOREsoapenc_USCOREstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag ? tag : "SOAP-ENC:Array", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ArrayOf_USCOREsoapenc_USCOREstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOf_USCOREsoapenc_USCOREstring(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC4 soap_get_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOf_USCOREsoapenc_USCOREstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void SOAP_ENC__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
}

void SOAP_ENC__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_SOAP_ENC__base64Binary);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SOAP_ENC__base64Binary2s(struct soap *soap, SOAP_ENC__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int SOAP_ENC__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SOAP_ENC__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__base64Binary(struct soap *soap, const char *tag, int id, const SOAP_ENC__base64Binary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_SOAP_ENC__base64Binary, NULL);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SOAP_ENC__base64Binary(struct soap *soap, const char *s, SOAP_ENC__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *SOAP_ENC__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_SOAP_ENC__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 SOAP_ENC__base64Binary * SOAP_FMAC4 soap_in_SOAP_ENC__base64Binary(struct soap *soap, const char *tag, SOAP_ENC__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (SOAP_ENC__base64Binary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENC__base64Binary, sizeof(SOAP_ENC__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SOAP_ENC__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENC__base64Binary, SOAP_TYPE_SOAP_ENC__base64Binary, sizeof(SOAP_ENC__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 SOAP_ENC__base64Binary * SOAP_FMAC2 soap_instantiate_SOAP_ENC__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENC__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	SOAP_ENC__base64Binary *p;
	size_t k = sizeof(SOAP_ENC__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENC__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, SOAP_ENC__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, SOAP_ENC__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated SOAP_ENC__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int SOAP_ENC__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_SOAP_ENC__base64Binary(soap, tag ? tag : "SOAP-ENC:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SOAP_ENC__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SOAP_ENC__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 SOAP_ENC__base64Binary * SOAP_FMAC4 soap_get_SOAP_ENC__base64Binary(struct soap *soap, SOAP_ENC__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENC__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void SOAP_ENC__Array::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
}

void SOAP_ENC__Array::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_SOAP_ENC__Array))
	{	for (size_t i = 0; i < (size_t)this->__size; i++)
		{
		}
	}
#endif
}

int SOAP_ENC__Array::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SOAP_ENC__Array(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__Array(struct soap *soap, const char *tag, int id, const SOAP_ENC__Array *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_SOAP_ENC__Array, NULL);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		if (soap_outliteral(soap, "item", &a->__ptr[i], NULL))
			return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *SOAP_ENC__Array::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_SOAP_ENC__Array(soap, tag, this, type);
}

SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_in_SOAP_ENC__Array(struct soap *soap, const char *tag, SOAP_ENC__Array *a, const char *type)
{
	int i, j;
	char **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (SOAP_ENC__Array*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENC__Array, sizeof(SOAP_ENC__Array), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if ((size_t)a->__size > soap->maxoccurs)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (char **)soap_malloc(soap, sizeof(char *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_inliteral(soap, NULL, (char**)(a->__ptr + i)))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_alloc_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (char **)soap_push_block(soap, NULL, sizeof(char *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_inliteral(soap, NULL, p))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					soap_pop_block(soap, NULL);
					break;
				}
				if ((size_t)a->__size > soap->maxoccurs)
				{	soap->error = SOAP_OCCURS;
					return NULL;
				}
			}
			a->__ptr = (char **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SOAP_ENC__Array *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENC__Array, SOAP_TYPE_SOAP_ENC__Array, sizeof(SOAP_ENC__Array), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 SOAP_ENC__Array * SOAP_FMAC2 soap_instantiate_SOAP_ENC__Array(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENC__Array(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	SOAP_ENC__Array *p;
	size_t k = sizeof(SOAP_ENC__Array);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENC__Array, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, SOAP_ENC__Array);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, SOAP_ENC__Array, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated SOAP_ENC__Array location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int SOAP_ENC__Array::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_SOAP_ENC__Array(soap, tag ? tag : "SOAP-ENC:Array", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SOAP_ENC__Array::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SOAP_ENC__Array(soap, this, tag, type);
}

SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_get_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENC__Array(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryObjectOut(struct soap *soap, struct ns2__queryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_xtlb);
	soap_default_std__wstring(soap, &a->_jkxlh);
	soap_default_std__wstring(soap, &a->_jkid);
	soap_default_std__wstring(soap, &a->_QueryXmlDoc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryObjectOut(struct soap *soap, const struct ns2__queryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_xtlb, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_xtlb);
	soap_embedded(soap, &a->_jkxlh, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkxlh);
	soap_embedded(soap, &a->_jkid, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkid);
	soap_embedded(soap, &a->_QueryXmlDoc, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_QueryXmlDoc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryObjectOut(struct soap *soap, const char *tag, int id, const struct ns2__queryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryObjectOut), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "xtlb", -1, &a->_xtlb, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkxlh", -1, &a->_jkxlh, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkid", -1, &a->_jkid, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "QueryXmlDoc", -1, &a->_QueryXmlDoc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryObjectOut * SOAP_FMAC4 soap_in_ns2__queryObjectOut(struct soap *soap, const char *tag, struct ns2__queryObjectOut *a, const char *type)
{
	size_t soap_flag__xtlb = 1;
	size_t soap_flag__jkxlh = 1;
	size_t soap_flag__jkid = 1;
	size_t soap_flag__QueryXmlDoc = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__queryObjectOut*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryObjectOut, sizeof(struct ns2__queryObjectOut), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__queryObjectOut(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__xtlb && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_xtlb, "xsd:string"))
				{	soap_flag__xtlb--;
					continue;
				}
			}
			if (soap_flag__jkxlh && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkxlh, "xsd:string"))
				{	soap_flag__jkxlh--;
					continue;
				}
			}
			if (soap_flag__jkid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkid, "xsd:string"))
				{	soap_flag__jkid--;
					continue;
				}
			}
			if (soap_flag__QueryXmlDoc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_QueryXmlDoc, "xsd:string"))
				{	soap_flag__QueryXmlDoc--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__xtlb > 0 || soap_flag__jkxlh > 0 || soap_flag__jkid > 0 || soap_flag__QueryXmlDoc > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__queryObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryObjectOut, SOAP_TYPE_ns2__queryObjectOut, sizeof(struct ns2__queryObjectOut), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__queryObjectOut * SOAP_FMAC2 soap_instantiate_ns2__queryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__queryObjectOut(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__queryObjectOut *p;
	size_t k = sizeof(struct ns2__queryObjectOut);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__queryObjectOut, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__queryObjectOut);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__queryObjectOut, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__queryObjectOut location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryObjectOut(struct soap *soap, const struct ns2__queryObjectOut *a, const char *tag, const char *type)
{
	if (soap_out_ns2__queryObjectOut(soap, tag ? tag : "ns2:queryObjectOut", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryObjectOut * SOAP_FMAC4 soap_get_ns2__queryObjectOut(struct soap *soap, struct ns2__queryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryObjectOutResponse(struct soap *soap, struct ns2__queryObjectOutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_queryObjectOutReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryObjectOutResponse(struct soap *soap, const struct ns2__queryObjectOutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_queryObjectOutReturn, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_queryObjectOutReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryObjectOutResponse(struct soap *soap, const char *tag, int id, const struct ns2__queryObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__queryObjectOutResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "queryObjectOutReturn", -1, &a->_queryObjectOutReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__queryObjectOutResponse * SOAP_FMAC4 soap_in_ns2__queryObjectOutResponse(struct soap *soap, const char *tag, struct ns2__queryObjectOutResponse *a, const char *type)
{
	size_t soap_flag__queryObjectOutReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__queryObjectOutResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__queryObjectOutResponse, sizeof(struct ns2__queryObjectOutResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__queryObjectOutResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__queryObjectOutReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_queryObjectOutReturn, "xsd:string"))
				{	soap_flag__queryObjectOutReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__queryObjectOutReturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__queryObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__queryObjectOutResponse, SOAP_TYPE_ns2__queryObjectOutResponse, sizeof(struct ns2__queryObjectOutResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__queryObjectOutResponse * SOAP_FMAC2 soap_instantiate_ns2__queryObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__queryObjectOutResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__queryObjectOutResponse *p;
	size_t k = sizeof(struct ns2__queryObjectOutResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__queryObjectOutResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__queryObjectOutResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__queryObjectOutResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__queryObjectOutResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryObjectOutResponse(struct soap *soap, const struct ns2__queryObjectOutResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__queryObjectOutResponse(soap, tag ? tag : "ns2:queryObjectOutResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__queryObjectOutResponse * SOAP_FMAC4 soap_get_ns2__queryObjectOutResponse(struct soap *soap, struct ns2__queryObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__queryObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadWjzp(struct soap *soap, struct ns2__uploadWjzp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_imgStr);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadWjzp(struct soap *soap, const struct ns2__uploadWjzp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_imgStr, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_imgStr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadWjzp(struct soap *soap, const char *tag, int id, const struct ns2__uploadWjzp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__uploadWjzp), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "imgStr", -1, &a->_imgStr, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__uploadWjzp * SOAP_FMAC4 soap_in_ns2__uploadWjzp(struct soap *soap, const char *tag, struct ns2__uploadWjzp *a, const char *type)
{
	size_t soap_flag__imgStr = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__uploadWjzp*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__uploadWjzp, sizeof(struct ns2__uploadWjzp), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__uploadWjzp(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__imgStr && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_imgStr, "xsd:string"))
				{	soap_flag__imgStr--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__imgStr > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__uploadWjzp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__uploadWjzp, SOAP_TYPE_ns2__uploadWjzp, sizeof(struct ns2__uploadWjzp), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__uploadWjzp * SOAP_FMAC2 soap_instantiate_ns2__uploadWjzp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__uploadWjzp(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__uploadWjzp *p;
	size_t k = sizeof(struct ns2__uploadWjzp);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__uploadWjzp, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__uploadWjzp);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__uploadWjzp, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__uploadWjzp location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadWjzp(struct soap *soap, const struct ns2__uploadWjzp *a, const char *tag, const char *type)
{
	if (soap_out_ns2__uploadWjzp(soap, tag ? tag : "ns2:uploadWjzp", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__uploadWjzp * SOAP_FMAC4 soap_get_ns2__uploadWjzp(struct soap *soap, struct ns2__uploadWjzp *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__uploadWjzp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadWjzpResponse(struct soap *soap, struct ns2__uploadWjzpResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_uploadWjzpReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadWjzpResponse(struct soap *soap, const struct ns2__uploadWjzpResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_uploadWjzpReturn, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_uploadWjzpReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadWjzpResponse(struct soap *soap, const char *tag, int id, const struct ns2__uploadWjzpResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__uploadWjzpResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "uploadWjzpReturn", -1, &a->_uploadWjzpReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__uploadWjzpResponse * SOAP_FMAC4 soap_in_ns2__uploadWjzpResponse(struct soap *soap, const char *tag, struct ns2__uploadWjzpResponse *a, const char *type)
{
	size_t soap_flag__uploadWjzpReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__uploadWjzpResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__uploadWjzpResponse, sizeof(struct ns2__uploadWjzpResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__uploadWjzpResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__uploadWjzpReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_uploadWjzpReturn, "xsd:string"))
				{	soap_flag__uploadWjzpReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__uploadWjzpReturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__uploadWjzpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__uploadWjzpResponse, SOAP_TYPE_ns2__uploadWjzpResponse, sizeof(struct ns2__uploadWjzpResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__uploadWjzpResponse * SOAP_FMAC2 soap_instantiate_ns2__uploadWjzpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__uploadWjzpResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__uploadWjzpResponse *p;
	size_t k = sizeof(struct ns2__uploadWjzpResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__uploadWjzpResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__uploadWjzpResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__uploadWjzpResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__uploadWjzpResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadWjzpResponse(struct soap *soap, const struct ns2__uploadWjzpResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__uploadWjzpResponse(soap, tag ? tag : "ns2:uploadWjzpResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__uploadWjzpResponse * SOAP_FMAC4 soap_get_ns2__uploadWjzpResponse(struct soap *soap, struct ns2__uploadWjzpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__uploadWjzpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getZpgwcs(struct soap *soap, struct ns2__getZpgwcs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_jcz);
	soap_default_std__wstring(soap, &a->_jcxdm);
	soap_default_std__wstring(soap, &a->_jcxm);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getZpgwcs(struct soap *soap, const struct ns2__getZpgwcs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_jcz, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jcz);
	soap_embedded(soap, &a->_jcxdm, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jcxdm);
	soap_embedded(soap, &a->_jcxm, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jcxm);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getZpgwcs(struct soap *soap, const char *tag, int id, const struct ns2__getZpgwcs *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getZpgwcs), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "jcz", -1, &a->_jcz, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jcxdm", -1, &a->_jcxdm, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jcxm", -1, &a->_jcxm, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getZpgwcs * SOAP_FMAC4 soap_in_ns2__getZpgwcs(struct soap *soap, const char *tag, struct ns2__getZpgwcs *a, const char *type)
{
	size_t soap_flag__jcz = 1;
	size_t soap_flag__jcxdm = 1;
	size_t soap_flag__jcxm = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__getZpgwcs*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getZpgwcs, sizeof(struct ns2__getZpgwcs), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__getZpgwcs(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__jcz && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jcz, "xsd:string"))
				{	soap_flag__jcz--;
					continue;
				}
			}
			if (soap_flag__jcxdm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jcxdm, "xsd:string"))
				{	soap_flag__jcxdm--;
					continue;
				}
			}
			if (soap_flag__jcxm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jcxm, "xsd:string"))
				{	soap_flag__jcxm--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__jcz > 0 || soap_flag__jcxdm > 0 || soap_flag__jcxm > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__getZpgwcs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getZpgwcs, SOAP_TYPE_ns2__getZpgwcs, sizeof(struct ns2__getZpgwcs), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__getZpgwcs * SOAP_FMAC2 soap_instantiate_ns2__getZpgwcs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getZpgwcs(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__getZpgwcs *p;
	size_t k = sizeof(struct ns2__getZpgwcs);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__getZpgwcs, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__getZpgwcs);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__getZpgwcs, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__getZpgwcs location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getZpgwcs(struct soap *soap, const struct ns2__getZpgwcs *a, const char *tag, const char *type)
{
	if (soap_out_ns2__getZpgwcs(soap, tag ? tag : "ns2:getZpgwcs", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__getZpgwcs * SOAP_FMAC4 soap_get_ns2__getZpgwcs(struct soap *soap, struct ns2__getZpgwcs *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getZpgwcs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getZpgwcsResponse(struct soap *soap, struct ns2__getZpgwcsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_getZpgwcsReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getZpgwcsResponse(struct soap *soap, const struct ns2__getZpgwcsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_getZpgwcsReturn, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_getZpgwcsReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getZpgwcsResponse(struct soap *soap, const char *tag, int id, const struct ns2__getZpgwcsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__getZpgwcsResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "getZpgwcsReturn", -1, &a->_getZpgwcsReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__getZpgwcsResponse * SOAP_FMAC4 soap_in_ns2__getZpgwcsResponse(struct soap *soap, const char *tag, struct ns2__getZpgwcsResponse *a, const char *type)
{
	size_t soap_flag__getZpgwcsReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__getZpgwcsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__getZpgwcsResponse, sizeof(struct ns2__getZpgwcsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__getZpgwcsResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__getZpgwcsReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_getZpgwcsReturn, "xsd:string"))
				{	soap_flag__getZpgwcsReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__getZpgwcsReturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__getZpgwcsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__getZpgwcsResponse, SOAP_TYPE_ns2__getZpgwcsResponse, sizeof(struct ns2__getZpgwcsResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__getZpgwcsResponse * SOAP_FMAC2 soap_instantiate_ns2__getZpgwcsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__getZpgwcsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__getZpgwcsResponse *p;
	size_t k = sizeof(struct ns2__getZpgwcsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__getZpgwcsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__getZpgwcsResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__getZpgwcsResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__getZpgwcsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getZpgwcsResponse(struct soap *soap, const struct ns2__getZpgwcsResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__getZpgwcsResponse(soap, tag ? tag : "ns2:getZpgwcsResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__getZpgwcsResponse * SOAP_FMAC4 soap_get_ns2__getZpgwcsResponse(struct soap *soap, struct ns2__getZpgwcsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__getZpgwcsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadFile(struct soap *soap, struct ns2__uploadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_xtlb);
	soap_default_std__wstring(soap, &a->_jkxlh);
	soap_default_std__wstring(soap, &a->_jkid);
	a->_fileNode.SOAP_ENC__base64Binary::soap_default(soap);
	soap_default_std__wstring(soap, &a->_WriteXmlDoc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadFile(struct soap *soap, const struct ns2__uploadFile *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_xtlb, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_xtlb);
	soap_embedded(soap, &a->_jkxlh, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkxlh);
	soap_embedded(soap, &a->_jkid, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkid);
	a->_fileNode.soap_serialize(soap);
	soap_embedded(soap, &a->_WriteXmlDoc, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_WriteXmlDoc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadFile(struct soap *soap, const char *tag, int id, const struct ns2__uploadFile *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__uploadFile), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "xtlb", -1, &a->_xtlb, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkxlh", -1, &a->_jkxlh, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkid", -1, &a->_jkid, ""))
		return soap->error;
	if (a->_fileNode.soap_out(soap, "fileNode", -1, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "WriteXmlDoc", -1, &a->_WriteXmlDoc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__uploadFile * SOAP_FMAC4 soap_in_ns2__uploadFile(struct soap *soap, const char *tag, struct ns2__uploadFile *a, const char *type)
{
	size_t soap_flag__xtlb = 1;
	size_t soap_flag__jkxlh = 1;
	size_t soap_flag__jkid = 1;
	size_t soap_flag__fileNode = 1;
	size_t soap_flag__WriteXmlDoc = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__uploadFile*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__uploadFile, sizeof(struct ns2__uploadFile), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__uploadFile(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__xtlb && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_xtlb, "xsd:string"))
				{	soap_flag__xtlb--;
					continue;
				}
			}
			if (soap_flag__jkxlh && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkxlh, "xsd:string"))
				{	soap_flag__jkxlh--;
					continue;
				}
			}
			if (soap_flag__jkid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkid, "xsd:string"))
				{	soap_flag__jkid--;
					continue;
				}
			}
			if (soap_flag__fileNode && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->_fileNode.soap_in(soap, NULL, "SOAP-ENC:base64Binary"))
				{	soap_flag__fileNode--;
					continue;
				}
			}
			if (soap_flag__WriteXmlDoc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_WriteXmlDoc, "xsd:string"))
				{	soap_flag__WriteXmlDoc--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__xtlb > 0 || soap_flag__jkxlh > 0 || soap_flag__jkid > 0 || soap_flag__fileNode > 0 || soap_flag__WriteXmlDoc > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__uploadFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__uploadFile, SOAP_TYPE_ns2__uploadFile, sizeof(struct ns2__uploadFile), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__uploadFile * SOAP_FMAC2 soap_instantiate_ns2__uploadFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__uploadFile(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__uploadFile *p;
	size_t k = sizeof(struct ns2__uploadFile);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__uploadFile, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__uploadFile);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__uploadFile, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__uploadFile location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadFile(struct soap *soap, const struct ns2__uploadFile *a, const char *tag, const char *type)
{
	if (soap_out_ns2__uploadFile(soap, tag ? tag : "ns2:uploadFile", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__uploadFile * SOAP_FMAC4 soap_get_ns2__uploadFile(struct soap *soap, struct ns2__uploadFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__uploadFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadFileResponse(struct soap *soap, struct ns2__uploadFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_uploadFileReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadFileResponse(struct soap *soap, const struct ns2__uploadFileResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_uploadFileReturn, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_uploadFileReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadFileResponse(struct soap *soap, const char *tag, int id, const struct ns2__uploadFileResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__uploadFileResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "uploadFileReturn", -1, &a->_uploadFileReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__uploadFileResponse * SOAP_FMAC4 soap_in_ns2__uploadFileResponse(struct soap *soap, const char *tag, struct ns2__uploadFileResponse *a, const char *type)
{
	size_t soap_flag__uploadFileReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__uploadFileResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__uploadFileResponse, sizeof(struct ns2__uploadFileResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__uploadFileResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__uploadFileReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_uploadFileReturn, "xsd:string"))
				{	soap_flag__uploadFileReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__uploadFileReturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__uploadFileResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__uploadFileResponse, SOAP_TYPE_ns2__uploadFileResponse, sizeof(struct ns2__uploadFileResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__uploadFileResponse * SOAP_FMAC2 soap_instantiate_ns2__uploadFileResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__uploadFileResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__uploadFileResponse *p;
	size_t k = sizeof(struct ns2__uploadFileResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__uploadFileResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__uploadFileResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__uploadFileResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__uploadFileResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadFileResponse(struct soap *soap, const struct ns2__uploadFileResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__uploadFileResponse(soap, tag ? tag : "ns2:uploadFileResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__uploadFileResponse * SOAP_FMAC4 soap_get_ns2__uploadFileResponse(struct soap *soap, struct ns2__uploadFileResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__uploadFileResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__writeObjectOut(struct soap *soap, struct ns2__writeObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_xtlb);
	soap_default_std__wstring(soap, &a->_jkxlh);
	soap_default_std__wstring(soap, &a->_jkid);
	soap_default_std__wstring(soap, &a->_WriteXmlDoc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__writeObjectOut(struct soap *soap, const struct ns2__writeObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_xtlb, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_xtlb);
	soap_embedded(soap, &a->_jkxlh, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkxlh);
	soap_embedded(soap, &a->_jkid, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_jkid);
	soap_embedded(soap, &a->_WriteXmlDoc, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_WriteXmlDoc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__writeObjectOut(struct soap *soap, const char *tag, int id, const struct ns2__writeObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__writeObjectOut), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "xtlb", -1, &a->_xtlb, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkxlh", -1, &a->_jkxlh, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "jkid", -1, &a->_jkid, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "WriteXmlDoc", -1, &a->_WriteXmlDoc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__writeObjectOut * SOAP_FMAC4 soap_in_ns2__writeObjectOut(struct soap *soap, const char *tag, struct ns2__writeObjectOut *a, const char *type)
{
	size_t soap_flag__xtlb = 1;
	size_t soap_flag__jkxlh = 1;
	size_t soap_flag__jkid = 1;
	size_t soap_flag__WriteXmlDoc = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__writeObjectOut*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__writeObjectOut, sizeof(struct ns2__writeObjectOut), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__writeObjectOut(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__xtlb && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_xtlb, "xsd:string"))
				{	soap_flag__xtlb--;
					continue;
				}
			}
			if (soap_flag__jkxlh && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkxlh, "xsd:string"))
				{	soap_flag__jkxlh--;
					continue;
				}
			}
			if (soap_flag__jkid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_jkid, "xsd:string"))
				{	soap_flag__jkid--;
					continue;
				}
			}
			if (soap_flag__WriteXmlDoc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_WriteXmlDoc, "xsd:string"))
				{	soap_flag__WriteXmlDoc--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__xtlb > 0 || soap_flag__jkxlh > 0 || soap_flag__jkid > 0 || soap_flag__WriteXmlDoc > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__writeObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__writeObjectOut, SOAP_TYPE_ns2__writeObjectOut, sizeof(struct ns2__writeObjectOut), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__writeObjectOut * SOAP_FMAC2 soap_instantiate_ns2__writeObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__writeObjectOut(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__writeObjectOut *p;
	size_t k = sizeof(struct ns2__writeObjectOut);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__writeObjectOut, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__writeObjectOut);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__writeObjectOut, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__writeObjectOut location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__writeObjectOut(struct soap *soap, const struct ns2__writeObjectOut *a, const char *tag, const char *type)
{
	if (soap_out_ns2__writeObjectOut(soap, tag ? tag : "ns2:writeObjectOut", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__writeObjectOut * SOAP_FMAC4 soap_get_ns2__writeObjectOut(struct soap *soap, struct ns2__writeObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__writeObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__writeObjectOutResponse(struct soap *soap, struct ns2__writeObjectOutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->_writeObjectOutReturn);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__writeObjectOutResponse(struct soap *soap, const struct ns2__writeObjectOutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_writeObjectOutReturn, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->_writeObjectOutReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__writeObjectOutResponse(struct soap *soap, const char *tag, int id, const struct ns2__writeObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__writeObjectOutResponse), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "writeObjectOutReturn", -1, &a->_writeObjectOutReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__writeObjectOutResponse * SOAP_FMAC4 soap_in_ns2__writeObjectOutResponse(struct soap *soap, const char *tag, struct ns2__writeObjectOutResponse *a, const char *type)
{
	size_t soap_flag__writeObjectOutReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__writeObjectOutResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__writeObjectOutResponse, sizeof(struct ns2__writeObjectOutResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns2__writeObjectOutResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__writeObjectOutReturn && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__wstring(soap, NULL, &a->_writeObjectOutReturn, "xsd:string"))
				{	soap_flag__writeObjectOutReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__writeObjectOutReturn > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__writeObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__writeObjectOutResponse, SOAP_TYPE_ns2__writeObjectOutResponse, sizeof(struct ns2__writeObjectOutResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__writeObjectOutResponse * SOAP_FMAC2 soap_instantiate_ns2__writeObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__writeObjectOutResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__writeObjectOutResponse *p;
	size_t k = sizeof(struct ns2__writeObjectOutResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__writeObjectOutResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__writeObjectOutResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__writeObjectOutResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__writeObjectOutResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__writeObjectOutResponse(struct soap *soap, const struct ns2__writeObjectOutResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__writeObjectOutResponse(soap, tag ? tag : "ns2:writeObjectOutResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__writeObjectOutResponse * SOAP_FMAC4 soap_get_ns2__writeObjectOutResponse(struct soap *soap, struct ns2__writeObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__writeObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkNull(struct soap *soap, struct ns2__checkNull *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_params = NULL;
	a->_paramNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkNull(struct soap *soap, const struct ns2__checkNull *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, &a->_params);
	soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, &a->_paramNames);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkNull(struct soap *soap, const char *tag, int id, const struct ns2__checkNull *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__checkNull), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, "params", -1, &a->_params, ""))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, "paramNames", -1, &a->_paramNames, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__checkNull * SOAP_FMAC4 soap_in_ns2__checkNull(struct soap *soap, const char *tag, struct ns2__checkNull *a, const char *type)
{
	size_t soap_flag__params = 1;
	size_t soap_flag__paramNames = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__checkNull*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__checkNull, sizeof(struct ns2__checkNull), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__checkNull(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__params && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, NULL, &a->_params, "xsd:string"))
				{	soap_flag__params--;
					continue;
				}
			}
			if (soap_flag__paramNames && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, NULL, &a->_paramNames, "xsd:string"))
				{	soap_flag__paramNames--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__checkNull *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__checkNull, SOAP_TYPE_ns2__checkNull, sizeof(struct ns2__checkNull), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__checkNull * SOAP_FMAC2 soap_instantiate_ns2__checkNull(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__checkNull(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__checkNull *p;
	size_t k = sizeof(struct ns2__checkNull);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__checkNull, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__checkNull);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__checkNull, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__checkNull location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkNull(struct soap *soap, const struct ns2__checkNull *a, const char *tag, const char *type)
{
	if (soap_out_ns2__checkNull(soap, tag ? tag : "ns2:checkNull", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__checkNull * SOAP_FMAC4 soap_get_ns2__checkNull(struct soap *soap, struct ns2__checkNull *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__checkNull(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkNullResponse(struct soap *soap, struct ns2__checkNullResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_checkNullReturn = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkNullResponse(struct soap *soap, const struct ns2__checkNullResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, &a->_checkNullReturn);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkNullResponse(struct soap *soap, const char *tag, int id, const struct ns2__checkNullResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__checkNullResponse), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, "checkNullReturn", -1, &a->_checkNullReturn, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__checkNullResponse * SOAP_FMAC4 soap_in_ns2__checkNullResponse(struct soap *soap, const char *tag, struct ns2__checkNullResponse *a, const char *type)
{
	size_t soap_flag__checkNullReturn = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__checkNullResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__checkNullResponse, sizeof(struct ns2__checkNullResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__checkNullResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__checkNullReturn && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, NULL, &a->_checkNullReturn, "xsd:string"))
				{	soap_flag__checkNullReturn--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__checkNullResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__checkNullResponse, SOAP_TYPE_ns2__checkNullResponse, sizeof(struct ns2__checkNullResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__checkNullResponse * SOAP_FMAC2 soap_instantiate_ns2__checkNullResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__checkNullResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__checkNullResponse *p;
	size_t k = sizeof(struct ns2__checkNullResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__checkNullResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__checkNullResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__checkNullResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__checkNullResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkNullResponse(struct soap *soap, const struct ns2__checkNullResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__checkNullResponse(soap, tag ? tag : "ns2:checkNullResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__checkNullResponse * SOAP_FMAC4 soap_get_ns2__checkNullResponse(struct soap *soap, struct ns2__checkNullResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__checkNullResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__init(struct soap *soap, struct ns2__init *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__init(struct soap *soap, const struct ns2__init *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__init(struct soap *soap, const char *tag, int id, const struct ns2__init *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__init), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__init * SOAP_FMAC4 soap_in_ns2__init(struct soap *soap, const char *tag, struct ns2__init *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__init*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__init, sizeof(struct ns2__init), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__init(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__init *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__init, SOAP_TYPE_ns2__init, sizeof(struct ns2__init), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__init * SOAP_FMAC2 soap_instantiate_ns2__init(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__init(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__init *p;
	size_t k = sizeof(struct ns2__init);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__init, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__init);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__init, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__init location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__init(struct soap *soap, const struct ns2__init *a, const char *tag, const char *type)
{
	if (soap_out_ns2__init(soap, tag ? tag : "ns2:init", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__init * SOAP_FMAC4 soap_get_ns2__init(struct soap *soap, struct ns2__init *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__init(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__initResponse(struct soap *soap, struct ns2__initResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__initResponse(struct soap *soap, const struct ns2__initResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__initResponse(struct soap *soap, const char *tag, int id, const struct ns2__initResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__initResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__initResponse * SOAP_FMAC4 soap_in_ns2__initResponse(struct soap *soap, const char *tag, struct ns2__initResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__initResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__initResponse, sizeof(struct ns2__initResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__initResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__initResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__initResponse, SOAP_TYPE_ns2__initResponse, sizeof(struct ns2__initResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__initResponse * SOAP_FMAC2 soap_instantiate_ns2__initResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__initResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__initResponse *p;
	size_t k = sizeof(struct ns2__initResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__initResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__initResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__initResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__initResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__initResponse(struct soap *soap, const struct ns2__initResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__initResponse(soap, tag ? tag : "ns2:initResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__initResponse * SOAP_FMAC4 soap_get_ns2__initResponse(struct soap *soap, struct ns2__initResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__initResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__main(struct soap *soap, struct ns2__main *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_args = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__main(struct soap *soap, const struct ns2__main *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, &a->_args);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__main(struct soap *soap, const char *tag, int id, const struct ns2__main *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__main), type))
		return soap->error;
	if (soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, "args", -1, &a->_args, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__main * SOAP_FMAC4 soap_in_ns2__main(struct soap *soap, const char *tag, struct ns2__main *a, const char *type)
{
	size_t soap_flag__args = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__main*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__main, sizeof(struct ns2__main), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__main(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__args && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, NULL, &a->_args, "xsd:string"))
				{	soap_flag__args--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__main *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__main, SOAP_TYPE_ns2__main, sizeof(struct ns2__main), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__main * SOAP_FMAC2 soap_instantiate_ns2__main(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__main(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__main *p;
	size_t k = sizeof(struct ns2__main);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__main, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__main);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__main, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__main location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__main(struct soap *soap, const struct ns2__main *a, const char *tag, const char *type)
{
	if (soap_out_ns2__main(soap, tag ? tag : "ns2:main", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__main * SOAP_FMAC4 soap_get_ns2__main(struct soap *soap, struct ns2__main *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__main(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__mainResponse(struct soap *soap, struct ns2__mainResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__mainResponse(struct soap *soap, const struct ns2__mainResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__mainResponse(struct soap *soap, const char *tag, int id, const struct ns2__mainResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__mainResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__mainResponse * SOAP_FMAC4 soap_in_ns2__mainResponse(struct soap *soap, const char *tag, struct ns2__mainResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns2__mainResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__mainResponse, sizeof(struct ns2__mainResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__mainResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__mainResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__mainResponse, SOAP_TYPE_ns2__mainResponse, sizeof(struct ns2__mainResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__mainResponse * SOAP_FMAC2 soap_instantiate_ns2__mainResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__mainResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__mainResponse *p;
	size_t k = sizeof(struct ns2__mainResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__mainResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__mainResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__mainResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__mainResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__mainResponse(struct soap *soap, const struct ns2__mainResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__mainResponse(soap, tag ? tag : "ns2:mainResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__mainResponse * SOAP_FMAC4 soap_get_ns2__mainResponse(struct soap *soap, struct ns2__mainResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__mainResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *tag, int id, ArrayOf_USCOREsoapenc_USCOREstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring ? type : NULL);
}

SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *tag, ArrayOf_USCOREsoapenc_USCOREstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ArrayOf_USCOREsoapenc_USCOREstring **)soap_malloc(soap, sizeof(ArrayOf_USCOREsoapenc_USCOREstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ArrayOf_USCOREsoapenc_USCOREstring *)soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ArrayOf_USCOREsoapenc_USCOREstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring, sizeof(ArrayOf_USCOREsoapenc_USCOREstring), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, tag ? tag : "SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
