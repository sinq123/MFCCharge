/* soapH.h
   Generated by gSOAP 2.8.108 for jcjkService.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring_DEFINED
#define SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCOREsoapenc_USCOREstring(struct soap*, const char*, int, const ArrayOf_USCOREsoapenc_USCOREstring *, const char*);
SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC4 soap_in_ArrayOf_USCOREsoapenc_USCOREstring(struct soap*, const char*, ArrayOf_USCOREsoapenc_USCOREstring *, const char*);
SOAP_FMAC1 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC2 soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOf_USCOREsoapenc_USCOREstring * soap_new_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_ArrayOf_USCOREsoapenc_USCOREstring(soap, n, NULL, NULL, NULL);
}

inline ArrayOf_USCOREsoapenc_USCOREstring * soap_new_req_ArrayOf_USCOREsoapenc_USCOREstring(
	struct soap *soap)
{
	ArrayOf_USCOREsoapenc_USCOREstring *_p = ::soap_new_ArrayOf_USCOREsoapenc_USCOREstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ArrayOf_USCOREsoapenc_USCOREstring * soap_new_set_ArrayOf_USCOREsoapenc_USCOREstring(
	struct soap *soap,
	std::wstring *__ptr,
	int __size)
{
	ArrayOf_USCOREsoapenc_USCOREstring *_p = ::soap_new_ArrayOf_USCOREsoapenc_USCOREstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ArrayOf_USCOREsoapenc_USCOREstring::__ptr = __ptr;
		_p->ArrayOf_USCOREsoapenc_USCOREstring::__size = __size;
	}
	return _p;
}

inline int soap_write_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *URL, ArrayOf_USCOREsoapenc_USCOREstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *URL, ArrayOf_USCOREsoapenc_USCOREstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *URL, ArrayOf_USCOREsoapenc_USCOREstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOf_USCOREsoapenc_USCOREstring ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring * SOAP_FMAC4 soap_get_ArrayOf_USCOREsoapenc_USCOREstring(struct soap*, ArrayOf_USCOREsoapenc_USCOREstring *, const char*, const char*);

inline int soap_read_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ArrayOf_USCOREsoapenc_USCOREstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, const char *URL, ArrayOf_USCOREsoapenc_USCOREstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ArrayOf_USCOREsoapenc_USCOREstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ArrayOf_USCOREsoapenc_USCOREstring(struct soap *soap, ArrayOf_USCOREsoapenc_USCOREstring *p)
{
	if (::soap_read_ArrayOf_USCOREsoapenc_USCOREstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__base64Binary_DEFINED
#define SOAP_TYPE_SOAP_ENC__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__base64Binary(struct soap*, const char*, int, const SOAP_ENC__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_SOAP_ENC__base64Binary2s(struct soap*, SOAP_ENC__base64Binary);
SOAP_FMAC3 SOAP_ENC__base64Binary * SOAP_FMAC4 soap_in_SOAP_ENC__base64Binary(struct soap*, const char*, SOAP_ENC__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2SOAP_ENC__base64Binary(struct soap*, const char*, SOAP_ENC__base64Binary *);
SOAP_FMAC1 SOAP_ENC__base64Binary * SOAP_FMAC2 soap_instantiate_SOAP_ENC__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline SOAP_ENC__base64Binary * soap_new_SOAP_ENC__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENC__base64Binary(soap, n, NULL, NULL, NULL);
}

inline SOAP_ENC__base64Binary * soap_new_req_SOAP_ENC__base64Binary(
	struct soap *soap)
{
	SOAP_ENC__base64Binary *_p = ::soap_new_SOAP_ENC__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline SOAP_ENC__base64Binary * soap_new_set_SOAP_ENC__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	SOAP_ENC__base64Binary *_p = ::soap_new_SOAP_ENC__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->SOAP_ENC__base64Binary::__ptr = __ptr;
		_p->SOAP_ENC__base64Binary::__size = __size;
	}
	return _p;
}

inline int soap_write_SOAP_ENC__base64Binary(struct soap *soap, SOAP_ENC__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:base64Binary", p->soap_type() == SOAP_TYPE_SOAP_ENC__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENC__base64Binary(struct soap *soap, const char *URL, SOAP_ENC__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:base64Binary", p->soap_type() == SOAP_TYPE_SOAP_ENC__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENC__base64Binary(struct soap *soap, const char *URL, SOAP_ENC__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:base64Binary", p->soap_type() == SOAP_TYPE_SOAP_ENC__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENC__base64Binary(struct soap *soap, const char *URL, SOAP_ENC__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:base64Binary", p->soap_type() == SOAP_TYPE_SOAP_ENC__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 SOAP_ENC__base64Binary * SOAP_FMAC4 soap_get_SOAP_ENC__base64Binary(struct soap*, SOAP_ENC__base64Binary *, const char*, const char*);

inline int soap_read_SOAP_ENC__base64Binary(struct soap *soap, SOAP_ENC__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENC__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENC__base64Binary(struct soap *soap, const char *URL, SOAP_ENC__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENC__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENC__base64Binary(struct soap *soap, SOAP_ENC__base64Binary *p)
{
	if (::soap_read_SOAP_ENC__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__Array_DEFINED
#define SOAP_TYPE_SOAP_ENC__Array_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__Array(struct soap*, const char*, int, const SOAP_ENC__Array *, const char*);
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_in_SOAP_ENC__Array(struct soap*, const char*, SOAP_ENC__Array *, const char*);
SOAP_FMAC1 SOAP_ENC__Array * SOAP_FMAC2 soap_instantiate_SOAP_ENC__Array(struct soap*, int, const char*, const char*, size_t*);

inline SOAP_ENC__Array * soap_new_SOAP_ENC__Array(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENC__Array(soap, n, NULL, NULL, NULL);
}

inline SOAP_ENC__Array * soap_new_req_SOAP_ENC__Array(
	struct soap *soap)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline SOAP_ENC__Array * soap_new_set_SOAP_ENC__Array(
	struct soap *soap,
	char **__ptr,
	int __size)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->SOAP_ENC__Array::__ptr = __ptr;
		_p->SOAP_ENC__Array::__size = __size;
	}
	return _p;
}

inline int soap_write_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_get_SOAP_ENC__Array(struct soap*, SOAP_ENC__Array *, const char*, const char*);

inline int soap_read_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENC__Array(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns2__queryObjectOut_DEFINED
#define SOAP_TYPE_ns2__queryObjectOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryObjectOut(struct soap*, struct ns2__queryObjectOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryObjectOut(struct soap*, const struct ns2__queryObjectOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryObjectOut(struct soap*, const char*, int, const struct ns2__queryObjectOut *, const char*);
SOAP_FMAC3 struct ns2__queryObjectOut * SOAP_FMAC4 soap_in_ns2__queryObjectOut(struct soap*, const char*, struct ns2__queryObjectOut *, const char*);
SOAP_FMAC1 struct ns2__queryObjectOut * SOAP_FMAC2 soap_instantiate_ns2__queryObjectOut(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__queryObjectOut * soap_new_ns2__queryObjectOut(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__queryObjectOut(soap, n, NULL, NULL, NULL);
}

inline struct ns2__queryObjectOut * soap_new_req_ns2__queryObjectOut(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const std::wstring& _QueryXmlDoc)
{
	struct ns2__queryObjectOut *_p = ::soap_new_ns2__queryObjectOut(soap);
	if (_p)
	{	::soap_default_ns2__queryObjectOut(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_QueryXmlDoc = _QueryXmlDoc;
	}
	return _p;
}

inline struct ns2__queryObjectOut * soap_new_set_ns2__queryObjectOut(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const std::wstring& _QueryXmlDoc)
{
	struct ns2__queryObjectOut *_p = ::soap_new_ns2__queryObjectOut(soap);
	if (_p)
	{	::soap_default_ns2__queryObjectOut(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_QueryXmlDoc = _QueryXmlDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryObjectOut(struct soap*, const struct ns2__queryObjectOut *, const char*, const char*);

inline int soap_write_ns2__queryObjectOut(struct soap *soap, struct ns2__queryObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__queryObjectOut(soap, p), 0) || ::soap_put_ns2__queryObjectOut(soap, p, "ns2:queryObjectOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__queryObjectOut(struct soap *soap, const char *URL, struct ns2__queryObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOut(soap, p), 0) || ::soap_put_ns2__queryObjectOut(soap, p, "ns2:queryObjectOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__queryObjectOut(struct soap *soap, const char *URL, struct ns2__queryObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOut(soap, p), 0) || ::soap_put_ns2__queryObjectOut(soap, p, "ns2:queryObjectOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__queryObjectOut(struct soap *soap, const char *URL, struct ns2__queryObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOut(soap, p), 0) || ::soap_put_ns2__queryObjectOut(soap, p, "ns2:queryObjectOut", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__queryObjectOut * SOAP_FMAC4 soap_get_ns2__queryObjectOut(struct soap*, struct ns2__queryObjectOut *, const char*, const char*);

inline int soap_read_ns2__queryObjectOut(struct soap *soap, struct ns2__queryObjectOut *p)
{
	if (p)
	{	::soap_default_ns2__queryObjectOut(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__queryObjectOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__queryObjectOut(struct soap *soap, const char *URL, struct ns2__queryObjectOut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__queryObjectOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__queryObjectOut(struct soap *soap, struct ns2__queryObjectOut *p)
{
	if (::soap_read_ns2__queryObjectOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__queryObjectOutResponse_DEFINED
#define SOAP_TYPE_ns2__queryObjectOutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__queryObjectOutResponse(struct soap*, struct ns2__queryObjectOutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__queryObjectOutResponse(struct soap*, const struct ns2__queryObjectOutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__queryObjectOutResponse(struct soap*, const char*, int, const struct ns2__queryObjectOutResponse *, const char*);
SOAP_FMAC3 struct ns2__queryObjectOutResponse * SOAP_FMAC4 soap_in_ns2__queryObjectOutResponse(struct soap*, const char*, struct ns2__queryObjectOutResponse *, const char*);
SOAP_FMAC1 struct ns2__queryObjectOutResponse * SOAP_FMAC2 soap_instantiate_ns2__queryObjectOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__queryObjectOutResponse * soap_new_ns2__queryObjectOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__queryObjectOutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__queryObjectOutResponse * soap_new_req_ns2__queryObjectOutResponse(
	struct soap *soap,
	const std::wstring& _queryObjectOutReturn)
{
	struct ns2__queryObjectOutResponse *_p = ::soap_new_ns2__queryObjectOutResponse(soap);
	if (_p)
	{	::soap_default_ns2__queryObjectOutResponse(soap, _p);
		_p->_queryObjectOutReturn = _queryObjectOutReturn;
	}
	return _p;
}

inline struct ns2__queryObjectOutResponse * soap_new_set_ns2__queryObjectOutResponse(
	struct soap *soap,
	const std::wstring& _queryObjectOutReturn)
{
	struct ns2__queryObjectOutResponse *_p = ::soap_new_ns2__queryObjectOutResponse(soap);
	if (_p)
	{	::soap_default_ns2__queryObjectOutResponse(soap, _p);
		_p->_queryObjectOutReturn = _queryObjectOutReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__queryObjectOutResponse(struct soap*, const struct ns2__queryObjectOutResponse *, const char*, const char*);

inline int soap_write_ns2__queryObjectOutResponse(struct soap *soap, struct ns2__queryObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__queryObjectOutResponse(soap, p), 0) || ::soap_put_ns2__queryObjectOutResponse(soap, p, "ns2:queryObjectOutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__queryObjectOutResponse(struct soap *soap, const char *URL, struct ns2__queryObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOutResponse(soap, p), 0) || ::soap_put_ns2__queryObjectOutResponse(soap, p, "ns2:queryObjectOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__queryObjectOutResponse(struct soap *soap, const char *URL, struct ns2__queryObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOutResponse(soap, p), 0) || ::soap_put_ns2__queryObjectOutResponse(soap, p, "ns2:queryObjectOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__queryObjectOutResponse(struct soap *soap, const char *URL, struct ns2__queryObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__queryObjectOutResponse(soap, p), 0) || ::soap_put_ns2__queryObjectOutResponse(soap, p, "ns2:queryObjectOutResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__queryObjectOutResponse * SOAP_FMAC4 soap_get_ns2__queryObjectOutResponse(struct soap*, struct ns2__queryObjectOutResponse *, const char*, const char*);

inline int soap_read_ns2__queryObjectOutResponse(struct soap *soap, struct ns2__queryObjectOutResponse *p)
{
	if (p)
	{	::soap_default_ns2__queryObjectOutResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__queryObjectOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__queryObjectOutResponse(struct soap *soap, const char *URL, struct ns2__queryObjectOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__queryObjectOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__queryObjectOutResponse(struct soap *soap, struct ns2__queryObjectOutResponse *p)
{
	if (::soap_read_ns2__queryObjectOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__uploadWjzp_DEFINED
#define SOAP_TYPE_ns2__uploadWjzp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadWjzp(struct soap*, struct ns2__uploadWjzp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadWjzp(struct soap*, const struct ns2__uploadWjzp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadWjzp(struct soap*, const char*, int, const struct ns2__uploadWjzp *, const char*);
SOAP_FMAC3 struct ns2__uploadWjzp * SOAP_FMAC4 soap_in_ns2__uploadWjzp(struct soap*, const char*, struct ns2__uploadWjzp *, const char*);
SOAP_FMAC1 struct ns2__uploadWjzp * SOAP_FMAC2 soap_instantiate_ns2__uploadWjzp(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__uploadWjzp * soap_new_ns2__uploadWjzp(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__uploadWjzp(soap, n, NULL, NULL, NULL);
}

inline struct ns2__uploadWjzp * soap_new_req_ns2__uploadWjzp(
	struct soap *soap,
	const std::wstring& _imgStr)
{
	struct ns2__uploadWjzp *_p = ::soap_new_ns2__uploadWjzp(soap);
	if (_p)
	{	::soap_default_ns2__uploadWjzp(soap, _p);
		_p->_imgStr = _imgStr;
	}
	return _p;
}

inline struct ns2__uploadWjzp * soap_new_set_ns2__uploadWjzp(
	struct soap *soap,
	const std::wstring& _imgStr)
{
	struct ns2__uploadWjzp *_p = ::soap_new_ns2__uploadWjzp(soap);
	if (_p)
	{	::soap_default_ns2__uploadWjzp(soap, _p);
		_p->_imgStr = _imgStr;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadWjzp(struct soap*, const struct ns2__uploadWjzp *, const char*, const char*);

inline int soap_write_ns2__uploadWjzp(struct soap *soap, struct ns2__uploadWjzp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__uploadWjzp(soap, p), 0) || ::soap_put_ns2__uploadWjzp(soap, p, "ns2:uploadWjzp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__uploadWjzp(struct soap *soap, const char *URL, struct ns2__uploadWjzp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzp(soap, p), 0) || ::soap_put_ns2__uploadWjzp(soap, p, "ns2:uploadWjzp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__uploadWjzp(struct soap *soap, const char *URL, struct ns2__uploadWjzp const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzp(soap, p), 0) || ::soap_put_ns2__uploadWjzp(soap, p, "ns2:uploadWjzp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__uploadWjzp(struct soap *soap, const char *URL, struct ns2__uploadWjzp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzp(soap, p), 0) || ::soap_put_ns2__uploadWjzp(soap, p, "ns2:uploadWjzp", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__uploadWjzp * SOAP_FMAC4 soap_get_ns2__uploadWjzp(struct soap*, struct ns2__uploadWjzp *, const char*, const char*);

inline int soap_read_ns2__uploadWjzp(struct soap *soap, struct ns2__uploadWjzp *p)
{
	if (p)
	{	::soap_default_ns2__uploadWjzp(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__uploadWjzp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__uploadWjzp(struct soap *soap, const char *URL, struct ns2__uploadWjzp *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__uploadWjzp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__uploadWjzp(struct soap *soap, struct ns2__uploadWjzp *p)
{
	if (::soap_read_ns2__uploadWjzp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__uploadWjzpResponse_DEFINED
#define SOAP_TYPE_ns2__uploadWjzpResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadWjzpResponse(struct soap*, struct ns2__uploadWjzpResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadWjzpResponse(struct soap*, const struct ns2__uploadWjzpResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadWjzpResponse(struct soap*, const char*, int, const struct ns2__uploadWjzpResponse *, const char*);
SOAP_FMAC3 struct ns2__uploadWjzpResponse * SOAP_FMAC4 soap_in_ns2__uploadWjzpResponse(struct soap*, const char*, struct ns2__uploadWjzpResponse *, const char*);
SOAP_FMAC1 struct ns2__uploadWjzpResponse * SOAP_FMAC2 soap_instantiate_ns2__uploadWjzpResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__uploadWjzpResponse * soap_new_ns2__uploadWjzpResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__uploadWjzpResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__uploadWjzpResponse * soap_new_req_ns2__uploadWjzpResponse(
	struct soap *soap,
	const std::wstring& _uploadWjzpReturn)
{
	struct ns2__uploadWjzpResponse *_p = ::soap_new_ns2__uploadWjzpResponse(soap);
	if (_p)
	{	::soap_default_ns2__uploadWjzpResponse(soap, _p);
		_p->_uploadWjzpReturn = _uploadWjzpReturn;
	}
	return _p;
}

inline struct ns2__uploadWjzpResponse * soap_new_set_ns2__uploadWjzpResponse(
	struct soap *soap,
	const std::wstring& _uploadWjzpReturn)
{
	struct ns2__uploadWjzpResponse *_p = ::soap_new_ns2__uploadWjzpResponse(soap);
	if (_p)
	{	::soap_default_ns2__uploadWjzpResponse(soap, _p);
		_p->_uploadWjzpReturn = _uploadWjzpReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadWjzpResponse(struct soap*, const struct ns2__uploadWjzpResponse *, const char*, const char*);

inline int soap_write_ns2__uploadWjzpResponse(struct soap *soap, struct ns2__uploadWjzpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__uploadWjzpResponse(soap, p), 0) || ::soap_put_ns2__uploadWjzpResponse(soap, p, "ns2:uploadWjzpResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__uploadWjzpResponse(struct soap *soap, const char *URL, struct ns2__uploadWjzpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzpResponse(soap, p), 0) || ::soap_put_ns2__uploadWjzpResponse(soap, p, "ns2:uploadWjzpResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__uploadWjzpResponse(struct soap *soap, const char *URL, struct ns2__uploadWjzpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzpResponse(soap, p), 0) || ::soap_put_ns2__uploadWjzpResponse(soap, p, "ns2:uploadWjzpResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__uploadWjzpResponse(struct soap *soap, const char *URL, struct ns2__uploadWjzpResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadWjzpResponse(soap, p), 0) || ::soap_put_ns2__uploadWjzpResponse(soap, p, "ns2:uploadWjzpResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__uploadWjzpResponse * SOAP_FMAC4 soap_get_ns2__uploadWjzpResponse(struct soap*, struct ns2__uploadWjzpResponse *, const char*, const char*);

inline int soap_read_ns2__uploadWjzpResponse(struct soap *soap, struct ns2__uploadWjzpResponse *p)
{
	if (p)
	{	::soap_default_ns2__uploadWjzpResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__uploadWjzpResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__uploadWjzpResponse(struct soap *soap, const char *URL, struct ns2__uploadWjzpResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__uploadWjzpResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__uploadWjzpResponse(struct soap *soap, struct ns2__uploadWjzpResponse *p)
{
	if (::soap_read_ns2__uploadWjzpResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getZpgwcs_DEFINED
#define SOAP_TYPE_ns2__getZpgwcs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getZpgwcs(struct soap*, struct ns2__getZpgwcs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getZpgwcs(struct soap*, const struct ns2__getZpgwcs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getZpgwcs(struct soap*, const char*, int, const struct ns2__getZpgwcs *, const char*);
SOAP_FMAC3 struct ns2__getZpgwcs * SOAP_FMAC4 soap_in_ns2__getZpgwcs(struct soap*, const char*, struct ns2__getZpgwcs *, const char*);
SOAP_FMAC1 struct ns2__getZpgwcs * SOAP_FMAC2 soap_instantiate_ns2__getZpgwcs(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__getZpgwcs * soap_new_ns2__getZpgwcs(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getZpgwcs(soap, n, NULL, NULL, NULL);
}

inline struct ns2__getZpgwcs * soap_new_req_ns2__getZpgwcs(
	struct soap *soap,
	const std::wstring& _jcz,
	const std::wstring& _jcxdm,
	const std::wstring& _jcxm)
{
	struct ns2__getZpgwcs *_p = ::soap_new_ns2__getZpgwcs(soap);
	if (_p)
	{	::soap_default_ns2__getZpgwcs(soap, _p);
		_p->_jcz = _jcz;
		_p->_jcxdm = _jcxdm;
		_p->_jcxm = _jcxm;
	}
	return _p;
}

inline struct ns2__getZpgwcs * soap_new_set_ns2__getZpgwcs(
	struct soap *soap,
	const std::wstring& _jcz,
	const std::wstring& _jcxdm,
	const std::wstring& _jcxm)
{
	struct ns2__getZpgwcs *_p = ::soap_new_ns2__getZpgwcs(soap);
	if (_p)
	{	::soap_default_ns2__getZpgwcs(soap, _p);
		_p->_jcz = _jcz;
		_p->_jcxdm = _jcxdm;
		_p->_jcxm = _jcxm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getZpgwcs(struct soap*, const struct ns2__getZpgwcs *, const char*, const char*);

inline int soap_write_ns2__getZpgwcs(struct soap *soap, struct ns2__getZpgwcs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__getZpgwcs(soap, p), 0) || ::soap_put_ns2__getZpgwcs(soap, p, "ns2:getZpgwcs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getZpgwcs(struct soap *soap, const char *URL, struct ns2__getZpgwcs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcs(soap, p), 0) || ::soap_put_ns2__getZpgwcs(soap, p, "ns2:getZpgwcs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getZpgwcs(struct soap *soap, const char *URL, struct ns2__getZpgwcs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcs(soap, p), 0) || ::soap_put_ns2__getZpgwcs(soap, p, "ns2:getZpgwcs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getZpgwcs(struct soap *soap, const char *URL, struct ns2__getZpgwcs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcs(soap, p), 0) || ::soap_put_ns2__getZpgwcs(soap, p, "ns2:getZpgwcs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__getZpgwcs * SOAP_FMAC4 soap_get_ns2__getZpgwcs(struct soap*, struct ns2__getZpgwcs *, const char*, const char*);

inline int soap_read_ns2__getZpgwcs(struct soap *soap, struct ns2__getZpgwcs *p)
{
	if (p)
	{	::soap_default_ns2__getZpgwcs(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getZpgwcs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getZpgwcs(struct soap *soap, const char *URL, struct ns2__getZpgwcs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getZpgwcs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getZpgwcs(struct soap *soap, struct ns2__getZpgwcs *p)
{
	if (::soap_read_ns2__getZpgwcs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__getZpgwcsResponse_DEFINED
#define SOAP_TYPE_ns2__getZpgwcsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getZpgwcsResponse(struct soap*, struct ns2__getZpgwcsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getZpgwcsResponse(struct soap*, const struct ns2__getZpgwcsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getZpgwcsResponse(struct soap*, const char*, int, const struct ns2__getZpgwcsResponse *, const char*);
SOAP_FMAC3 struct ns2__getZpgwcsResponse * SOAP_FMAC4 soap_in_ns2__getZpgwcsResponse(struct soap*, const char*, struct ns2__getZpgwcsResponse *, const char*);
SOAP_FMAC1 struct ns2__getZpgwcsResponse * SOAP_FMAC2 soap_instantiate_ns2__getZpgwcsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__getZpgwcsResponse * soap_new_ns2__getZpgwcsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__getZpgwcsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__getZpgwcsResponse * soap_new_req_ns2__getZpgwcsResponse(
	struct soap *soap,
	const std::wstring& _getZpgwcsReturn)
{
	struct ns2__getZpgwcsResponse *_p = ::soap_new_ns2__getZpgwcsResponse(soap);
	if (_p)
	{	::soap_default_ns2__getZpgwcsResponse(soap, _p);
		_p->_getZpgwcsReturn = _getZpgwcsReturn;
	}
	return _p;
}

inline struct ns2__getZpgwcsResponse * soap_new_set_ns2__getZpgwcsResponse(
	struct soap *soap,
	const std::wstring& _getZpgwcsReturn)
{
	struct ns2__getZpgwcsResponse *_p = ::soap_new_ns2__getZpgwcsResponse(soap);
	if (_p)
	{	::soap_default_ns2__getZpgwcsResponse(soap, _p);
		_p->_getZpgwcsReturn = _getZpgwcsReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getZpgwcsResponse(struct soap*, const struct ns2__getZpgwcsResponse *, const char*, const char*);

inline int soap_write_ns2__getZpgwcsResponse(struct soap *soap, struct ns2__getZpgwcsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__getZpgwcsResponse(soap, p), 0) || ::soap_put_ns2__getZpgwcsResponse(soap, p, "ns2:getZpgwcsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__getZpgwcsResponse(struct soap *soap, const char *URL, struct ns2__getZpgwcsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcsResponse(soap, p), 0) || ::soap_put_ns2__getZpgwcsResponse(soap, p, "ns2:getZpgwcsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__getZpgwcsResponse(struct soap *soap, const char *URL, struct ns2__getZpgwcsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcsResponse(soap, p), 0) || ::soap_put_ns2__getZpgwcsResponse(soap, p, "ns2:getZpgwcsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__getZpgwcsResponse(struct soap *soap, const char *URL, struct ns2__getZpgwcsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__getZpgwcsResponse(soap, p), 0) || ::soap_put_ns2__getZpgwcsResponse(soap, p, "ns2:getZpgwcsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__getZpgwcsResponse * SOAP_FMAC4 soap_get_ns2__getZpgwcsResponse(struct soap*, struct ns2__getZpgwcsResponse *, const char*, const char*);

inline int soap_read_ns2__getZpgwcsResponse(struct soap *soap, struct ns2__getZpgwcsResponse *p)
{
	if (p)
	{	::soap_default_ns2__getZpgwcsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__getZpgwcsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__getZpgwcsResponse(struct soap *soap, const char *URL, struct ns2__getZpgwcsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__getZpgwcsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__getZpgwcsResponse(struct soap *soap, struct ns2__getZpgwcsResponse *p)
{
	if (::soap_read_ns2__getZpgwcsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__uploadFile_DEFINED
#define SOAP_TYPE_ns2__uploadFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadFile(struct soap*, struct ns2__uploadFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadFile(struct soap*, const struct ns2__uploadFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadFile(struct soap*, const char*, int, const struct ns2__uploadFile *, const char*);
SOAP_FMAC3 struct ns2__uploadFile * SOAP_FMAC4 soap_in_ns2__uploadFile(struct soap*, const char*, struct ns2__uploadFile *, const char*);
SOAP_FMAC1 struct ns2__uploadFile * SOAP_FMAC2 soap_instantiate_ns2__uploadFile(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__uploadFile * soap_new_ns2__uploadFile(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__uploadFile(soap, n, NULL, NULL, NULL);
}

inline struct ns2__uploadFile * soap_new_req_ns2__uploadFile(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const SOAP_ENC__base64Binary& _fileNode,
	const std::wstring& _WriteXmlDoc)
{
	struct ns2__uploadFile *_p = ::soap_new_ns2__uploadFile(soap);
	if (_p)
	{	::soap_default_ns2__uploadFile(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_fileNode = _fileNode;
		_p->_WriteXmlDoc = _WriteXmlDoc;
	}
	return _p;
}

inline struct ns2__uploadFile * soap_new_set_ns2__uploadFile(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const SOAP_ENC__base64Binary& _fileNode,
	const std::wstring& _WriteXmlDoc)
{
	struct ns2__uploadFile *_p = ::soap_new_ns2__uploadFile(soap);
	if (_p)
	{	::soap_default_ns2__uploadFile(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_fileNode = _fileNode;
		_p->_WriteXmlDoc = _WriteXmlDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadFile(struct soap*, const struct ns2__uploadFile *, const char*, const char*);

inline int soap_write_ns2__uploadFile(struct soap *soap, struct ns2__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__uploadFile(soap, p), 0) || ::soap_put_ns2__uploadFile(soap, p, "ns2:uploadFile", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__uploadFile(struct soap *soap, const char *URL, struct ns2__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFile(soap, p), 0) || ::soap_put_ns2__uploadFile(soap, p, "ns2:uploadFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__uploadFile(struct soap *soap, const char *URL, struct ns2__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFile(soap, p), 0) || ::soap_put_ns2__uploadFile(soap, p, "ns2:uploadFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__uploadFile(struct soap *soap, const char *URL, struct ns2__uploadFile const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFile(soap, p), 0) || ::soap_put_ns2__uploadFile(soap, p, "ns2:uploadFile", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__uploadFile * SOAP_FMAC4 soap_get_ns2__uploadFile(struct soap*, struct ns2__uploadFile *, const char*, const char*);

inline int soap_read_ns2__uploadFile(struct soap *soap, struct ns2__uploadFile *p)
{
	if (p)
	{	::soap_default_ns2__uploadFile(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__uploadFile(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__uploadFile(struct soap *soap, const char *URL, struct ns2__uploadFile *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__uploadFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__uploadFile(struct soap *soap, struct ns2__uploadFile *p)
{
	if (::soap_read_ns2__uploadFile(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__uploadFileResponse_DEFINED
#define SOAP_TYPE_ns2__uploadFileResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__uploadFileResponse(struct soap*, struct ns2__uploadFileResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__uploadFileResponse(struct soap*, const struct ns2__uploadFileResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__uploadFileResponse(struct soap*, const char*, int, const struct ns2__uploadFileResponse *, const char*);
SOAP_FMAC3 struct ns2__uploadFileResponse * SOAP_FMAC4 soap_in_ns2__uploadFileResponse(struct soap*, const char*, struct ns2__uploadFileResponse *, const char*);
SOAP_FMAC1 struct ns2__uploadFileResponse * SOAP_FMAC2 soap_instantiate_ns2__uploadFileResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__uploadFileResponse * soap_new_ns2__uploadFileResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__uploadFileResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__uploadFileResponse * soap_new_req_ns2__uploadFileResponse(
	struct soap *soap,
	const std::wstring& _uploadFileReturn)
{
	struct ns2__uploadFileResponse *_p = ::soap_new_ns2__uploadFileResponse(soap);
	if (_p)
	{	::soap_default_ns2__uploadFileResponse(soap, _p);
		_p->_uploadFileReturn = _uploadFileReturn;
	}
	return _p;
}

inline struct ns2__uploadFileResponse * soap_new_set_ns2__uploadFileResponse(
	struct soap *soap,
	const std::wstring& _uploadFileReturn)
{
	struct ns2__uploadFileResponse *_p = ::soap_new_ns2__uploadFileResponse(soap);
	if (_p)
	{	::soap_default_ns2__uploadFileResponse(soap, _p);
		_p->_uploadFileReturn = _uploadFileReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__uploadFileResponse(struct soap*, const struct ns2__uploadFileResponse *, const char*, const char*);

inline int soap_write_ns2__uploadFileResponse(struct soap *soap, struct ns2__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__uploadFileResponse(soap, p), 0) || ::soap_put_ns2__uploadFileResponse(soap, p, "ns2:uploadFileResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__uploadFileResponse(struct soap *soap, const char *URL, struct ns2__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFileResponse(soap, p), 0) || ::soap_put_ns2__uploadFileResponse(soap, p, "ns2:uploadFileResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__uploadFileResponse(struct soap *soap, const char *URL, struct ns2__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFileResponse(soap, p), 0) || ::soap_put_ns2__uploadFileResponse(soap, p, "ns2:uploadFileResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__uploadFileResponse(struct soap *soap, const char *URL, struct ns2__uploadFileResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__uploadFileResponse(soap, p), 0) || ::soap_put_ns2__uploadFileResponse(soap, p, "ns2:uploadFileResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__uploadFileResponse * SOAP_FMAC4 soap_get_ns2__uploadFileResponse(struct soap*, struct ns2__uploadFileResponse *, const char*, const char*);

inline int soap_read_ns2__uploadFileResponse(struct soap *soap, struct ns2__uploadFileResponse *p)
{
	if (p)
	{	::soap_default_ns2__uploadFileResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__uploadFileResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__uploadFileResponse(struct soap *soap, const char *URL, struct ns2__uploadFileResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__uploadFileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__uploadFileResponse(struct soap *soap, struct ns2__uploadFileResponse *p)
{
	if (::soap_read_ns2__uploadFileResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__writeObjectOut_DEFINED
#define SOAP_TYPE_ns2__writeObjectOut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__writeObjectOut(struct soap*, struct ns2__writeObjectOut *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__writeObjectOut(struct soap*, const struct ns2__writeObjectOut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__writeObjectOut(struct soap*, const char*, int, const struct ns2__writeObjectOut *, const char*);
SOAP_FMAC3 struct ns2__writeObjectOut * SOAP_FMAC4 soap_in_ns2__writeObjectOut(struct soap*, const char*, struct ns2__writeObjectOut *, const char*);
SOAP_FMAC1 struct ns2__writeObjectOut * SOAP_FMAC2 soap_instantiate_ns2__writeObjectOut(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__writeObjectOut * soap_new_ns2__writeObjectOut(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__writeObjectOut(soap, n, NULL, NULL, NULL);
}

inline struct ns2__writeObjectOut * soap_new_req_ns2__writeObjectOut(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const std::wstring& _WriteXmlDoc)
{
	struct ns2__writeObjectOut *_p = ::soap_new_ns2__writeObjectOut(soap);
	if (_p)
	{	::soap_default_ns2__writeObjectOut(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_WriteXmlDoc = _WriteXmlDoc;
	}
	return _p;
}

inline struct ns2__writeObjectOut * soap_new_set_ns2__writeObjectOut(
	struct soap *soap,
	const std::wstring& _xtlb,
	const std::wstring& _jkxlh,
	const std::wstring& _jkid,
	const std::wstring& _WriteXmlDoc)
{
	struct ns2__writeObjectOut *_p = ::soap_new_ns2__writeObjectOut(soap);
	if (_p)
	{	::soap_default_ns2__writeObjectOut(soap, _p);
		_p->_xtlb = _xtlb;
		_p->_jkxlh = _jkxlh;
		_p->_jkid = _jkid;
		_p->_WriteXmlDoc = _WriteXmlDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__writeObjectOut(struct soap*, const struct ns2__writeObjectOut *, const char*, const char*);

inline int soap_write_ns2__writeObjectOut(struct soap *soap, struct ns2__writeObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__writeObjectOut(soap, p), 0) || ::soap_put_ns2__writeObjectOut(soap, p, "ns2:writeObjectOut", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__writeObjectOut(struct soap *soap, const char *URL, struct ns2__writeObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOut(soap, p), 0) || ::soap_put_ns2__writeObjectOut(soap, p, "ns2:writeObjectOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__writeObjectOut(struct soap *soap, const char *URL, struct ns2__writeObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOut(soap, p), 0) || ::soap_put_ns2__writeObjectOut(soap, p, "ns2:writeObjectOut", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__writeObjectOut(struct soap *soap, const char *URL, struct ns2__writeObjectOut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOut(soap, p), 0) || ::soap_put_ns2__writeObjectOut(soap, p, "ns2:writeObjectOut", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__writeObjectOut * SOAP_FMAC4 soap_get_ns2__writeObjectOut(struct soap*, struct ns2__writeObjectOut *, const char*, const char*);

inline int soap_read_ns2__writeObjectOut(struct soap *soap, struct ns2__writeObjectOut *p)
{
	if (p)
	{	::soap_default_ns2__writeObjectOut(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__writeObjectOut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__writeObjectOut(struct soap *soap, const char *URL, struct ns2__writeObjectOut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__writeObjectOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__writeObjectOut(struct soap *soap, struct ns2__writeObjectOut *p)
{
	if (::soap_read_ns2__writeObjectOut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__writeObjectOutResponse_DEFINED
#define SOAP_TYPE_ns2__writeObjectOutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__writeObjectOutResponse(struct soap*, struct ns2__writeObjectOutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__writeObjectOutResponse(struct soap*, const struct ns2__writeObjectOutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__writeObjectOutResponse(struct soap*, const char*, int, const struct ns2__writeObjectOutResponse *, const char*);
SOAP_FMAC3 struct ns2__writeObjectOutResponse * SOAP_FMAC4 soap_in_ns2__writeObjectOutResponse(struct soap*, const char*, struct ns2__writeObjectOutResponse *, const char*);
SOAP_FMAC1 struct ns2__writeObjectOutResponse * SOAP_FMAC2 soap_instantiate_ns2__writeObjectOutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__writeObjectOutResponse * soap_new_ns2__writeObjectOutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__writeObjectOutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__writeObjectOutResponse * soap_new_req_ns2__writeObjectOutResponse(
	struct soap *soap,
	const std::wstring& _writeObjectOutReturn)
{
	struct ns2__writeObjectOutResponse *_p = ::soap_new_ns2__writeObjectOutResponse(soap);
	if (_p)
	{	::soap_default_ns2__writeObjectOutResponse(soap, _p);
		_p->_writeObjectOutReturn = _writeObjectOutReturn;
	}
	return _p;
}

inline struct ns2__writeObjectOutResponse * soap_new_set_ns2__writeObjectOutResponse(
	struct soap *soap,
	const std::wstring& _writeObjectOutReturn)
{
	struct ns2__writeObjectOutResponse *_p = ::soap_new_ns2__writeObjectOutResponse(soap);
	if (_p)
	{	::soap_default_ns2__writeObjectOutResponse(soap, _p);
		_p->_writeObjectOutReturn = _writeObjectOutReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__writeObjectOutResponse(struct soap*, const struct ns2__writeObjectOutResponse *, const char*, const char*);

inline int soap_write_ns2__writeObjectOutResponse(struct soap *soap, struct ns2__writeObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__writeObjectOutResponse(soap, p), 0) || ::soap_put_ns2__writeObjectOutResponse(soap, p, "ns2:writeObjectOutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__writeObjectOutResponse(struct soap *soap, const char *URL, struct ns2__writeObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOutResponse(soap, p), 0) || ::soap_put_ns2__writeObjectOutResponse(soap, p, "ns2:writeObjectOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__writeObjectOutResponse(struct soap *soap, const char *URL, struct ns2__writeObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOutResponse(soap, p), 0) || ::soap_put_ns2__writeObjectOutResponse(soap, p, "ns2:writeObjectOutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__writeObjectOutResponse(struct soap *soap, const char *URL, struct ns2__writeObjectOutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__writeObjectOutResponse(soap, p), 0) || ::soap_put_ns2__writeObjectOutResponse(soap, p, "ns2:writeObjectOutResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__writeObjectOutResponse * SOAP_FMAC4 soap_get_ns2__writeObjectOutResponse(struct soap*, struct ns2__writeObjectOutResponse *, const char*, const char*);

inline int soap_read_ns2__writeObjectOutResponse(struct soap *soap, struct ns2__writeObjectOutResponse *p)
{
	if (p)
	{	::soap_default_ns2__writeObjectOutResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__writeObjectOutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__writeObjectOutResponse(struct soap *soap, const char *URL, struct ns2__writeObjectOutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__writeObjectOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__writeObjectOutResponse(struct soap *soap, struct ns2__writeObjectOutResponse *p)
{
	if (::soap_read_ns2__writeObjectOutResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__checkNull_DEFINED
#define SOAP_TYPE_ns2__checkNull_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkNull(struct soap*, struct ns2__checkNull *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkNull(struct soap*, const struct ns2__checkNull *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkNull(struct soap*, const char*, int, const struct ns2__checkNull *, const char*);
SOAP_FMAC3 struct ns2__checkNull * SOAP_FMAC4 soap_in_ns2__checkNull(struct soap*, const char*, struct ns2__checkNull *, const char*);
SOAP_FMAC1 struct ns2__checkNull * SOAP_FMAC2 soap_instantiate_ns2__checkNull(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__checkNull * soap_new_ns2__checkNull(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__checkNull(soap, n, NULL, NULL, NULL);
}

inline struct ns2__checkNull * soap_new_req_ns2__checkNull(
	struct soap *soap)
{
	struct ns2__checkNull *_p = ::soap_new_ns2__checkNull(soap);
	if (_p)
	{	::soap_default_ns2__checkNull(soap, _p);
	}
	return _p;
}

inline struct ns2__checkNull * soap_new_set_ns2__checkNull(
	struct soap *soap,
	ArrayOf_USCOREsoapenc_USCOREstring *_params,
	ArrayOf_USCOREsoapenc_USCOREstring *_paramNames)
{
	struct ns2__checkNull *_p = ::soap_new_ns2__checkNull(soap);
	if (_p)
	{	::soap_default_ns2__checkNull(soap, _p);
		_p->_params = _params;
		_p->_paramNames = _paramNames;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkNull(struct soap*, const struct ns2__checkNull *, const char*, const char*);

inline int soap_write_ns2__checkNull(struct soap *soap, struct ns2__checkNull const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__checkNull(soap, p), 0) || ::soap_put_ns2__checkNull(soap, p, "ns2:checkNull", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__checkNull(struct soap *soap, const char *URL, struct ns2__checkNull const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNull(soap, p), 0) || ::soap_put_ns2__checkNull(soap, p, "ns2:checkNull", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__checkNull(struct soap *soap, const char *URL, struct ns2__checkNull const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNull(soap, p), 0) || ::soap_put_ns2__checkNull(soap, p, "ns2:checkNull", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__checkNull(struct soap *soap, const char *URL, struct ns2__checkNull const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNull(soap, p), 0) || ::soap_put_ns2__checkNull(soap, p, "ns2:checkNull", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__checkNull * SOAP_FMAC4 soap_get_ns2__checkNull(struct soap*, struct ns2__checkNull *, const char*, const char*);

inline int soap_read_ns2__checkNull(struct soap *soap, struct ns2__checkNull *p)
{
	if (p)
	{	::soap_default_ns2__checkNull(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__checkNull(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__checkNull(struct soap *soap, const char *URL, struct ns2__checkNull *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__checkNull(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__checkNull(struct soap *soap, struct ns2__checkNull *p)
{
	if (::soap_read_ns2__checkNull(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__checkNullResponse_DEFINED
#define SOAP_TYPE_ns2__checkNullResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkNullResponse(struct soap*, struct ns2__checkNullResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkNullResponse(struct soap*, const struct ns2__checkNullResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkNullResponse(struct soap*, const char*, int, const struct ns2__checkNullResponse *, const char*);
SOAP_FMAC3 struct ns2__checkNullResponse * SOAP_FMAC4 soap_in_ns2__checkNullResponse(struct soap*, const char*, struct ns2__checkNullResponse *, const char*);
SOAP_FMAC1 struct ns2__checkNullResponse * SOAP_FMAC2 soap_instantiate_ns2__checkNullResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__checkNullResponse * soap_new_ns2__checkNullResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__checkNullResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__checkNullResponse * soap_new_req_ns2__checkNullResponse(
	struct soap *soap)
{
	struct ns2__checkNullResponse *_p = ::soap_new_ns2__checkNullResponse(soap);
	if (_p)
	{	::soap_default_ns2__checkNullResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__checkNullResponse * soap_new_set_ns2__checkNullResponse(
	struct soap *soap,
	ArrayOf_USCOREsoapenc_USCOREstring *_checkNullReturn)
{
	struct ns2__checkNullResponse *_p = ::soap_new_ns2__checkNullResponse(soap);
	if (_p)
	{	::soap_default_ns2__checkNullResponse(soap, _p);
		_p->_checkNullReturn = _checkNullReturn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkNullResponse(struct soap*, const struct ns2__checkNullResponse *, const char*, const char*);

inline int soap_write_ns2__checkNullResponse(struct soap *soap, struct ns2__checkNullResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__checkNullResponse(soap, p), 0) || ::soap_put_ns2__checkNullResponse(soap, p, "ns2:checkNullResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__checkNullResponse(struct soap *soap, const char *URL, struct ns2__checkNullResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNullResponse(soap, p), 0) || ::soap_put_ns2__checkNullResponse(soap, p, "ns2:checkNullResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__checkNullResponse(struct soap *soap, const char *URL, struct ns2__checkNullResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNullResponse(soap, p), 0) || ::soap_put_ns2__checkNullResponse(soap, p, "ns2:checkNullResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__checkNullResponse(struct soap *soap, const char *URL, struct ns2__checkNullResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__checkNullResponse(soap, p), 0) || ::soap_put_ns2__checkNullResponse(soap, p, "ns2:checkNullResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__checkNullResponse * SOAP_FMAC4 soap_get_ns2__checkNullResponse(struct soap*, struct ns2__checkNullResponse *, const char*, const char*);

inline int soap_read_ns2__checkNullResponse(struct soap *soap, struct ns2__checkNullResponse *p)
{
	if (p)
	{	::soap_default_ns2__checkNullResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__checkNullResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__checkNullResponse(struct soap *soap, const char *URL, struct ns2__checkNullResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__checkNullResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__checkNullResponse(struct soap *soap, struct ns2__checkNullResponse *p)
{
	if (::soap_read_ns2__checkNullResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__init_DEFINED
#define SOAP_TYPE_ns2__init_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__init(struct soap*, struct ns2__init *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__init(struct soap*, const struct ns2__init *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__init(struct soap*, const char*, int, const struct ns2__init *, const char*);
SOAP_FMAC3 struct ns2__init * SOAP_FMAC4 soap_in_ns2__init(struct soap*, const char*, struct ns2__init *, const char*);
SOAP_FMAC1 struct ns2__init * SOAP_FMAC2 soap_instantiate_ns2__init(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__init * soap_new_ns2__init(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__init(soap, n, NULL, NULL, NULL);
}

inline struct ns2__init * soap_new_req_ns2__init(
	struct soap *soap)
{
	struct ns2__init *_p = ::soap_new_ns2__init(soap);
	if (_p)
	{	::soap_default_ns2__init(soap, _p);
	}
	return _p;
}

inline struct ns2__init * soap_new_set_ns2__init(
	struct soap *soap)
{
	struct ns2__init *_p = ::soap_new_ns2__init(soap);
	if (_p)
	{	::soap_default_ns2__init(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__init(struct soap*, const struct ns2__init *, const char*, const char*);

inline int soap_write_ns2__init(struct soap *soap, struct ns2__init const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__init(soap, p), 0) || ::soap_put_ns2__init(soap, p, "ns2:init", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__init(struct soap *soap, const char *URL, struct ns2__init const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__init(soap, p), 0) || ::soap_put_ns2__init(soap, p, "ns2:init", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__init(struct soap *soap, const char *URL, struct ns2__init const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__init(soap, p), 0) || ::soap_put_ns2__init(soap, p, "ns2:init", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__init(struct soap *soap, const char *URL, struct ns2__init const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__init(soap, p), 0) || ::soap_put_ns2__init(soap, p, "ns2:init", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__init * SOAP_FMAC4 soap_get_ns2__init(struct soap*, struct ns2__init *, const char*, const char*);

inline int soap_read_ns2__init(struct soap *soap, struct ns2__init *p)
{
	if (p)
	{	::soap_default_ns2__init(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__init(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__init(struct soap *soap, const char *URL, struct ns2__init *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__init(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__init(struct soap *soap, struct ns2__init *p)
{
	if (::soap_read_ns2__init(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__initResponse_DEFINED
#define SOAP_TYPE_ns2__initResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__initResponse(struct soap*, struct ns2__initResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__initResponse(struct soap*, const struct ns2__initResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__initResponse(struct soap*, const char*, int, const struct ns2__initResponse *, const char*);
SOAP_FMAC3 struct ns2__initResponse * SOAP_FMAC4 soap_in_ns2__initResponse(struct soap*, const char*, struct ns2__initResponse *, const char*);
SOAP_FMAC1 struct ns2__initResponse * SOAP_FMAC2 soap_instantiate_ns2__initResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__initResponse * soap_new_ns2__initResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__initResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__initResponse * soap_new_req_ns2__initResponse(
	struct soap *soap)
{
	struct ns2__initResponse *_p = ::soap_new_ns2__initResponse(soap);
	if (_p)
	{	::soap_default_ns2__initResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__initResponse * soap_new_set_ns2__initResponse(
	struct soap *soap)
{
	struct ns2__initResponse *_p = ::soap_new_ns2__initResponse(soap);
	if (_p)
	{	::soap_default_ns2__initResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__initResponse(struct soap*, const struct ns2__initResponse *, const char*, const char*);

inline int soap_write_ns2__initResponse(struct soap *soap, struct ns2__initResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__initResponse(soap, p), 0) || ::soap_put_ns2__initResponse(soap, p, "ns2:initResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__initResponse(struct soap *soap, const char *URL, struct ns2__initResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__initResponse(soap, p), 0) || ::soap_put_ns2__initResponse(soap, p, "ns2:initResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__initResponse(struct soap *soap, const char *URL, struct ns2__initResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__initResponse(soap, p), 0) || ::soap_put_ns2__initResponse(soap, p, "ns2:initResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__initResponse(struct soap *soap, const char *URL, struct ns2__initResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__initResponse(soap, p), 0) || ::soap_put_ns2__initResponse(soap, p, "ns2:initResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__initResponse * SOAP_FMAC4 soap_get_ns2__initResponse(struct soap*, struct ns2__initResponse *, const char*, const char*);

inline int soap_read_ns2__initResponse(struct soap *soap, struct ns2__initResponse *p)
{
	if (p)
	{	::soap_default_ns2__initResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__initResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__initResponse(struct soap *soap, const char *URL, struct ns2__initResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__initResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__initResponse(struct soap *soap, struct ns2__initResponse *p)
{
	if (::soap_read_ns2__initResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__main_DEFINED
#define SOAP_TYPE_ns2__main_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__main(struct soap*, struct ns2__main *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__main(struct soap*, const struct ns2__main *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__main(struct soap*, const char*, int, const struct ns2__main *, const char*);
SOAP_FMAC3 struct ns2__main * SOAP_FMAC4 soap_in_ns2__main(struct soap*, const char*, struct ns2__main *, const char*);
SOAP_FMAC1 struct ns2__main * SOAP_FMAC2 soap_instantiate_ns2__main(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__main * soap_new_ns2__main(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__main(soap, n, NULL, NULL, NULL);
}

inline struct ns2__main * soap_new_req_ns2__main(
	struct soap *soap)
{
	struct ns2__main *_p = ::soap_new_ns2__main(soap);
	if (_p)
	{	::soap_default_ns2__main(soap, _p);
	}
	return _p;
}

inline struct ns2__main * soap_new_set_ns2__main(
	struct soap *soap,
	ArrayOf_USCOREsoapenc_USCOREstring *_args)
{
	struct ns2__main *_p = ::soap_new_ns2__main(soap);
	if (_p)
	{	::soap_default_ns2__main(soap, _p);
		_p->_args = _args;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__main(struct soap*, const struct ns2__main *, const char*, const char*);

inline int soap_write_ns2__main(struct soap *soap, struct ns2__main const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__main(soap, p), 0) || ::soap_put_ns2__main(soap, p, "ns2:main", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__main(struct soap *soap, const char *URL, struct ns2__main const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__main(soap, p), 0) || ::soap_put_ns2__main(soap, p, "ns2:main", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__main(struct soap *soap, const char *URL, struct ns2__main const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__main(soap, p), 0) || ::soap_put_ns2__main(soap, p, "ns2:main", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__main(struct soap *soap, const char *URL, struct ns2__main const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__main(soap, p), 0) || ::soap_put_ns2__main(soap, p, "ns2:main", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__main * SOAP_FMAC4 soap_get_ns2__main(struct soap*, struct ns2__main *, const char*, const char*);

inline int soap_read_ns2__main(struct soap *soap, struct ns2__main *p)
{
	if (p)
	{	::soap_default_ns2__main(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__main(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__main(struct soap *soap, const char *URL, struct ns2__main *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__main(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__main(struct soap *soap, struct ns2__main *p)
{
	if (::soap_read_ns2__main(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__mainResponse_DEFINED
#define SOAP_TYPE_ns2__mainResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__mainResponse(struct soap*, struct ns2__mainResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__mainResponse(struct soap*, const struct ns2__mainResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__mainResponse(struct soap*, const char*, int, const struct ns2__mainResponse *, const char*);
SOAP_FMAC3 struct ns2__mainResponse * SOAP_FMAC4 soap_in_ns2__mainResponse(struct soap*, const char*, struct ns2__mainResponse *, const char*);
SOAP_FMAC1 struct ns2__mainResponse * SOAP_FMAC2 soap_instantiate_ns2__mainResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__mainResponse * soap_new_ns2__mainResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__mainResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__mainResponse * soap_new_req_ns2__mainResponse(
	struct soap *soap)
{
	struct ns2__mainResponse *_p = ::soap_new_ns2__mainResponse(soap);
	if (_p)
	{	::soap_default_ns2__mainResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__mainResponse * soap_new_set_ns2__mainResponse(
	struct soap *soap)
{
	struct ns2__mainResponse *_p = ::soap_new_ns2__mainResponse(soap);
	if (_p)
	{	::soap_default_ns2__mainResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__mainResponse(struct soap*, const struct ns2__mainResponse *, const char*, const char*);

inline int soap_write_ns2__mainResponse(struct soap *soap, struct ns2__mainResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__mainResponse(soap, p), 0) || ::soap_put_ns2__mainResponse(soap, p, "ns2:mainResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__mainResponse(struct soap *soap, const char *URL, struct ns2__mainResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__mainResponse(soap, p), 0) || ::soap_put_ns2__mainResponse(soap, p, "ns2:mainResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__mainResponse(struct soap *soap, const char *URL, struct ns2__mainResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__mainResponse(soap, p), 0) || ::soap_put_ns2__mainResponse(soap, p, "ns2:mainResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__mainResponse(struct soap *soap, const char *URL, struct ns2__mainResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__mainResponse(soap, p), 0) || ::soap_put_ns2__mainResponse(soap, p, "ns2:mainResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__mainResponse * SOAP_FMAC4 soap_get_ns2__mainResponse(struct soap*, struct ns2__mainResponse *, const char*, const char*);

inline int soap_read_ns2__mainResponse(struct soap *soap, struct ns2__mainResponse *p)
{
	if (p)
	{	::soap_default_ns2__mainResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__mainResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__mainResponse(struct soap *soap, const char *URL, struct ns2__mainResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__mainResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__mainResponse(struct soap *soap, struct ns2__mainResponse *p)
{
	if (::soap_read_ns2__mainResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToArrayOf_USCOREsoapenc_USCOREstring_DEFINED
#define SOAP_TYPE_PointerToArrayOf_USCOREsoapenc_USCOREstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap*, ArrayOf_USCOREsoapenc_USCOREstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap*, const char *, int, ArrayOf_USCOREsoapenc_USCOREstring *const*, const char *);
SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap*, const char*, ArrayOf_USCOREsoapenc_USCOREstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap*, ArrayOf_USCOREsoapenc_USCOREstring *const*, const char*, const char*);
SOAP_FMAC3 ArrayOf_USCOREsoapenc_USCOREstring ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCOREsoapenc_USCOREstring(struct soap*, ArrayOf_USCOREsoapenc_USCOREstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__wstring_DEFINED
#define SOAP_TYPE_PointerTostd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
