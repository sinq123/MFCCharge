/* soapjcjkServiceSoapBindingProxy.h
   Generated by gSOAP 2.8.108 for jcjkService.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapjcjkServiceSoapBindingProxy_H
#define soapjcjkServiceSoapBindingProxy_H
#include "soapH.h"

    class SOAP_CMAC jcjkServiceSoapBindingProxy : public soap {
      public:
        /// Endpoint URL of service 'jcjkServiceSoapBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in jcjkService.h, if any
        /// Construct a proxy with new managing context
        jcjkServiceSoapBindingProxy();
        /// Copy constructor
        jcjkServiceSoapBindingProxy(const jcjkServiceSoapBindingProxy& rhs);
        /// Construct proxy given a managing context
        jcjkServiceSoapBindingProxy(const struct soap&);
        /// Construct proxy given a managing context and endpoint URL
        jcjkServiceSoapBindingProxy(const struct soap&, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        jcjkServiceSoapBindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        jcjkServiceSoapBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        jcjkServiceSoapBindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        jcjkServiceSoapBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context
        virtual ~jcjkServiceSoapBindingProxy();
        /// Initializer used by constructors
        virtual void jcjkServiceSoapBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual jcjkServiceSoapBindingProxy *copy();
        /// Copy assignment
        jcjkServiceSoapBindingProxy& operator=(const jcjkServiceSoapBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'main' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int main(ArrayOf_USCOREsoapenc_USCOREstring *_args, struct ns2__mainResponse &_param_1) { return this->main(NULL, NULL, _args, _param_1); }
        /// Web service synchronous operation 'main' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int main(const char *soap_endpoint_url, const char *soap_action, ArrayOf_USCOREsoapenc_USCOREstring *_args, struct ns2__mainResponse &_param_1) { return this->send_main(soap_endpoint_url, soap_action, _args) || this->recv_main(_param_1) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_main' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_main(const char *soap_endpoint_url, const char *soap_action, ArrayOf_USCOREsoapenc_USCOREstring *_args);
        /// Web service asynchronous operation 'recv_main' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_main(struct ns2__mainResponse &_param_1);
        //
        /// Web service synchronous operation 'init' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int init(struct ns2__initResponse &_param_1) { return this->init(NULL, NULL, _param_1); }
        /// Web service synchronous operation 'init' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int init(const char *soap_endpoint_url, const char *soap_action, struct ns2__initResponse &_param_1) { return this->send_init(soap_endpoint_url, soap_action) || this->recv_init(_param_1) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_init' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_init(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_init' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_init(struct ns2__initResponse &_param_1);
        //
        /// Web service synchronous operation 'checkNull' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int checkNull(ArrayOf_USCOREsoapenc_USCOREstring *_params, ArrayOf_USCOREsoapenc_USCOREstring *_paramNames, struct ns2__checkNullResponse &_param_1) { return this->checkNull(NULL, NULL, _params, _paramNames, _param_1); }
        /// Web service synchronous operation 'checkNull' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int checkNull(const char *soap_endpoint_url, const char *soap_action, ArrayOf_USCOREsoapenc_USCOREstring *_params, ArrayOf_USCOREsoapenc_USCOREstring *_paramNames, struct ns2__checkNullResponse &_param_1) { return this->send_checkNull(soap_endpoint_url, soap_action, _params, _paramNames) || this->recv_checkNull(_param_1) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_checkNull' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_checkNull(const char *soap_endpoint_url, const char *soap_action, ArrayOf_USCOREsoapenc_USCOREstring *_params, ArrayOf_USCOREsoapenc_USCOREstring *_paramNames);
        /// Web service asynchronous operation 'recv_checkNull' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_checkNull(struct ns2__checkNullResponse &_param_1);
        //
        /// Web service synchronous operation 'writeObjectOut' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int writeObjectOut(const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _WriteXmlDoc, std::wstring &_writeObjectOutReturn) { return this->writeObjectOut(NULL, NULL, _xtlb, _jkxlh, _jkid, _WriteXmlDoc, _writeObjectOutReturn); }
        /// Web service synchronous operation 'writeObjectOut' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int writeObjectOut(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _WriteXmlDoc, std::wstring &_writeObjectOutReturn) { return this->send_writeObjectOut(soap_endpoint_url, soap_action, _xtlb, _jkxlh, _jkid, _WriteXmlDoc) || this->recv_writeObjectOut(_writeObjectOutReturn) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_writeObjectOut' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_writeObjectOut(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _WriteXmlDoc);
        /// Web service asynchronous operation 'recv_writeObjectOut' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_writeObjectOut(std::wstring &_writeObjectOutReturn);
        //
        /// Web service synchronous operation 'uploadFile' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int uploadFile(const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const SOAP_ENC__base64Binary& _fileNode, const std::wstring& _WriteXmlDoc, std::wstring &_uploadFileReturn) { return this->uploadFile(NULL, NULL, _xtlb, _jkxlh, _jkid, _fileNode, _WriteXmlDoc, _uploadFileReturn); }
        /// Web service synchronous operation 'uploadFile' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int uploadFile(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const SOAP_ENC__base64Binary& _fileNode, const std::wstring& _WriteXmlDoc, std::wstring &_uploadFileReturn) { return this->send_uploadFile(soap_endpoint_url, soap_action, _xtlb, _jkxlh, _jkid, _fileNode, _WriteXmlDoc) || this->recv_uploadFile(_uploadFileReturn) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_uploadFile' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_uploadFile(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const SOAP_ENC__base64Binary& _fileNode, const std::wstring& _WriteXmlDoc);
        /// Web service asynchronous operation 'recv_uploadFile' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_uploadFile(std::wstring &_uploadFileReturn);
        //
        /// Web service synchronous operation 'getZpgwcs' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int getZpgwcs(const std::wstring& _jcz, const std::wstring& _jcxdm, const std::wstring& _jcxm, std::wstring &_getZpgwcsReturn) { return this->getZpgwcs(NULL, NULL, _jcz, _jcxdm, _jcxm, _getZpgwcsReturn); }
        /// Web service synchronous operation 'getZpgwcs' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int getZpgwcs(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _jcz, const std::wstring& _jcxdm, const std::wstring& _jcxm, std::wstring &_getZpgwcsReturn) { return this->send_getZpgwcs(soap_endpoint_url, soap_action, _jcz, _jcxdm, _jcxm) || this->recv_getZpgwcs(_getZpgwcsReturn) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_getZpgwcs' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_getZpgwcs(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _jcz, const std::wstring& _jcxdm, const std::wstring& _jcxm);
        /// Web service asynchronous operation 'recv_getZpgwcs' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_getZpgwcs(std::wstring &_getZpgwcsReturn);
        //
        /// Web service synchronous operation 'uploadWjzp' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int uploadWjzp(const std::wstring& _imgStr, std::wstring &_uploadWjzpReturn) { return this->uploadWjzp(NULL, NULL, _imgStr, _uploadWjzpReturn); }
        /// Web service synchronous operation 'uploadWjzp' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int uploadWjzp(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _imgStr, std::wstring &_uploadWjzpReturn) { return this->send_uploadWjzp(soap_endpoint_url, soap_action, _imgStr) || this->recv_uploadWjzp(_uploadWjzpReturn) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_uploadWjzp' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_uploadWjzp(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _imgStr);
        /// Web service asynchronous operation 'recv_uploadWjzp' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_uploadWjzp(std::wstring &_uploadWjzpReturn);
        //
        /// Web service synchronous operation 'queryObjectOut' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int queryObjectOut(const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _QueryXmlDoc, std::wstring &_queryObjectOutReturn) { return this->queryObjectOut(NULL, NULL, _xtlb, _jkxlh, _jkid, _QueryXmlDoc, _queryObjectOutReturn); }
        /// Web service synchronous operation 'queryObjectOut' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int queryObjectOut(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _QueryXmlDoc, std::wstring &_queryObjectOutReturn) { return this->send_queryObjectOut(soap_endpoint_url, soap_action, _xtlb, _jkxlh, _jkid, _QueryXmlDoc) || this->recv_queryObjectOut(_queryObjectOutReturn) ? this->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_queryObjectOut' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_queryObjectOut(const char *soap_endpoint_url, const char *soap_action, const std::wstring& _xtlb, const std::wstring& _jkxlh, const std::wstring& _jkid, const std::wstring& _QueryXmlDoc);
        /// Web service asynchronous operation 'recv_queryObjectOut' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_queryObjectOut(std::wstring &_queryObjectOutReturn);
    };
#endif
