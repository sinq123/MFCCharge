/* AccessService.h
   Generated by wsdl2h 2.8.21 from AccessService.wsdl and typemap.dat
   2021-01-03 06:54:05 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on AccessService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIMEM/MIME/MTOM XOP attachments only
	struct soap *soap;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__QueryService.
class _ns1__QueryService;

//  Forward declaration of class _ns1__QueryServiceResponse.
class _ns1__QueryServiceResponse;

//  Forward declaration of class _ns1__WriteService.
class _ns1__WriteService;

//  Forward declaration of class _ns1__WriteServiceResponse.
class _ns1__WriteServiceResponse;

//  Forward declaration of class _ns1__webEncodeUTF8.
class _ns1__webEncodeUTF8;

//  Forward declaration of class _ns1__webEncodeUTF8Response.
class _ns1__webEncodeUTF8Response;

//  Forward declaration of class _ns1__webDecodeUTF8.
class _ns1__webDecodeUTF8;

//  Forward declaration of class _ns1__webDecodeUTF8Response.
class _ns1__webDecodeUTF8Response;

//  Forward declaration of class _ns1__GetBase64.
class _ns1__GetBase64;

//  Forward declaration of class _ns1__GetBase64Response.
class _ns1__GetBase64Response;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":QueryService
/// @brief "http://tempuri.org/":QueryService is a complexType.
///
/// class _ns1__QueryService operations:
/// - soap_new__ns1__QueryService(soap*) allocate
/// - soap_new__ns1__QueryService(soap*, int num) allocate array
/// - soap_new_req__ns1__QueryService(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QueryService(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QueryService(soap*, _ns1__QueryService*) deserialize from a stream
/// - int soap_write__ns1__QueryService(soap, _ns1__QueryService*) serialize to a stream
class _ns1__QueryService
{ public:
/// Element "jkxlh" of XSD type xs:string.
    std::wstring*                        jkxlh                          0;	///< Optional element.
/// Element "jkid" of XSD type xs:string.
    std::wstring*                        jkid                           0;	///< Optional element.
/// Element "xmlDoc" of XSD type xs:string.
    std::wstring*                        xmlDoc                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":QueryServiceResponse
/// @brief "http://tempuri.org/":QueryServiceResponse is a complexType.
///
/// class _ns1__QueryServiceResponse operations:
/// - soap_new__ns1__QueryServiceResponse(soap*) allocate
/// - soap_new__ns1__QueryServiceResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__QueryServiceResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__QueryServiceResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__QueryServiceResponse(soap*, _ns1__QueryServiceResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryServiceResponse(soap, _ns1__QueryServiceResponse*) serialize to a stream
class _ns1__QueryServiceResponse
{ public:
/// Element "QueryServiceResult" of XSD type xs:string.
    std::wstring*                        QueryServiceResult             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":WriteService
/// @brief "http://tempuri.org/":WriteService is a complexType.
///
/// class _ns1__WriteService operations:
/// - soap_new__ns1__WriteService(soap*) allocate
/// - soap_new__ns1__WriteService(soap*, int num) allocate array
/// - soap_new_req__ns1__WriteService(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WriteService(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WriteService(soap*, _ns1__WriteService*) deserialize from a stream
/// - int soap_write__ns1__WriteService(soap, _ns1__WriteService*) serialize to a stream
class _ns1__WriteService
{ public:
/// Element "jkxlh" of XSD type xs:string.
    std::wstring*                        jkxlh                          0;	///< Optional element.
/// Element "jkid" of XSD type xs:string.
    std::wstring*                        jkid                           0;	///< Optional element.
/// Element "xmlDoc" of XSD type xs:string.
    std::wstring*                        xmlDoc                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":WriteServiceResponse
/// @brief "http://tempuri.org/":WriteServiceResponse is a complexType.
///
/// class _ns1__WriteServiceResponse operations:
/// - soap_new__ns1__WriteServiceResponse(soap*) allocate
/// - soap_new__ns1__WriteServiceResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__WriteServiceResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WriteServiceResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WriteServiceResponse(soap*, _ns1__WriteServiceResponse*) deserialize from a stream
/// - int soap_write__ns1__WriteServiceResponse(soap, _ns1__WriteServiceResponse*) serialize to a stream
class _ns1__WriteServiceResponse
{ public:
/// Element "WriteServiceResult" of XSD type xs:string.
    std::wstring*                        WriteServiceResult             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":webEncodeUTF8
/// @brief "http://tempuri.org/":webEncodeUTF8 is a complexType.
///
/// class _ns1__webEncodeUTF8 operations:
/// - soap_new__ns1__webEncodeUTF8(soap*) allocate
/// - soap_new__ns1__webEncodeUTF8(soap*, int num) allocate array
/// - soap_new_req__ns1__webEncodeUTF8(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__webEncodeUTF8(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__webEncodeUTF8(soap*, _ns1__webEncodeUTF8*) deserialize from a stream
/// - int soap_write__ns1__webEncodeUTF8(soap, _ns1__webEncodeUTF8*) serialize to a stream
class _ns1__webEncodeUTF8
{ public:
/// Element "str" of XSD type xs:string.
    std::wstring*                        str                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":webEncodeUTF8Response
/// @brief "http://tempuri.org/":webEncodeUTF8Response is a complexType.
///
/// class _ns1__webEncodeUTF8Response operations:
/// - soap_new__ns1__webEncodeUTF8Response(soap*) allocate
/// - soap_new__ns1__webEncodeUTF8Response(soap*, int num) allocate array
/// - soap_new_req__ns1__webEncodeUTF8Response(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__webEncodeUTF8Response(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__webEncodeUTF8Response(soap*, _ns1__webEncodeUTF8Response*) deserialize from a stream
/// - int soap_write__ns1__webEncodeUTF8Response(soap, _ns1__webEncodeUTF8Response*) serialize to a stream
class _ns1__webEncodeUTF8Response
{ public:
/// Element "webEncodeUTF8Result" of XSD type xs:string.
    std::wstring*                        webEncodeUTF8Result            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":webDecodeUTF8
/// @brief "http://tempuri.org/":webDecodeUTF8 is a complexType.
///
/// class _ns1__webDecodeUTF8 operations:
/// - soap_new__ns1__webDecodeUTF8(soap*) allocate
/// - soap_new__ns1__webDecodeUTF8(soap*, int num) allocate array
/// - soap_new_req__ns1__webDecodeUTF8(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__webDecodeUTF8(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__webDecodeUTF8(soap*, _ns1__webDecodeUTF8*) deserialize from a stream
/// - int soap_write__ns1__webDecodeUTF8(soap, _ns1__webDecodeUTF8*) serialize to a stream
class _ns1__webDecodeUTF8
{ public:
/// Element "str" of XSD type xs:string.
    std::wstring*                        str                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":webDecodeUTF8Response
/// @brief "http://tempuri.org/":webDecodeUTF8Response is a complexType.
///
/// class _ns1__webDecodeUTF8Response operations:
/// - soap_new__ns1__webDecodeUTF8Response(soap*) allocate
/// - soap_new__ns1__webDecodeUTF8Response(soap*, int num) allocate array
/// - soap_new_req__ns1__webDecodeUTF8Response(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__webDecodeUTF8Response(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__webDecodeUTF8Response(soap*, _ns1__webDecodeUTF8Response*) deserialize from a stream
/// - int soap_write__ns1__webDecodeUTF8Response(soap, _ns1__webDecodeUTF8Response*) serialize to a stream
class _ns1__webDecodeUTF8Response
{ public:
/// Element "webDecodeUTF8Result" of XSD type xs:string.
    std::wstring*                        webDecodeUTF8Result            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetBase64
/// @brief "http://tempuri.org/":GetBase64 is a complexType.
///
/// class _ns1__GetBase64 operations:
/// - soap_new__ns1__GetBase64(soap*) allocate
/// - soap_new__ns1__GetBase64(soap*, int num) allocate array
/// - soap_new_req__ns1__GetBase64(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetBase64(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetBase64(soap*, _ns1__GetBase64*) deserialize from a stream
/// - int soap_write__ns1__GetBase64(soap, _ns1__GetBase64*) serialize to a stream
class _ns1__GetBase64
{ public:
/// Element "byt" of XSD type xs:base64Binary.
    xsd__base64Binary*                   byt                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetBase64Response
/// @brief "http://tempuri.org/":GetBase64Response is a complexType.
///
/// class _ns1__GetBase64Response operations:
/// - soap_new__ns1__GetBase64Response(soap*) allocate
/// - soap_new__ns1__GetBase64Response(soap*, int num) allocate array
/// - soap_new_req__ns1__GetBase64Response(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetBase64Response(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetBase64Response(soap*, _ns1__GetBase64Response*) deserialize from a stream
/// - int soap_write__ns1__GetBase64Response(soap, _ns1__GetBase64Response*) serialize to a stream
class _ns1__GetBase64Response
{ public:
/// Element "GetBase64Result" of XSD type xs:string.
    std::wstring*                        GetBase64Result                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	AccessServiceSoap 
//gsoap ns1  service type:	AccessServiceSoap 
//gsoap ns1  service port:	http://192.100.9.100:83/Services/AccessService.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref AccessServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page AccessServiceSoap Binding "AccessServiceSoap"

@section AccessServiceSoap_operations Operations of Binding "AccessServiceSoap"

  - @ref __ns1__QueryService

  - @ref __ns1__WriteService

  - @ref __ns1__webEncodeUTF8

  - @ref __ns1__webDecodeUTF8

  - @ref __ns1__GetBase64

  - @ref __ns1__QueryService_

  - @ref __ns1__WriteService_

  - @ref __ns1__webEncodeUTF8_

  - @ref __ns1__webDecodeUTF8_

  - @ref __ns1__GetBase64_

@section AccessServiceSoap_ports Endpoints of Binding "AccessServiceSoap"

  - http://192.100.9.100:83/Services/AccessService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   AccessServiceSoap                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryService                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryService" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/QueryService"

  - Addressing input action: "http://tempuri.org/QueryService"

  - Addressing output action: "http://tempuri.org/QueryServiceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryService(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryService*                 ns1__QueryService,
    // output parameters:
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryService(
    struct soap *soap,
    // input parameters:
    _ns1__QueryService*                 ns1__QueryService,
    // output parameters:
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryService SOAP
//gsoap ns1  service method-style:	QueryService document
//gsoap ns1  service method-encoding:	QueryService literal
//gsoap ns1  service method-input-action:	QueryService http://tempuri.org/QueryService
//gsoap ns1  service method-output-action:	QueryService http://tempuri.org/QueryServiceResponse
int __ns1__QueryService(
    _ns1__QueryService*                 ns1__QueryService,	///< Input parameter
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteService                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteService" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/WriteService"

  - Addressing input action: "http://tempuri.org/WriteService"

  - Addressing output action: "http://tempuri.org/WriteServiceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteService(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WriteService*                 ns1__WriteService,
    // output parameters:
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteService(
    struct soap *soap,
    // input parameters:
    _ns1__WriteService*                 ns1__WriteService,
    // output parameters:
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteService SOAP
//gsoap ns1  service method-style:	WriteService document
//gsoap ns1  service method-encoding:	WriteService literal
//gsoap ns1  service method-input-action:	WriteService http://tempuri.org/WriteService
//gsoap ns1  service method-output-action:	WriteService http://tempuri.org/WriteServiceResponse
int __ns1__WriteService(
    _ns1__WriteService*                 ns1__WriteService,	///< Input parameter
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__webEncodeUTF8                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__webEncodeUTF8" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/webEncodeUTF8"

  - Addressing input action: "http://tempuri.org/webEncodeUTF8"

  - Addressing output action: "http://tempuri.org/webEncodeUTF8Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__webEncodeUTF8(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,
    // output parameters:
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__webEncodeUTF8(
    struct soap *soap,
    // input parameters:
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,
    // output parameters:
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	webEncodeUTF8 SOAP
//gsoap ns1  service method-style:	webEncodeUTF8 document
//gsoap ns1  service method-encoding:	webEncodeUTF8 literal
//gsoap ns1  service method-input-action:	webEncodeUTF8 http://tempuri.org/webEncodeUTF8
//gsoap ns1  service method-output-action:	webEncodeUTF8 http://tempuri.org/webEncodeUTF8Response
int __ns1__webEncodeUTF8(
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,	///< Input parameter
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__webDecodeUTF8                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__webDecodeUTF8" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/webDecodeUTF8"

  - Addressing input action: "http://tempuri.org/webDecodeUTF8"

  - Addressing output action: "http://tempuri.org/webDecodeUTF8Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__webDecodeUTF8(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,
    // output parameters:
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__webDecodeUTF8(
    struct soap *soap,
    // input parameters:
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,
    // output parameters:
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	webDecodeUTF8 SOAP
//gsoap ns1  service method-style:	webDecodeUTF8 document
//gsoap ns1  service method-encoding:	webDecodeUTF8 literal
//gsoap ns1  service method-input-action:	webDecodeUTF8 http://tempuri.org/webDecodeUTF8
//gsoap ns1  service method-output-action:	webDecodeUTF8 http://tempuri.org/webDecodeUTF8Response
int __ns1__webDecodeUTF8(
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,	///< Input parameter
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBase64                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBase64" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetBase64"

  - Addressing input action: "http://tempuri.org/GetBase64"

  - Addressing output action: "http://tempuri.org/GetBase64Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBase64(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBase64*                    ns1__GetBase64,
    // output parameters:
    _ns1__GetBase64Response            &ns1__GetBase64Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBase64(
    struct soap *soap,
    // input parameters:
    _ns1__GetBase64*                    ns1__GetBase64,
    // output parameters:
    _ns1__GetBase64Response            &ns1__GetBase64Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBase64 SOAP
//gsoap ns1  service method-style:	GetBase64 document
//gsoap ns1  service method-encoding:	GetBase64 literal
//gsoap ns1  service method-input-action:	GetBase64 http://tempuri.org/GetBase64
//gsoap ns1  service method-output-action:	GetBase64 http://tempuri.org/GetBase64Response
int __ns1__GetBase64(
    _ns1__GetBase64*                    ns1__GetBase64,	///< Input parameter
    _ns1__GetBase64Response            &ns1__GetBase64Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryService_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryService_" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/QueryService"

  - Addressing input action: "http://tempuri.org/QueryService"

  - Addressing output action: "http://tempuri.org/QueryServiceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryService_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryService*                 ns1__QueryService,
    // output parameters:
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryService_(
    struct soap *soap,
    // input parameters:
    _ns1__QueryService*                 ns1__QueryService,
    // output parameters:
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryService_ SOAP
//gsoap ns1  service method-style:	QueryService_ document
//gsoap ns1  service method-encoding:	QueryService_ literal
//gsoap ns1  service method-input-action:	QueryService_ http://tempuri.org/QueryService
//gsoap ns1  service method-output-action:	QueryService_ http://tempuri.org/QueryServiceResponse
int __ns1__QueryService_(
    _ns1__QueryService*                 ns1__QueryService,	///< Input parameter
    _ns1__QueryServiceResponse         &ns1__QueryServiceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WriteService_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WriteService_" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/WriteService"

  - Addressing input action: "http://tempuri.org/WriteService"

  - Addressing output action: "http://tempuri.org/WriteServiceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WriteService_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WriteService*                 ns1__WriteService,
    // output parameters:
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WriteService_(
    struct soap *soap,
    // input parameters:
    _ns1__WriteService*                 ns1__WriteService,
    // output parameters:
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WriteService_ SOAP
//gsoap ns1  service method-style:	WriteService_ document
//gsoap ns1  service method-encoding:	WriteService_ literal
//gsoap ns1  service method-input-action:	WriteService_ http://tempuri.org/WriteService
//gsoap ns1  service method-output-action:	WriteService_ http://tempuri.org/WriteServiceResponse
int __ns1__WriteService_(
    _ns1__WriteService*                 ns1__WriteService,	///< Input parameter
    _ns1__WriteServiceResponse         &ns1__WriteServiceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__webEncodeUTF8_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__webEncodeUTF8_" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/webEncodeUTF8"

  - Addressing input action: "http://tempuri.org/webEncodeUTF8"

  - Addressing output action: "http://tempuri.org/webEncodeUTF8Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__webEncodeUTF8_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,
    // output parameters:
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__webEncodeUTF8_(
    struct soap *soap,
    // input parameters:
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,
    // output parameters:
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	webEncodeUTF8_ SOAP
//gsoap ns1  service method-style:	webEncodeUTF8_ document
//gsoap ns1  service method-encoding:	webEncodeUTF8_ literal
//gsoap ns1  service method-input-action:	webEncodeUTF8_ http://tempuri.org/webEncodeUTF8
//gsoap ns1  service method-output-action:	webEncodeUTF8_ http://tempuri.org/webEncodeUTF8Response
int __ns1__webEncodeUTF8_(
    _ns1__webEncodeUTF8*                ns1__webEncodeUTF8,	///< Input parameter
    _ns1__webEncodeUTF8Response        &ns1__webEncodeUTF8Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__webDecodeUTF8_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__webDecodeUTF8_" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/webDecodeUTF8"

  - Addressing input action: "http://tempuri.org/webDecodeUTF8"

  - Addressing output action: "http://tempuri.org/webDecodeUTF8Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__webDecodeUTF8_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,
    // output parameters:
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__webDecodeUTF8_(
    struct soap *soap,
    // input parameters:
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,
    // output parameters:
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	webDecodeUTF8_ SOAP
//gsoap ns1  service method-style:	webDecodeUTF8_ document
//gsoap ns1  service method-encoding:	webDecodeUTF8_ literal
//gsoap ns1  service method-input-action:	webDecodeUTF8_ http://tempuri.org/webDecodeUTF8
//gsoap ns1  service method-output-action:	webDecodeUTF8_ http://tempuri.org/webDecodeUTF8Response
int __ns1__webDecodeUTF8_(
    _ns1__webDecodeUTF8*                ns1__webDecodeUTF8,	///< Input parameter
    _ns1__webDecodeUTF8Response        &ns1__webDecodeUTF8Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBase64_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBase64_" of service binding "AccessServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/GetBase64"

  - Addressing input action: "http://tempuri.org/GetBase64"

  - Addressing output action: "http://tempuri.org/GetBase64Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBase64_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetBase64*                    ns1__GetBase64,
    // output parameters:
    _ns1__GetBase64Response            &ns1__GetBase64Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBase64_(
    struct soap *soap,
    // input parameters:
    _ns1__GetBase64*                    ns1__GetBase64,
    // output parameters:
    _ns1__GetBase64Response            &ns1__GetBase64Response
  );
@endcode

C++ proxy class (defined in soapAccessServiceSoapProxy.h):
@code
  class AccessServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapAccessServiceSoapService.h):
@code
  class AccessServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBase64_ SOAP
//gsoap ns1  service method-style:	GetBase64_ document
//gsoap ns1  service method-encoding:	GetBase64_ literal
//gsoap ns1  service method-input-action:	GetBase64_ http://tempuri.org/GetBase64
//gsoap ns1  service method-output-action:	GetBase64_ http://tempuri.org/GetBase64Response
int __ns1__GetBase64_(
    _ns1__GetBase64*                    ns1__GetBase64,	///< Input parameter
    _ns1__GetBase64Response            &ns1__GetBase64Response	///< Output parameter
);

/**

@page AccessServiceSoap Binding "AccessServiceSoap"

@section AccessServiceSoap_policy_enablers Policy Enablers of Binding "AccessServiceSoap"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <QueryService> @ref _ns1__QueryService
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryService(struct soap*, _ns1__QueryService*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryService(struct soap*, _ns1__QueryService*);
    @endcode

  - <QueryServiceResponse> @ref _ns1__QueryServiceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryServiceResponse(struct soap*, _ns1__QueryServiceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryServiceResponse(struct soap*, _ns1__QueryServiceResponse*);
    @endcode

  - <WriteService> @ref _ns1__WriteService
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteService(struct soap*, _ns1__WriteService*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteService(struct soap*, _ns1__WriteService*);
    @endcode

  - <WriteServiceResponse> @ref _ns1__WriteServiceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WriteServiceResponse(struct soap*, _ns1__WriteServiceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WriteServiceResponse(struct soap*, _ns1__WriteServiceResponse*);
    @endcode

  - <webEncodeUTF8> @ref _ns1__webEncodeUTF8
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8*);
    @endcode

  - <webEncodeUTF8Response> @ref _ns1__webEncodeUTF8Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__webEncodeUTF8Response(struct soap*, _ns1__webEncodeUTF8Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__webEncodeUTF8Response(struct soap*, _ns1__webEncodeUTF8Response*);
    @endcode

  - <webDecodeUTF8> @ref _ns1__webDecodeUTF8
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8*);
    @endcode

  - <webDecodeUTF8Response> @ref _ns1__webDecodeUTF8Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__webDecodeUTF8Response(struct soap*, _ns1__webDecodeUTF8Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__webDecodeUTF8Response(struct soap*, _ns1__webDecodeUTF8Response*);
    @endcode

  - <GetBase64> @ref _ns1__GetBase64
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBase64(struct soap*, _ns1__GetBase64*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBase64(struct soap*, _ns1__GetBase64*);
    @endcode

  - <GetBase64Response> @ref _ns1__GetBase64Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetBase64Response(struct soap*, _ns1__GetBase64Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetBase64Response(struct soap*, _ns1__GetBase64Response*);
    @endcode

*/

/* End of AccessService.h */
