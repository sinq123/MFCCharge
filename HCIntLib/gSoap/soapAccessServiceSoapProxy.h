/* soapAccessServiceSoapProxy.h
   Generated by gSOAP 2.8.21 from AccessService.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapAccessServiceSoapProxy_H
#define soapAccessServiceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC AccessServiceSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'AccessServiceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in AccessService.h (non-static)
	/// Constructor
	AccessServiceSoapProxy();
	/// Construct from another engine state
	AccessServiceSoapProxy(const struct soap&);
	/// Constructor with endpoint URL
	AccessServiceSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	AccessServiceSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	AccessServiceSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	AccessServiceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~AccessServiceSoapProxy();
	/// Initializer used by constructors
	virtual	void AccessServiceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'QueryService' (returns error code or SOAP_OK)
	virtual	int QueryService(_ns1__QueryService *ns1__QueryService, _ns1__QueryServiceResponse &ns1__QueryServiceResponse) { return this->QueryService(NULL, NULL, ns1__QueryService, ns1__QueryServiceResponse); }
	virtual	int QueryService(const char *endpoint, const char *soap_action, _ns1__QueryService *ns1__QueryService, _ns1__QueryServiceResponse &ns1__QueryServiceResponse);

	/// Web service operation 'WriteService' (returns error code or SOAP_OK)
	virtual	int WriteService(_ns1__WriteService *ns1__WriteService, _ns1__WriteServiceResponse &ns1__WriteServiceResponse) { return this->WriteService(NULL, NULL, ns1__WriteService, ns1__WriteServiceResponse); }
	virtual	int WriteService(const char *endpoint, const char *soap_action, _ns1__WriteService *ns1__WriteService, _ns1__WriteServiceResponse &ns1__WriteServiceResponse);

	/// Web service operation 'webEncodeUTF8' (returns error code or SOAP_OK)
	virtual	int webEncodeUTF8(_ns1__webEncodeUTF8 *ns1__webEncodeUTF8, _ns1__webEncodeUTF8Response &ns1__webEncodeUTF8Response) { return this->webEncodeUTF8(NULL, NULL, ns1__webEncodeUTF8, ns1__webEncodeUTF8Response); }
	virtual	int webEncodeUTF8(const char *endpoint, const char *soap_action, _ns1__webEncodeUTF8 *ns1__webEncodeUTF8, _ns1__webEncodeUTF8Response &ns1__webEncodeUTF8Response);

	/// Web service operation 'webDecodeUTF8' (returns error code or SOAP_OK)
	virtual	int webDecodeUTF8(_ns1__webDecodeUTF8 *ns1__webDecodeUTF8, _ns1__webDecodeUTF8Response &ns1__webDecodeUTF8Response) { return this->webDecodeUTF8(NULL, NULL, ns1__webDecodeUTF8, ns1__webDecodeUTF8Response); }
	virtual	int webDecodeUTF8(const char *endpoint, const char *soap_action, _ns1__webDecodeUTF8 *ns1__webDecodeUTF8, _ns1__webDecodeUTF8Response &ns1__webDecodeUTF8Response);

	/// Web service operation 'GetBase64' (returns error code or SOAP_OK)
	virtual	int GetBase64(_ns1__GetBase64 *ns1__GetBase64, _ns1__GetBase64Response &ns1__GetBase64Response) { return this->GetBase64(NULL, NULL, ns1__GetBase64, ns1__GetBase64Response); }
	virtual	int GetBase64(const char *endpoint, const char *soap_action, _ns1__GetBase64 *ns1__GetBase64, _ns1__GetBase64Response &ns1__GetBase64Response);

	/// Web service operation 'QueryService' (returns error code or SOAP_OK)
	virtual	int QueryService_(_ns1__QueryService *ns1__QueryService, _ns1__QueryServiceResponse &ns1__QueryServiceResponse) { return this->QueryService_(NULL, NULL, ns1__QueryService, ns1__QueryServiceResponse); }
	virtual	int QueryService_(const char *endpoint, const char *soap_action, _ns1__QueryService *ns1__QueryService, _ns1__QueryServiceResponse &ns1__QueryServiceResponse);

	/// Web service operation 'WriteService' (returns error code or SOAP_OK)
	virtual	int WriteService_(_ns1__WriteService *ns1__WriteService, _ns1__WriteServiceResponse &ns1__WriteServiceResponse) { return this->WriteService_(NULL, NULL, ns1__WriteService, ns1__WriteServiceResponse); }
	virtual	int WriteService_(const char *endpoint, const char *soap_action, _ns1__WriteService *ns1__WriteService, _ns1__WriteServiceResponse &ns1__WriteServiceResponse);

	/// Web service operation 'webEncodeUTF8' (returns error code or SOAP_OK)
	virtual	int webEncodeUTF8_(_ns1__webEncodeUTF8 *ns1__webEncodeUTF8, _ns1__webEncodeUTF8Response &ns1__webEncodeUTF8Response) { return this->webEncodeUTF8_(NULL, NULL, ns1__webEncodeUTF8, ns1__webEncodeUTF8Response); }
	virtual	int webEncodeUTF8_(const char *endpoint, const char *soap_action, _ns1__webEncodeUTF8 *ns1__webEncodeUTF8, _ns1__webEncodeUTF8Response &ns1__webEncodeUTF8Response);

	/// Web service operation 'webDecodeUTF8' (returns error code or SOAP_OK)
	virtual	int webDecodeUTF8_(_ns1__webDecodeUTF8 *ns1__webDecodeUTF8, _ns1__webDecodeUTF8Response &ns1__webDecodeUTF8Response) { return this->webDecodeUTF8_(NULL, NULL, ns1__webDecodeUTF8, ns1__webDecodeUTF8Response); }
	virtual	int webDecodeUTF8_(const char *endpoint, const char *soap_action, _ns1__webDecodeUTF8 *ns1__webDecodeUTF8, _ns1__webDecodeUTF8Response &ns1__webDecodeUTF8Response);

	/// Web service operation 'GetBase64' (returns error code or SOAP_OK)
	virtual	int GetBase64_(_ns1__GetBase64 *ns1__GetBase64, _ns1__GetBase64Response &ns1__GetBase64Response) { return this->GetBase64_(NULL, NULL, ns1__GetBase64, ns1__GetBase64Response); }
	virtual	int GetBase64_(const char *endpoint, const char *soap_action, _ns1__GetBase64 *ns1__GetBase64, _ns1__GetBase64Response &ns1__GetBase64Response);
};
#endif
