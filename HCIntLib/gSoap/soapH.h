/* soapH.h
   Generated by gSOAP 2.8.21 from AccessService.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetBase64Response
#define SOAP_TYPE__ns1__GetBase64Response (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBase64Response(struct soap*, const char*, int, const _ns1__GetBase64Response *, const char*);
SOAP_FMAC3 _ns1__GetBase64Response * SOAP_FMAC4 soap_in__ns1__GetBase64Response(struct soap*, const char*, _ns1__GetBase64Response *, const char*);

#ifndef soap_write__ns1__GetBase64Response
#define soap_write__ns1__GetBase64Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetBase64Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetBase64Response * SOAP_FMAC4 soap_get__ns1__GetBase64Response(struct soap*, _ns1__GetBase64Response *, const char*, const char*);

#ifndef soap_read__ns1__GetBase64Response
#define soap_read__ns1__GetBase64Response(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetBase64Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetBase64Response * SOAP_FMAC2 soap_instantiate__ns1__GetBase64Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetBase64Response * soap_new__ns1__GetBase64Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetBase64Response(soap, n, NULL, NULL, NULL); }

inline _ns1__GetBase64Response * soap_new_req__ns1__GetBase64Response(struct soap *soap) { _ns1__GetBase64Response *_p = soap_instantiate__ns1__GetBase64Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetBase64Response * soap_new_set__ns1__GetBase64Response(struct soap *soap, std::wstring *GetBase64Result) { _ns1__GetBase64Response *_p = soap_instantiate__ns1__GetBase64Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetBase64Response::GetBase64Result = GetBase64Result; } return _p; }

inline void soap_delete__ns1__GetBase64Response(struct soap *soap, _ns1__GetBase64Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBase64Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetBase64
#define SOAP_TYPE__ns1__GetBase64 (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetBase64(struct soap*, const char*, int, const _ns1__GetBase64 *, const char*);
SOAP_FMAC3 _ns1__GetBase64 * SOAP_FMAC4 soap_in__ns1__GetBase64(struct soap*, const char*, _ns1__GetBase64 *, const char*);

#ifndef soap_write__ns1__GetBase64
#define soap_write__ns1__GetBase64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetBase64", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetBase64 * SOAP_FMAC4 soap_get__ns1__GetBase64(struct soap*, _ns1__GetBase64 *, const char*, const char*);

#ifndef soap_read__ns1__GetBase64
#define soap_read__ns1__GetBase64(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetBase64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetBase64 * SOAP_FMAC2 soap_instantiate__ns1__GetBase64(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetBase64 * soap_new__ns1__GetBase64(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetBase64(soap, n, NULL, NULL, NULL); }

inline _ns1__GetBase64 * soap_new_req__ns1__GetBase64(struct soap *soap) { _ns1__GetBase64 *_p = soap_instantiate__ns1__GetBase64(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetBase64 * soap_new_set__ns1__GetBase64(struct soap *soap, xsd__base64Binary *byt) { _ns1__GetBase64 *_p = soap_instantiate__ns1__GetBase64(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetBase64::byt = byt; } return _p; }

inline void soap_delete__ns1__GetBase64(struct soap *soap, _ns1__GetBase64 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetBase64(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__webDecodeUTF8Response
#define SOAP_TYPE__ns1__webDecodeUTF8Response (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__webDecodeUTF8Response(struct soap*, const char*, int, const _ns1__webDecodeUTF8Response *, const char*);
SOAP_FMAC3 _ns1__webDecodeUTF8Response * SOAP_FMAC4 soap_in__ns1__webDecodeUTF8Response(struct soap*, const char*, _ns1__webDecodeUTF8Response *, const char*);

#ifndef soap_write__ns1__webDecodeUTF8Response
#define soap_write__ns1__webDecodeUTF8Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:webDecodeUTF8Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webDecodeUTF8Response * SOAP_FMAC4 soap_get__ns1__webDecodeUTF8Response(struct soap*, _ns1__webDecodeUTF8Response *, const char*, const char*);

#ifndef soap_read__ns1__webDecodeUTF8Response
#define soap_read__ns1__webDecodeUTF8Response(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__webDecodeUTF8Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__webDecodeUTF8Response * SOAP_FMAC2 soap_instantiate__ns1__webDecodeUTF8Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__webDecodeUTF8Response * soap_new__ns1__webDecodeUTF8Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__webDecodeUTF8Response(soap, n, NULL, NULL, NULL); }

inline _ns1__webDecodeUTF8Response * soap_new_req__ns1__webDecodeUTF8Response(struct soap *soap) { _ns1__webDecodeUTF8Response *_p = soap_instantiate__ns1__webDecodeUTF8Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__webDecodeUTF8Response * soap_new_set__ns1__webDecodeUTF8Response(struct soap *soap, std::wstring *webDecodeUTF8Result) { _ns1__webDecodeUTF8Response *_p = soap_instantiate__ns1__webDecodeUTF8Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__webDecodeUTF8Response::webDecodeUTF8Result = webDecodeUTF8Result; } return _p; }

inline void soap_delete__ns1__webDecodeUTF8Response(struct soap *soap, _ns1__webDecodeUTF8Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__webDecodeUTF8Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__webDecodeUTF8
#define SOAP_TYPE__ns1__webDecodeUTF8 (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__webDecodeUTF8(struct soap*, const char*, int, const _ns1__webDecodeUTF8 *, const char*);
SOAP_FMAC3 _ns1__webDecodeUTF8 * SOAP_FMAC4 soap_in__ns1__webDecodeUTF8(struct soap*, const char*, _ns1__webDecodeUTF8 *, const char*);

#ifndef soap_write__ns1__webDecodeUTF8
#define soap_write__ns1__webDecodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:webDecodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webDecodeUTF8 * SOAP_FMAC4 soap_get__ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8 *, const char*, const char*);

#ifndef soap_read__ns1__webDecodeUTF8
#define soap_read__ns1__webDecodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__webDecodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__webDecodeUTF8 * SOAP_FMAC2 soap_instantiate__ns1__webDecodeUTF8(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__webDecodeUTF8 * soap_new__ns1__webDecodeUTF8(struct soap *soap, int n = -1) { return soap_instantiate__ns1__webDecodeUTF8(soap, n, NULL, NULL, NULL); }

inline _ns1__webDecodeUTF8 * soap_new_req__ns1__webDecodeUTF8(struct soap *soap) { _ns1__webDecodeUTF8 *_p = soap_instantiate__ns1__webDecodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__webDecodeUTF8 * soap_new_set__ns1__webDecodeUTF8(struct soap *soap, std::wstring *str) { _ns1__webDecodeUTF8 *_p = soap_instantiate__ns1__webDecodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__webDecodeUTF8::str = str; } return _p; }

inline void soap_delete__ns1__webDecodeUTF8(struct soap *soap, _ns1__webDecodeUTF8 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__webDecodeUTF8(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__webEncodeUTF8Response
#define SOAP_TYPE__ns1__webEncodeUTF8Response (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__webEncodeUTF8Response(struct soap*, const char*, int, const _ns1__webEncodeUTF8Response *, const char*);
SOAP_FMAC3 _ns1__webEncodeUTF8Response * SOAP_FMAC4 soap_in__ns1__webEncodeUTF8Response(struct soap*, const char*, _ns1__webEncodeUTF8Response *, const char*);

#ifndef soap_write__ns1__webEncodeUTF8Response
#define soap_write__ns1__webEncodeUTF8Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:webEncodeUTF8Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webEncodeUTF8Response * SOAP_FMAC4 soap_get__ns1__webEncodeUTF8Response(struct soap*, _ns1__webEncodeUTF8Response *, const char*, const char*);

#ifndef soap_read__ns1__webEncodeUTF8Response
#define soap_read__ns1__webEncodeUTF8Response(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__webEncodeUTF8Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__webEncodeUTF8Response * SOAP_FMAC2 soap_instantiate__ns1__webEncodeUTF8Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__webEncodeUTF8Response * soap_new__ns1__webEncodeUTF8Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__webEncodeUTF8Response(soap, n, NULL, NULL, NULL); }

inline _ns1__webEncodeUTF8Response * soap_new_req__ns1__webEncodeUTF8Response(struct soap *soap) { _ns1__webEncodeUTF8Response *_p = soap_instantiate__ns1__webEncodeUTF8Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__webEncodeUTF8Response * soap_new_set__ns1__webEncodeUTF8Response(struct soap *soap, std::wstring *webEncodeUTF8Result) { _ns1__webEncodeUTF8Response *_p = soap_instantiate__ns1__webEncodeUTF8Response(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__webEncodeUTF8Response::webEncodeUTF8Result = webEncodeUTF8Result; } return _p; }

inline void soap_delete__ns1__webEncodeUTF8Response(struct soap *soap, _ns1__webEncodeUTF8Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__webEncodeUTF8Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__webEncodeUTF8
#define SOAP_TYPE__ns1__webEncodeUTF8 (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__webEncodeUTF8(struct soap*, const char*, int, const _ns1__webEncodeUTF8 *, const char*);
SOAP_FMAC3 _ns1__webEncodeUTF8 * SOAP_FMAC4 soap_in__ns1__webEncodeUTF8(struct soap*, const char*, _ns1__webEncodeUTF8 *, const char*);

#ifndef soap_write__ns1__webEncodeUTF8
#define soap_write__ns1__webEncodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:webEncodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webEncodeUTF8 * SOAP_FMAC4 soap_get__ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8 *, const char*, const char*);

#ifndef soap_read__ns1__webEncodeUTF8
#define soap_read__ns1__webEncodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__webEncodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__webEncodeUTF8 * SOAP_FMAC2 soap_instantiate__ns1__webEncodeUTF8(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__webEncodeUTF8 * soap_new__ns1__webEncodeUTF8(struct soap *soap, int n = -1) { return soap_instantiate__ns1__webEncodeUTF8(soap, n, NULL, NULL, NULL); }

inline _ns1__webEncodeUTF8 * soap_new_req__ns1__webEncodeUTF8(struct soap *soap) { _ns1__webEncodeUTF8 *_p = soap_instantiate__ns1__webEncodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__webEncodeUTF8 * soap_new_set__ns1__webEncodeUTF8(struct soap *soap, std::wstring *str) { _ns1__webEncodeUTF8 *_p = soap_instantiate__ns1__webEncodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__webEncodeUTF8::str = str; } return _p; }

inline void soap_delete__ns1__webEncodeUTF8(struct soap *soap, _ns1__webEncodeUTF8 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__webEncodeUTF8(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__WriteServiceResponse
#define SOAP_TYPE__ns1__WriteServiceResponse (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WriteServiceResponse(struct soap*, const char*, int, const _ns1__WriteServiceResponse *, const char*);
SOAP_FMAC3 _ns1__WriteServiceResponse * SOAP_FMAC4 soap_in__ns1__WriteServiceResponse(struct soap*, const char*, _ns1__WriteServiceResponse *, const char*);

#ifndef soap_write__ns1__WriteServiceResponse
#define soap_write__ns1__WriteServiceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:WriteServiceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WriteServiceResponse * SOAP_FMAC4 soap_get__ns1__WriteServiceResponse(struct soap*, _ns1__WriteServiceResponse *, const char*, const char*);

#ifndef soap_read__ns1__WriteServiceResponse
#define soap_read__ns1__WriteServiceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__WriteServiceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__WriteServiceResponse * SOAP_FMAC2 soap_instantiate__ns1__WriteServiceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WriteServiceResponse * soap_new__ns1__WriteServiceResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__WriteServiceResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__WriteServiceResponse * soap_new_req__ns1__WriteServiceResponse(struct soap *soap) { _ns1__WriteServiceResponse *_p = soap_instantiate__ns1__WriteServiceResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__WriteServiceResponse * soap_new_set__ns1__WriteServiceResponse(struct soap *soap, std::wstring *WriteServiceResult) { _ns1__WriteServiceResponse *_p = soap_instantiate__ns1__WriteServiceResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WriteServiceResponse::WriteServiceResult = WriteServiceResult; } return _p; }

inline void soap_delete__ns1__WriteServiceResponse(struct soap *soap, _ns1__WriteServiceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__WriteServiceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__WriteService
#define SOAP_TYPE__ns1__WriteService (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WriteService(struct soap*, const char*, int, const _ns1__WriteService *, const char*);
SOAP_FMAC3 _ns1__WriteService * SOAP_FMAC4 soap_in__ns1__WriteService(struct soap*, const char*, _ns1__WriteService *, const char*);

#ifndef soap_write__ns1__WriteService
#define soap_write__ns1__WriteService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:WriteService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WriteService * SOAP_FMAC4 soap_get__ns1__WriteService(struct soap*, _ns1__WriteService *, const char*, const char*);

#ifndef soap_read__ns1__WriteService
#define soap_read__ns1__WriteService(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__WriteService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__WriteService * SOAP_FMAC2 soap_instantiate__ns1__WriteService(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WriteService * soap_new__ns1__WriteService(struct soap *soap, int n = -1) { return soap_instantiate__ns1__WriteService(soap, n, NULL, NULL, NULL); }

inline _ns1__WriteService * soap_new_req__ns1__WriteService(struct soap *soap) { _ns1__WriteService *_p = soap_instantiate__ns1__WriteService(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__WriteService * soap_new_set__ns1__WriteService(struct soap *soap, std::wstring *jkxlh, std::wstring *jkid, std::wstring *xmlDoc) { _ns1__WriteService *_p = soap_instantiate__ns1__WriteService(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WriteService::jkxlh = jkxlh; _p->_ns1__WriteService::jkid = jkid; _p->_ns1__WriteService::xmlDoc = xmlDoc; } return _p; }

inline void soap_delete__ns1__WriteService(struct soap *soap, _ns1__WriteService *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__WriteService(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__QueryServiceResponse
#define SOAP_TYPE__ns1__QueryServiceResponse (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryServiceResponse(struct soap*, const char*, int, const _ns1__QueryServiceResponse *, const char*);
SOAP_FMAC3 _ns1__QueryServiceResponse * SOAP_FMAC4 soap_in__ns1__QueryServiceResponse(struct soap*, const char*, _ns1__QueryServiceResponse *, const char*);

#ifndef soap_write__ns1__QueryServiceResponse
#define soap_write__ns1__QueryServiceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:QueryServiceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QueryServiceResponse * SOAP_FMAC4 soap_get__ns1__QueryServiceResponse(struct soap*, _ns1__QueryServiceResponse *, const char*, const char*);

#ifndef soap_read__ns1__QueryServiceResponse
#define soap_read__ns1__QueryServiceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__QueryServiceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__QueryServiceResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryServiceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QueryServiceResponse * soap_new__ns1__QueryServiceResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QueryServiceResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__QueryServiceResponse * soap_new_req__ns1__QueryServiceResponse(struct soap *soap) { _ns1__QueryServiceResponse *_p = soap_instantiate__ns1__QueryServiceResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__QueryServiceResponse * soap_new_set__ns1__QueryServiceResponse(struct soap *soap, std::wstring *QueryServiceResult) { _ns1__QueryServiceResponse *_p = soap_instantiate__ns1__QueryServiceResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__QueryServiceResponse::QueryServiceResult = QueryServiceResult; } return _p; }

inline void soap_delete__ns1__QueryServiceResponse(struct soap *soap, _ns1__QueryServiceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryServiceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__QueryService
#define SOAP_TYPE__ns1__QueryService (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryService(struct soap*, const char*, int, const _ns1__QueryService *, const char*);
SOAP_FMAC3 _ns1__QueryService * SOAP_FMAC4 soap_in__ns1__QueryService(struct soap*, const char*, _ns1__QueryService *, const char*);

#ifndef soap_write__ns1__QueryService
#define soap_write__ns1__QueryService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:QueryService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QueryService * SOAP_FMAC4 soap_get__ns1__QueryService(struct soap*, _ns1__QueryService *, const char*, const char*);

#ifndef soap_read__ns1__QueryService
#define soap_read__ns1__QueryService(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__QueryService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__QueryService * SOAP_FMAC2 soap_instantiate__ns1__QueryService(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QueryService * soap_new__ns1__QueryService(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QueryService(soap, n, NULL, NULL, NULL); }

inline _ns1__QueryService * soap_new_req__ns1__QueryService(struct soap *soap) { _ns1__QueryService *_p = soap_instantiate__ns1__QueryService(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__QueryService * soap_new_set__ns1__QueryService(struct soap *soap, std::wstring *jkxlh, std::wstring *jkid, std::wstring *xmlDoc) { _ns1__QueryService *_p = soap_instantiate__ns1__QueryService(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__QueryService::jkxlh = jkxlh; _p->_ns1__QueryService::jkid = jkid; _p->_ns1__QueryService::xmlDoc = xmlDoc; } return _p; }

inline void soap_delete__ns1__QueryService(struct soap *soap, _ns1__QueryService *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__QueryService(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__GetBase64_
#define SOAP_TYPE___ns1__GetBase64_ (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBase64_(struct soap*, struct __ns1__GetBase64_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBase64_(struct soap*, const struct __ns1__GetBase64_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBase64_(struct soap*, const char*, int, const struct __ns1__GetBase64_ *, const char*);
SOAP_FMAC3 struct __ns1__GetBase64_ * SOAP_FMAC4 soap_in___ns1__GetBase64_(struct soap*, const char*, struct __ns1__GetBase64_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBase64_(struct soap*, const struct __ns1__GetBase64_ *, const char*, const char*);

#ifndef soap_write___ns1__GetBase64_
#define soap_write___ns1__GetBase64_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetBase64_(soap, data),0) || soap_put___ns1__GetBase64_(soap, data, "-ns1:GetBase64", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetBase64_ * SOAP_FMAC4 soap_get___ns1__GetBase64_(struct soap*, struct __ns1__GetBase64_ *, const char*, const char*);

#ifndef soap_read___ns1__GetBase64_
#define soap_read___ns1__GetBase64_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetBase64_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetBase64_ * SOAP_FMAC2 soap_instantiate___ns1__GetBase64_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetBase64_ * soap_new___ns1__GetBase64_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetBase64_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetBase64_ * soap_new_req___ns1__GetBase64_(struct soap *soap) { struct __ns1__GetBase64_ *_p = soap_instantiate___ns1__GetBase64_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetBase64_(soap, _p); } return _p; }

inline struct __ns1__GetBase64_ * soap_new_set___ns1__GetBase64_(struct soap *soap, _ns1__GetBase64 *ns1__GetBase64) { struct __ns1__GetBase64_ *_p = soap_instantiate___ns1__GetBase64_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetBase64_(soap, _p); _p->ns1__GetBase64 = ns1__GetBase64; } return _p; }

inline void soap_delete___ns1__GetBase64_(struct soap *soap, struct __ns1__GetBase64_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBase64_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__webDecodeUTF8_
#define SOAP_TYPE___ns1__webDecodeUTF8_ (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__webDecodeUTF8_(struct soap*, struct __ns1__webDecodeUTF8_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__webDecodeUTF8_(struct soap*, const struct __ns1__webDecodeUTF8_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__webDecodeUTF8_(struct soap*, const char*, int, const struct __ns1__webDecodeUTF8_ *, const char*);
SOAP_FMAC3 struct __ns1__webDecodeUTF8_ * SOAP_FMAC4 soap_in___ns1__webDecodeUTF8_(struct soap*, const char*, struct __ns1__webDecodeUTF8_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__webDecodeUTF8_(struct soap*, const struct __ns1__webDecodeUTF8_ *, const char*, const char*);

#ifndef soap_write___ns1__webDecodeUTF8_
#define soap_write___ns1__webDecodeUTF8_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__webDecodeUTF8_(soap, data),0) || soap_put___ns1__webDecodeUTF8_(soap, data, "-ns1:webDecodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__webDecodeUTF8_ * SOAP_FMAC4 soap_get___ns1__webDecodeUTF8_(struct soap*, struct __ns1__webDecodeUTF8_ *, const char*, const char*);

#ifndef soap_read___ns1__webDecodeUTF8_
#define soap_read___ns1__webDecodeUTF8_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__webDecodeUTF8_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__webDecodeUTF8_ * SOAP_FMAC2 soap_instantiate___ns1__webDecodeUTF8_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__webDecodeUTF8_ * soap_new___ns1__webDecodeUTF8_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__webDecodeUTF8_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__webDecodeUTF8_ * soap_new_req___ns1__webDecodeUTF8_(struct soap *soap) { struct __ns1__webDecodeUTF8_ *_p = soap_instantiate___ns1__webDecodeUTF8_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webDecodeUTF8_(soap, _p); } return _p; }

inline struct __ns1__webDecodeUTF8_ * soap_new_set___ns1__webDecodeUTF8_(struct soap *soap, _ns1__webDecodeUTF8 *ns1__webDecodeUTF8) { struct __ns1__webDecodeUTF8_ *_p = soap_instantiate___ns1__webDecodeUTF8_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webDecodeUTF8_(soap, _p); _p->ns1__webDecodeUTF8 = ns1__webDecodeUTF8; } return _p; }

inline void soap_delete___ns1__webDecodeUTF8_(struct soap *soap, struct __ns1__webDecodeUTF8_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__webDecodeUTF8_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__webEncodeUTF8_
#define SOAP_TYPE___ns1__webEncodeUTF8_ (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__webEncodeUTF8_(struct soap*, struct __ns1__webEncodeUTF8_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__webEncodeUTF8_(struct soap*, const struct __ns1__webEncodeUTF8_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__webEncodeUTF8_(struct soap*, const char*, int, const struct __ns1__webEncodeUTF8_ *, const char*);
SOAP_FMAC3 struct __ns1__webEncodeUTF8_ * SOAP_FMAC4 soap_in___ns1__webEncodeUTF8_(struct soap*, const char*, struct __ns1__webEncodeUTF8_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__webEncodeUTF8_(struct soap*, const struct __ns1__webEncodeUTF8_ *, const char*, const char*);

#ifndef soap_write___ns1__webEncodeUTF8_
#define soap_write___ns1__webEncodeUTF8_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__webEncodeUTF8_(soap, data),0) || soap_put___ns1__webEncodeUTF8_(soap, data, "-ns1:webEncodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__webEncodeUTF8_ * SOAP_FMAC4 soap_get___ns1__webEncodeUTF8_(struct soap*, struct __ns1__webEncodeUTF8_ *, const char*, const char*);

#ifndef soap_read___ns1__webEncodeUTF8_
#define soap_read___ns1__webEncodeUTF8_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__webEncodeUTF8_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__webEncodeUTF8_ * SOAP_FMAC2 soap_instantiate___ns1__webEncodeUTF8_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__webEncodeUTF8_ * soap_new___ns1__webEncodeUTF8_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__webEncodeUTF8_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__webEncodeUTF8_ * soap_new_req___ns1__webEncodeUTF8_(struct soap *soap) { struct __ns1__webEncodeUTF8_ *_p = soap_instantiate___ns1__webEncodeUTF8_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webEncodeUTF8_(soap, _p); } return _p; }

inline struct __ns1__webEncodeUTF8_ * soap_new_set___ns1__webEncodeUTF8_(struct soap *soap, _ns1__webEncodeUTF8 *ns1__webEncodeUTF8) { struct __ns1__webEncodeUTF8_ *_p = soap_instantiate___ns1__webEncodeUTF8_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webEncodeUTF8_(soap, _p); _p->ns1__webEncodeUTF8 = ns1__webEncodeUTF8; } return _p; }

inline void soap_delete___ns1__webEncodeUTF8_(struct soap *soap, struct __ns1__webEncodeUTF8_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__webEncodeUTF8_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__WriteService_
#define SOAP_TYPE___ns1__WriteService_ (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WriteService_(struct soap*, struct __ns1__WriteService_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WriteService_(struct soap*, const struct __ns1__WriteService_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WriteService_(struct soap*, const char*, int, const struct __ns1__WriteService_ *, const char*);
SOAP_FMAC3 struct __ns1__WriteService_ * SOAP_FMAC4 soap_in___ns1__WriteService_(struct soap*, const char*, struct __ns1__WriteService_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WriteService_(struct soap*, const struct __ns1__WriteService_ *, const char*, const char*);

#ifndef soap_write___ns1__WriteService_
#define soap_write___ns1__WriteService_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__WriteService_(soap, data),0) || soap_put___ns1__WriteService_(soap, data, "-ns1:WriteService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__WriteService_ * SOAP_FMAC4 soap_get___ns1__WriteService_(struct soap*, struct __ns1__WriteService_ *, const char*, const char*);

#ifndef soap_read___ns1__WriteService_
#define soap_read___ns1__WriteService_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__WriteService_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__WriteService_ * SOAP_FMAC2 soap_instantiate___ns1__WriteService_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WriteService_ * soap_new___ns1__WriteService_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__WriteService_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__WriteService_ * soap_new_req___ns1__WriteService_(struct soap *soap) { struct __ns1__WriteService_ *_p = soap_instantiate___ns1__WriteService_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WriteService_(soap, _p); } return _p; }

inline struct __ns1__WriteService_ * soap_new_set___ns1__WriteService_(struct soap *soap, _ns1__WriteService *ns1__WriteService) { struct __ns1__WriteService_ *_p = soap_instantiate___ns1__WriteService_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WriteService_(soap, _p); _p->ns1__WriteService = ns1__WriteService; } return _p; }

inline void soap_delete___ns1__WriteService_(struct soap *soap, struct __ns1__WriteService_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__WriteService_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__QueryService_
#define SOAP_TYPE___ns1__QueryService_ (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryService_(struct soap*, struct __ns1__QueryService_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryService_(struct soap*, const struct __ns1__QueryService_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryService_(struct soap*, const char*, int, const struct __ns1__QueryService_ *, const char*);
SOAP_FMAC3 struct __ns1__QueryService_ * SOAP_FMAC4 soap_in___ns1__QueryService_(struct soap*, const char*, struct __ns1__QueryService_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryService_(struct soap*, const struct __ns1__QueryService_ *, const char*, const char*);

#ifndef soap_write___ns1__QueryService_
#define soap_write___ns1__QueryService_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__QueryService_(soap, data),0) || soap_put___ns1__QueryService_(soap, data, "-ns1:QueryService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QueryService_ * SOAP_FMAC4 soap_get___ns1__QueryService_(struct soap*, struct __ns1__QueryService_ *, const char*, const char*);

#ifndef soap_read___ns1__QueryService_
#define soap_read___ns1__QueryService_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__QueryService_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__QueryService_ * SOAP_FMAC2 soap_instantiate___ns1__QueryService_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QueryService_ * soap_new___ns1__QueryService_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QueryService_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QueryService_ * soap_new_req___ns1__QueryService_(struct soap *soap) { struct __ns1__QueryService_ *_p = soap_instantiate___ns1__QueryService_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__QueryService_(soap, _p); } return _p; }

inline struct __ns1__QueryService_ * soap_new_set___ns1__QueryService_(struct soap *soap, _ns1__QueryService *ns1__QueryService) { struct __ns1__QueryService_ *_p = soap_instantiate___ns1__QueryService_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__QueryService_(soap, _p); _p->ns1__QueryService = ns1__QueryService; } return _p; }

inline void soap_delete___ns1__QueryService_(struct soap *soap, struct __ns1__QueryService_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryService_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetBase64
#define SOAP_TYPE___ns1__GetBase64 (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetBase64(struct soap*, struct __ns1__GetBase64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetBase64(struct soap*, const struct __ns1__GetBase64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetBase64(struct soap*, const char*, int, const struct __ns1__GetBase64 *, const char*);
SOAP_FMAC3 struct __ns1__GetBase64 * SOAP_FMAC4 soap_in___ns1__GetBase64(struct soap*, const char*, struct __ns1__GetBase64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetBase64(struct soap*, const struct __ns1__GetBase64 *, const char*, const char*);

#ifndef soap_write___ns1__GetBase64
#define soap_write___ns1__GetBase64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetBase64(soap, data),0) || soap_put___ns1__GetBase64(soap, data, "-ns1:GetBase64", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetBase64 * SOAP_FMAC4 soap_get___ns1__GetBase64(struct soap*, struct __ns1__GetBase64 *, const char*, const char*);

#ifndef soap_read___ns1__GetBase64
#define soap_read___ns1__GetBase64(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetBase64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetBase64 * SOAP_FMAC2 soap_instantiate___ns1__GetBase64(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetBase64 * soap_new___ns1__GetBase64(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetBase64(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetBase64 * soap_new_req___ns1__GetBase64(struct soap *soap) { struct __ns1__GetBase64 *_p = soap_instantiate___ns1__GetBase64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetBase64(soap, _p); } return _p; }

inline struct __ns1__GetBase64 * soap_new_set___ns1__GetBase64(struct soap *soap, _ns1__GetBase64 *ns1__GetBase64) { struct __ns1__GetBase64 *_p = soap_instantiate___ns1__GetBase64(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetBase64(soap, _p); _p->ns1__GetBase64 = ns1__GetBase64; } return _p; }

inline void soap_delete___ns1__GetBase64(struct soap *soap, struct __ns1__GetBase64 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetBase64(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__webDecodeUTF8
#define SOAP_TYPE___ns1__webDecodeUTF8 (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__webDecodeUTF8(struct soap*, struct __ns1__webDecodeUTF8 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__webDecodeUTF8(struct soap*, const struct __ns1__webDecodeUTF8 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__webDecodeUTF8(struct soap*, const char*, int, const struct __ns1__webDecodeUTF8 *, const char*);
SOAP_FMAC3 struct __ns1__webDecodeUTF8 * SOAP_FMAC4 soap_in___ns1__webDecodeUTF8(struct soap*, const char*, struct __ns1__webDecodeUTF8 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__webDecodeUTF8(struct soap*, const struct __ns1__webDecodeUTF8 *, const char*, const char*);

#ifndef soap_write___ns1__webDecodeUTF8
#define soap_write___ns1__webDecodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__webDecodeUTF8(soap, data),0) || soap_put___ns1__webDecodeUTF8(soap, data, "-ns1:webDecodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__webDecodeUTF8 * SOAP_FMAC4 soap_get___ns1__webDecodeUTF8(struct soap*, struct __ns1__webDecodeUTF8 *, const char*, const char*);

#ifndef soap_read___ns1__webDecodeUTF8
#define soap_read___ns1__webDecodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__webDecodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__webDecodeUTF8 * SOAP_FMAC2 soap_instantiate___ns1__webDecodeUTF8(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__webDecodeUTF8 * soap_new___ns1__webDecodeUTF8(struct soap *soap, int n = -1) { return soap_instantiate___ns1__webDecodeUTF8(soap, n, NULL, NULL, NULL); }

inline struct __ns1__webDecodeUTF8 * soap_new_req___ns1__webDecodeUTF8(struct soap *soap) { struct __ns1__webDecodeUTF8 *_p = soap_instantiate___ns1__webDecodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webDecodeUTF8(soap, _p); } return _p; }

inline struct __ns1__webDecodeUTF8 * soap_new_set___ns1__webDecodeUTF8(struct soap *soap, _ns1__webDecodeUTF8 *ns1__webDecodeUTF8) { struct __ns1__webDecodeUTF8 *_p = soap_instantiate___ns1__webDecodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webDecodeUTF8(soap, _p); _p->ns1__webDecodeUTF8 = ns1__webDecodeUTF8; } return _p; }

inline void soap_delete___ns1__webDecodeUTF8(struct soap *soap, struct __ns1__webDecodeUTF8 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__webDecodeUTF8(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__webEncodeUTF8
#define SOAP_TYPE___ns1__webEncodeUTF8 (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__webEncodeUTF8(struct soap*, struct __ns1__webEncodeUTF8 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__webEncodeUTF8(struct soap*, const struct __ns1__webEncodeUTF8 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__webEncodeUTF8(struct soap*, const char*, int, const struct __ns1__webEncodeUTF8 *, const char*);
SOAP_FMAC3 struct __ns1__webEncodeUTF8 * SOAP_FMAC4 soap_in___ns1__webEncodeUTF8(struct soap*, const char*, struct __ns1__webEncodeUTF8 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__webEncodeUTF8(struct soap*, const struct __ns1__webEncodeUTF8 *, const char*, const char*);

#ifndef soap_write___ns1__webEncodeUTF8
#define soap_write___ns1__webEncodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__webEncodeUTF8(soap, data),0) || soap_put___ns1__webEncodeUTF8(soap, data, "-ns1:webEncodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__webEncodeUTF8 * SOAP_FMAC4 soap_get___ns1__webEncodeUTF8(struct soap*, struct __ns1__webEncodeUTF8 *, const char*, const char*);

#ifndef soap_read___ns1__webEncodeUTF8
#define soap_read___ns1__webEncodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__webEncodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__webEncodeUTF8 * SOAP_FMAC2 soap_instantiate___ns1__webEncodeUTF8(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__webEncodeUTF8 * soap_new___ns1__webEncodeUTF8(struct soap *soap, int n = -1) { return soap_instantiate___ns1__webEncodeUTF8(soap, n, NULL, NULL, NULL); }

inline struct __ns1__webEncodeUTF8 * soap_new_req___ns1__webEncodeUTF8(struct soap *soap) { struct __ns1__webEncodeUTF8 *_p = soap_instantiate___ns1__webEncodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webEncodeUTF8(soap, _p); } return _p; }

inline struct __ns1__webEncodeUTF8 * soap_new_set___ns1__webEncodeUTF8(struct soap *soap, _ns1__webEncodeUTF8 *ns1__webEncodeUTF8) { struct __ns1__webEncodeUTF8 *_p = soap_instantiate___ns1__webEncodeUTF8(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__webEncodeUTF8(soap, _p); _p->ns1__webEncodeUTF8 = ns1__webEncodeUTF8; } return _p; }

inline void soap_delete___ns1__webEncodeUTF8(struct soap *soap, struct __ns1__webEncodeUTF8 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__webEncodeUTF8(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__WriteService
#define SOAP_TYPE___ns1__WriteService (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WriteService(struct soap*, struct __ns1__WriteService *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WriteService(struct soap*, const struct __ns1__WriteService *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WriteService(struct soap*, const char*, int, const struct __ns1__WriteService *, const char*);
SOAP_FMAC3 struct __ns1__WriteService * SOAP_FMAC4 soap_in___ns1__WriteService(struct soap*, const char*, struct __ns1__WriteService *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WriteService(struct soap*, const struct __ns1__WriteService *, const char*, const char*);

#ifndef soap_write___ns1__WriteService
#define soap_write___ns1__WriteService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__WriteService(soap, data),0) || soap_put___ns1__WriteService(soap, data, "-ns1:WriteService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__WriteService * SOAP_FMAC4 soap_get___ns1__WriteService(struct soap*, struct __ns1__WriteService *, const char*, const char*);

#ifndef soap_read___ns1__WriteService
#define soap_read___ns1__WriteService(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__WriteService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__WriteService * SOAP_FMAC2 soap_instantiate___ns1__WriteService(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WriteService * soap_new___ns1__WriteService(struct soap *soap, int n = -1) { return soap_instantiate___ns1__WriteService(soap, n, NULL, NULL, NULL); }

inline struct __ns1__WriteService * soap_new_req___ns1__WriteService(struct soap *soap) { struct __ns1__WriteService *_p = soap_instantiate___ns1__WriteService(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WriteService(soap, _p); } return _p; }

inline struct __ns1__WriteService * soap_new_set___ns1__WriteService(struct soap *soap, _ns1__WriteService *ns1__WriteService) { struct __ns1__WriteService *_p = soap_instantiate___ns1__WriteService(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WriteService(soap, _p); _p->ns1__WriteService = ns1__WriteService; } return _p; }

inline void soap_delete___ns1__WriteService(struct soap *soap, struct __ns1__WriteService *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__WriteService(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__QueryService
#define SOAP_TYPE___ns1__QueryService (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryService(struct soap*, struct __ns1__QueryService *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryService(struct soap*, const struct __ns1__QueryService *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryService(struct soap*, const char*, int, const struct __ns1__QueryService *, const char*);
SOAP_FMAC3 struct __ns1__QueryService * SOAP_FMAC4 soap_in___ns1__QueryService(struct soap*, const char*, struct __ns1__QueryService *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryService(struct soap*, const struct __ns1__QueryService *, const char*, const char*);

#ifndef soap_write___ns1__QueryService
#define soap_write___ns1__QueryService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__QueryService(soap, data),0) || soap_put___ns1__QueryService(soap, data, "-ns1:QueryService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QueryService * SOAP_FMAC4 soap_get___ns1__QueryService(struct soap*, struct __ns1__QueryService *, const char*, const char*);

#ifndef soap_read___ns1__QueryService
#define soap_read___ns1__QueryService(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__QueryService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__QueryService * SOAP_FMAC2 soap_instantiate___ns1__QueryService(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QueryService * soap_new___ns1__QueryService(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QueryService(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QueryService * soap_new_req___ns1__QueryService(struct soap *soap) { struct __ns1__QueryService *_p = soap_instantiate___ns1__QueryService(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__QueryService(soap, _p); } return _p; }

inline struct __ns1__QueryService * soap_new_set___ns1__QueryService(struct soap *soap, _ns1__QueryService *ns1__QueryService) { struct __ns1__QueryService *_p = soap_instantiate___ns1__QueryService(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__QueryService(soap, _p); _p->ns1__QueryService = ns1__QueryService; } return _p; }

inline void soap_delete___ns1__QueryService(struct soap *soap, struct __ns1__QueryService *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__QueryService(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetBase64
#define SOAP_TYPE_PointerTo_ns1__GetBase64 (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetBase64(struct soap*, _ns1__GetBase64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetBase64(struct soap*, const char *, int, _ns1__GetBase64 *const*, const char *);
SOAP_FMAC3 _ns1__GetBase64 ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetBase64(struct soap*, const char*, _ns1__GetBase64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetBase64(struct soap*, _ns1__GetBase64 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetBase64
#define soap_write_PointerTo_ns1__GetBase64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetBase64(soap, data),0) || soap_put_PointerTo_ns1__GetBase64(soap, data, "ns1:GetBase64", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetBase64 ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetBase64(struct soap*, _ns1__GetBase64 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetBase64
#define soap_read_PointerTo_ns1__GetBase64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetBase64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__webDecodeUTF8
#define SOAP_TYPE_PointerTo_ns1__webDecodeUTF8 (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__webDecodeUTF8(struct soap*, const char *, int, _ns1__webDecodeUTF8 *const*, const char *);
SOAP_FMAC3 _ns1__webDecodeUTF8 ** SOAP_FMAC4 soap_in_PointerTo_ns1__webDecodeUTF8(struct soap*, const char*, _ns1__webDecodeUTF8 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__webDecodeUTF8
#define soap_write_PointerTo_ns1__webDecodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__webDecodeUTF8(soap, data),0) || soap_put_PointerTo_ns1__webDecodeUTF8(soap, data, "ns1:webDecodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webDecodeUTF8 ** SOAP_FMAC4 soap_get_PointerTo_ns1__webDecodeUTF8(struct soap*, _ns1__webDecodeUTF8 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__webDecodeUTF8
#define soap_read_PointerTo_ns1__webDecodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__webDecodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__webEncodeUTF8
#define SOAP_TYPE_PointerTo_ns1__webEncodeUTF8 (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__webEncodeUTF8(struct soap*, const char *, int, _ns1__webEncodeUTF8 *const*, const char *);
SOAP_FMAC3 _ns1__webEncodeUTF8 ** SOAP_FMAC4 soap_in_PointerTo_ns1__webEncodeUTF8(struct soap*, const char*, _ns1__webEncodeUTF8 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__webEncodeUTF8
#define soap_write_PointerTo_ns1__webEncodeUTF8(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__webEncodeUTF8(soap, data),0) || soap_put_PointerTo_ns1__webEncodeUTF8(soap, data, "ns1:webEncodeUTF8", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__webEncodeUTF8 ** SOAP_FMAC4 soap_get_PointerTo_ns1__webEncodeUTF8(struct soap*, _ns1__webEncodeUTF8 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__webEncodeUTF8
#define soap_read_PointerTo_ns1__webEncodeUTF8(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__webEncodeUTF8(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__WriteService
#define SOAP_TYPE_PointerTo_ns1__WriteService (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__WriteService(struct soap*, _ns1__WriteService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__WriteService(struct soap*, const char *, int, _ns1__WriteService *const*, const char *);
SOAP_FMAC3 _ns1__WriteService ** SOAP_FMAC4 soap_in_PointerTo_ns1__WriteService(struct soap*, const char*, _ns1__WriteService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__WriteService(struct soap*, _ns1__WriteService *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__WriteService
#define soap_write_PointerTo_ns1__WriteService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__WriteService(soap, data),0) || soap_put_PointerTo_ns1__WriteService(soap, data, "ns1:WriteService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WriteService ** SOAP_FMAC4 soap_get_PointerTo_ns1__WriteService(struct soap*, _ns1__WriteService **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__WriteService
#define soap_read_PointerTo_ns1__WriteService(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__WriteService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__QueryService
#define SOAP_TYPE_PointerTo_ns1__QueryService (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryService(struct soap*, _ns1__QueryService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryService(struct soap*, const char *, int, _ns1__QueryService *const*, const char *);
SOAP_FMAC3 _ns1__QueryService ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryService(struct soap*, const char*, _ns1__QueryService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryService(struct soap*, _ns1__QueryService *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QueryService
#define soap_write_PointerTo_ns1__QueryService(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__QueryService(soap, data),0) || soap_put_PointerTo_ns1__QueryService(soap, data, "ns1:QueryService", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QueryService ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryService(struct soap*, _ns1__QueryService **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QueryService
#define soap_read_PointerTo_ns1__QueryService(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__QueryService(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__base64Binary
#define soap_write_PointerToxsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__base64Binary(soap, data),0) || soap_put_PointerToxsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);

#ifndef soap_read_PointerToxsd__base64Binary
#define soap_read_PointerToxsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__wstring
#define soap_write_PointerTostd__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__wstring(soap, data),0) || soap_put_PointerTostd__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTostd__wstring
#define soap_read_PointerTostd__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
