/* soapStub.h
   Generated by gSOAP 2.8.21 from AccessService.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__QueryService
#define SOAP_TYPE__ns1__QueryService (13)
/* ns1:QueryService */
class SOAP_CMAC _ns1__QueryService
{
public:
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *xmlDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__QueryService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryService() { _ns1__QueryService::soap_default(NULL); }
	virtual ~_ns1__QueryService() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryServiceResponse
#define SOAP_TYPE__ns1__QueryServiceResponse (14)
/* ns1:QueryServiceResponse */
class SOAP_CMAC _ns1__QueryServiceResponse
{
public:
	std::wstring *QueryServiceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__QueryServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryServiceResponse() { _ns1__QueryServiceResponse::soap_default(NULL); }
	virtual ~_ns1__QueryServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WriteService
#define SOAP_TYPE__ns1__WriteService (15)
/* ns1:WriteService */
class SOAP_CMAC _ns1__WriteService
{
public:
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *xmlDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__WriteService */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WriteService() { _ns1__WriteService::soap_default(NULL); }
	virtual ~_ns1__WriteService() { }
};
#endif

#ifndef SOAP_TYPE__ns1__WriteServiceResponse
#define SOAP_TYPE__ns1__WriteServiceResponse (16)
/* ns1:WriteServiceResponse */
class SOAP_CMAC _ns1__WriteServiceResponse
{
public:
	std::wstring *WriteServiceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__WriteServiceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__WriteServiceResponse() { _ns1__WriteServiceResponse::soap_default(NULL); }
	virtual ~_ns1__WriteServiceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__webEncodeUTF8
#define SOAP_TYPE__ns1__webEncodeUTF8 (17)
/* ns1:webEncodeUTF8 */
class SOAP_CMAC _ns1__webEncodeUTF8
{
public:
	std::wstring *str;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__webEncodeUTF8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__webEncodeUTF8() { _ns1__webEncodeUTF8::soap_default(NULL); }
	virtual ~_ns1__webEncodeUTF8() { }
};
#endif

#ifndef SOAP_TYPE__ns1__webEncodeUTF8Response
#define SOAP_TYPE__ns1__webEncodeUTF8Response (18)
/* ns1:webEncodeUTF8Response */
class SOAP_CMAC _ns1__webEncodeUTF8Response
{
public:
	std::wstring *webEncodeUTF8Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE__ns1__webEncodeUTF8Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__webEncodeUTF8Response() { _ns1__webEncodeUTF8Response::soap_default(NULL); }
	virtual ~_ns1__webEncodeUTF8Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1__webDecodeUTF8
#define SOAP_TYPE__ns1__webDecodeUTF8 (19)
/* ns1:webDecodeUTF8 */
class SOAP_CMAC _ns1__webDecodeUTF8
{
public:
	std::wstring *str;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE__ns1__webDecodeUTF8 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__webDecodeUTF8() { _ns1__webDecodeUTF8::soap_default(NULL); }
	virtual ~_ns1__webDecodeUTF8() { }
};
#endif

#ifndef SOAP_TYPE__ns1__webDecodeUTF8Response
#define SOAP_TYPE__ns1__webDecodeUTF8Response (20)
/* ns1:webDecodeUTF8Response */
class SOAP_CMAC _ns1__webDecodeUTF8Response
{
public:
	std::wstring *webDecodeUTF8Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE__ns1__webDecodeUTF8Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__webDecodeUTF8Response() { _ns1__webDecodeUTF8Response::soap_default(NULL); }
	virtual ~_ns1__webDecodeUTF8Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetBase64
#define SOAP_TYPE__ns1__GetBase64 (21)
/* ns1:GetBase64 */
class SOAP_CMAC _ns1__GetBase64
{
public:
	xsd__base64Binary *byt;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE__ns1__GetBase64 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetBase64() { _ns1__GetBase64::soap_default(NULL); }
	virtual ~_ns1__GetBase64() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetBase64Response
#define SOAP_TYPE__ns1__GetBase64Response (22)
/* ns1:GetBase64Response */
class SOAP_CMAC _ns1__GetBase64Response
{
public:
	std::wstring *GetBase64Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique type id SOAP_TYPE__ns1__GetBase64Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetBase64Response() { _ns1__GetBase64Response::soap_default(NULL); }
	virtual ~_ns1__GetBase64Response() { }
};
#endif

#ifndef SOAP_TYPE___ns1__QueryService
#define SOAP_TYPE___ns1__QueryService (29)
/* Operation wrapper: */
struct __ns1__QueryService
{
public:
	_ns1__QueryService *ns1__QueryService;	/* optional element of type ns1:QueryService */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE___ns1__QueryService */
};
#endif

#ifndef SOAP_TYPE___ns1__WriteService
#define SOAP_TYPE___ns1__WriteService (33)
/* Operation wrapper: */
struct __ns1__WriteService
{
public:
	_ns1__WriteService *ns1__WriteService;	/* optional element of type ns1:WriteService */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE___ns1__WriteService */
};
#endif

#ifndef SOAP_TYPE___ns1__webEncodeUTF8
#define SOAP_TYPE___ns1__webEncodeUTF8 (37)
/* Operation wrapper: */
struct __ns1__webEncodeUTF8
{
public:
	_ns1__webEncodeUTF8 *ns1__webEncodeUTF8;	/* optional element of type ns1:webEncodeUTF8 */
public:
	int soap_type() const { return 37; } /* = unique type id SOAP_TYPE___ns1__webEncodeUTF8 */
};
#endif

#ifndef SOAP_TYPE___ns1__webDecodeUTF8
#define SOAP_TYPE___ns1__webDecodeUTF8 (41)
/* Operation wrapper: */
struct __ns1__webDecodeUTF8
{
public:
	_ns1__webDecodeUTF8 *ns1__webDecodeUTF8;	/* optional element of type ns1:webDecodeUTF8 */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE___ns1__webDecodeUTF8 */
};
#endif

#ifndef SOAP_TYPE___ns1__GetBase64
#define SOAP_TYPE___ns1__GetBase64 (45)
/* Operation wrapper: */
struct __ns1__GetBase64
{
public:
	_ns1__GetBase64 *ns1__GetBase64;	/* optional element of type ns1:GetBase64 */
public:
	int soap_type() const { return 45; } /* = unique type id SOAP_TYPE___ns1__GetBase64 */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryService_
#define SOAP_TYPE___ns1__QueryService_ (47)
/* Operation wrapper: */
struct __ns1__QueryService_
{
public:
	_ns1__QueryService *ns1__QueryService;	/* optional element of type ns1:QueryService */
public:
	int soap_type() const { return 47; } /* = unique type id SOAP_TYPE___ns1__QueryService_ */
};
#endif

#ifndef SOAP_TYPE___ns1__WriteService_
#define SOAP_TYPE___ns1__WriteService_ (49)
/* Operation wrapper: */
struct __ns1__WriteService_
{
public:
	_ns1__WriteService *ns1__WriteService;	/* optional element of type ns1:WriteService */
public:
	int soap_type() const { return 49; } /* = unique type id SOAP_TYPE___ns1__WriteService_ */
};
#endif

#ifndef SOAP_TYPE___ns1__webEncodeUTF8_
#define SOAP_TYPE___ns1__webEncodeUTF8_ (51)
/* Operation wrapper: */
struct __ns1__webEncodeUTF8_
{
public:
	_ns1__webEncodeUTF8 *ns1__webEncodeUTF8;	/* optional element of type ns1:webEncodeUTF8 */
public:
	int soap_type() const { return 51; } /* = unique type id SOAP_TYPE___ns1__webEncodeUTF8_ */
};
#endif

#ifndef SOAP_TYPE___ns1__webDecodeUTF8_
#define SOAP_TYPE___ns1__webDecodeUTF8_ (53)
/* Operation wrapper: */
struct __ns1__webDecodeUTF8_
{
public:
	_ns1__webDecodeUTF8 *ns1__webDecodeUTF8;	/* optional element of type ns1:webDecodeUTF8 */
public:
	int soap_type() const { return 53; } /* = unique type id SOAP_TYPE___ns1__webDecodeUTF8_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetBase64_
#define SOAP_TYPE___ns1__GetBase64_ (55)
/* Operation wrapper: */
struct __ns1__GetBase64_
{
public:
	_ns1__GetBase64 *ns1__GetBase64;	/* optional element of type ns1:GetBase64 */
public:
	int soap_type() const { return 55; } /* = unique type id SOAP_TYPE___ns1__GetBase64_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (56)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (57)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (59)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (62)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (63)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 63; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
