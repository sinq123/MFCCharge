/* soapC.cpp
   Generated by gSOAP 2.8.21 from TmriOutAccess.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.21 2021-01-09 12:53:08 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__zjqueryObjectOut:
		return soap_in_PointerTo_ns1__zjqueryObjectOut(soap, NULL, NULL, "ns1:zjqueryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__GetLoginParm:
		return soap_in_PointerTo_ns1__GetLoginParm(soap, NULL, NULL, "ns1:GetLoginParm");
	case SOAP_TYPE_PointerTo_ns1__NetworkingWriteObjectOut:
		return soap_in_PointerTo_ns1__NetworkingWriteObjectOut(soap, NULL, NULL, "ns1:NetworkingWriteObjectOut");
	case SOAP_TYPE_PointerTo_ns1__NetworkingQueryObjectOut:
		return soap_in_PointerTo_ns1__NetworkingQueryObjectOut(soap, NULL, NULL, "ns1:NetworkingQueryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__writeObjectOut:
		return soap_in_PointerTo_ns1__writeObjectOut(soap, NULL, NULL, "ns1:writeObjectOut");
	case SOAP_TYPE_PointerTo_ns1__queryObjectOut:
		return soap_in_PointerTo_ns1__queryObjectOut(soap, NULL, NULL, "ns1:queryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__GetVer:
		return soap_in_PointerTo_ns1__GetVer(soap, NULL, NULL, "ns1:GetVer");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:zjqueryObjectOutResponse"))
		{	*type = SOAP_TYPE__ns1__zjqueryObjectOutResponse;
			return soap_in__ns1__zjqueryObjectOutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zjqueryObjectOut"))
		{	*type = SOAP_TYPE__ns1__zjqueryObjectOut;
			return soap_in__ns1__zjqueryObjectOut(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLoginParmResponse"))
		{	*type = SOAP_TYPE__ns1__GetLoginParmResponse;
			return soap_in__ns1__GetLoginParmResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetLoginParm"))
		{	*type = SOAP_TYPE__ns1__GetLoginParm;
			return soap_in__ns1__GetLoginParm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NetworkingWriteObjectOutResponse"))
		{	*type = SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse;
			return soap_in__ns1__NetworkingWriteObjectOutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NetworkingWriteObjectOut"))
		{	*type = SOAP_TYPE__ns1__NetworkingWriteObjectOut;
			return soap_in__ns1__NetworkingWriteObjectOut(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NetworkingQueryObjectOutResponse"))
		{	*type = SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse;
			return soap_in__ns1__NetworkingQueryObjectOutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NetworkingQueryObjectOut"))
		{	*type = SOAP_TYPE__ns1__NetworkingQueryObjectOut;
			return soap_in__ns1__NetworkingQueryObjectOut(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:writeObjectOutResponse"))
		{	*type = SOAP_TYPE__ns1__writeObjectOutResponse;
			return soap_in__ns1__writeObjectOutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:writeObjectOut"))
		{	*type = SOAP_TYPE__ns1__writeObjectOut;
			return soap_in__ns1__writeObjectOut(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:queryObjectOutResponse"))
		{	*type = SOAP_TYPE__ns1__queryObjectOutResponse;
			return soap_in__ns1__queryObjectOutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:queryObjectOut"))
		{	*type = SOAP_TYPE__ns1__queryObjectOut;
			return soap_in__ns1__queryObjectOut(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVerResponse"))
		{	*type = SOAP_TYPE__ns1__GetVerResponse;
			return soap_in__ns1__GetVerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVer"))
		{	*type = SOAP_TYPE__ns1__GetVer;
			return soap_in__ns1__GetVer(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__zjqueryObjectOutResponse:
		return ((_ns1__zjqueryObjectOutResponse *)ptr)->soap_out(soap, "ns1:zjqueryObjectOutResponse", id, NULL);
	case SOAP_TYPE__ns1__zjqueryObjectOut:
		return ((_ns1__zjqueryObjectOut *)ptr)->soap_out(soap, "ns1:zjqueryObjectOut", id, NULL);
	case SOAP_TYPE__ns1__GetLoginParmResponse:
		return ((_ns1__GetLoginParmResponse *)ptr)->soap_out(soap, "ns1:GetLoginParmResponse", id, NULL);
	case SOAP_TYPE__ns1__GetLoginParm:
		return ((_ns1__GetLoginParm *)ptr)->soap_out(soap, "ns1:GetLoginParm", id, NULL);
	case SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse:
		return ((_ns1__NetworkingWriteObjectOutResponse *)ptr)->soap_out(soap, "ns1:NetworkingWriteObjectOutResponse", id, NULL);
	case SOAP_TYPE__ns1__NetworkingWriteObjectOut:
		return ((_ns1__NetworkingWriteObjectOut *)ptr)->soap_out(soap, "ns1:NetworkingWriteObjectOut", id, NULL);
	case SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse:
		return ((_ns1__NetworkingQueryObjectOutResponse *)ptr)->soap_out(soap, "ns1:NetworkingQueryObjectOutResponse", id, NULL);
	case SOAP_TYPE__ns1__NetworkingQueryObjectOut:
		return ((_ns1__NetworkingQueryObjectOut *)ptr)->soap_out(soap, "ns1:NetworkingQueryObjectOut", id, NULL);
	case SOAP_TYPE__ns1__writeObjectOutResponse:
		return ((_ns1__writeObjectOutResponse *)ptr)->soap_out(soap, "ns1:writeObjectOutResponse", id, NULL);
	case SOAP_TYPE__ns1__writeObjectOut:
		return ((_ns1__writeObjectOut *)ptr)->soap_out(soap, "ns1:writeObjectOut", id, NULL);
	case SOAP_TYPE__ns1__queryObjectOutResponse:
		return ((_ns1__queryObjectOutResponse *)ptr)->soap_out(soap, "ns1:queryObjectOutResponse", id, NULL);
	case SOAP_TYPE__ns1__queryObjectOut:
		return ((_ns1__queryObjectOut *)ptr)->soap_out(soap, "ns1:queryObjectOut", id, NULL);
	case SOAP_TYPE__ns1__GetVerResponse:
		return ((_ns1__GetVerResponse *)ptr)->soap_out(soap, "ns1:GetVerResponse", id, NULL);
	case SOAP_TYPE__ns1__GetVer:
		return ((_ns1__GetVer *)ptr)->soap_out(soap, "ns1:GetVer", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__zjqueryObjectOut:
		return soap_out_PointerTo_ns1__zjqueryObjectOut(soap, tag, id, (_ns1__zjqueryObjectOut *const*)ptr, "ns1:zjqueryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__GetLoginParm:
		return soap_out_PointerTo_ns1__GetLoginParm(soap, tag, id, (_ns1__GetLoginParm *const*)ptr, "ns1:GetLoginParm");
	case SOAP_TYPE_PointerTo_ns1__NetworkingWriteObjectOut:
		return soap_out_PointerTo_ns1__NetworkingWriteObjectOut(soap, tag, id, (_ns1__NetworkingWriteObjectOut *const*)ptr, "ns1:NetworkingWriteObjectOut");
	case SOAP_TYPE_PointerTo_ns1__NetworkingQueryObjectOut:
		return soap_out_PointerTo_ns1__NetworkingQueryObjectOut(soap, tag, id, (_ns1__NetworkingQueryObjectOut *const*)ptr, "ns1:NetworkingQueryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__writeObjectOut:
		return soap_out_PointerTo_ns1__writeObjectOut(soap, tag, id, (_ns1__writeObjectOut *const*)ptr, "ns1:writeObjectOut");
	case SOAP_TYPE_PointerTo_ns1__queryObjectOut:
		return soap_out_PointerTo_ns1__queryObjectOut(soap, tag, id, (_ns1__queryObjectOut *const*)ptr, "ns1:queryObjectOut");
	case SOAP_TYPE_PointerTo_ns1__GetVer:
		return soap_out_PointerTo_ns1__GetVer(soap, tag, id, (_ns1__GetVer *const*)ptr, "ns1:GetVer");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__ns1__zjqueryObjectOutResponse:
		((_ns1__zjqueryObjectOutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__zjqueryObjectOut:
		((_ns1__zjqueryObjectOut *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLoginParmResponse:
		((_ns1__GetLoginParmResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetLoginParm:
		((_ns1__GetLoginParm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse:
		((_ns1__NetworkingWriteObjectOutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__NetworkingWriteObjectOut:
		((_ns1__NetworkingWriteObjectOut *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse:
		((_ns1__NetworkingQueryObjectOutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__NetworkingQueryObjectOut:
		((_ns1__NetworkingQueryObjectOut *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__writeObjectOutResponse:
		((_ns1__writeObjectOutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__writeObjectOut:
		((_ns1__writeObjectOut *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__queryObjectOutResponse:
		((_ns1__queryObjectOutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__queryObjectOut:
		((_ns1__queryObjectOut *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVerResponse:
		((_ns1__GetVerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVer:
		((_ns1__GetVer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__zjqueryObjectOut_:
		soap_serialize___ns1__zjqueryObjectOut_(soap, (const struct __ns1__zjqueryObjectOut_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLoginParm_:
		soap_serialize___ns1__GetLoginParm_(soap, (const struct __ns1__GetLoginParm_ *)ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut_:
		soap_serialize___ns1__NetworkingWriteObjectOut_(soap, (const struct __ns1__NetworkingWriteObjectOut_ *)ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut_:
		soap_serialize___ns1__NetworkingQueryObjectOut_(soap, (const struct __ns1__NetworkingQueryObjectOut_ *)ptr);
		break;
	case SOAP_TYPE___ns1__writeObjectOut_:
		soap_serialize___ns1__writeObjectOut_(soap, (const struct __ns1__writeObjectOut_ *)ptr);
		break;
	case SOAP_TYPE___ns1__queryObjectOut_:
		soap_serialize___ns1__queryObjectOut_(soap, (const struct __ns1__queryObjectOut_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVer_:
		soap_serialize___ns1__GetVer_(soap, (const struct __ns1__GetVer_ *)ptr);
		break;
	case SOAP_TYPE___ns1__zjqueryObjectOut:
		soap_serialize___ns1__zjqueryObjectOut(soap, (const struct __ns1__zjqueryObjectOut *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLoginParm:
		soap_serialize___ns1__GetLoginParm(soap, (const struct __ns1__GetLoginParm *)ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut:
		soap_serialize___ns1__NetworkingWriteObjectOut(soap, (const struct __ns1__NetworkingWriteObjectOut *)ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut:
		soap_serialize___ns1__NetworkingQueryObjectOut(soap, (const struct __ns1__NetworkingQueryObjectOut *)ptr);
		break;
	case SOAP_TYPE___ns1__writeObjectOut:
		soap_serialize___ns1__writeObjectOut(soap, (const struct __ns1__writeObjectOut *)ptr);
		break;
	case SOAP_TYPE___ns1__queryObjectOut:
		soap_serialize___ns1__queryObjectOut(soap, (const struct __ns1__queryObjectOut *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVer:
		soap_serialize___ns1__GetVer(soap, (const struct __ns1__GetVer *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__zjqueryObjectOut:
		soap_serialize_PointerTo_ns1__zjqueryObjectOut(soap, (_ns1__zjqueryObjectOut *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetLoginParm:
		soap_serialize_PointerTo_ns1__GetLoginParm(soap, (_ns1__GetLoginParm *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__NetworkingWriteObjectOut:
		soap_serialize_PointerTo_ns1__NetworkingWriteObjectOut(soap, (_ns1__NetworkingWriteObjectOut *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__NetworkingQueryObjectOut:
		soap_serialize_PointerTo_ns1__NetworkingQueryObjectOut(soap, (_ns1__NetworkingQueryObjectOut *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__writeObjectOut:
		soap_serialize_PointerTo_ns1__writeObjectOut(soap, (_ns1__writeObjectOut *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__queryObjectOut:
		soap_serialize_PointerTo_ns1__queryObjectOut(soap, (_ns1__queryObjectOut *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVer:
		soap_serialize_PointerTo_ns1__GetVer(soap, (_ns1__GetVer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVer:
		return (void*)soap_instantiate__ns1__GetVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVerResponse:
		return (void*)soap_instantiate__ns1__GetVerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__queryObjectOut:
		return (void*)soap_instantiate__ns1__queryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__queryObjectOutResponse:
		return (void*)soap_instantiate__ns1__queryObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__writeObjectOut:
		return (void*)soap_instantiate__ns1__writeObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__writeObjectOutResponse:
		return (void*)soap_instantiate__ns1__writeObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__NetworkingQueryObjectOut:
		return (void*)soap_instantiate__ns1__NetworkingQueryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse:
		return (void*)soap_instantiate__ns1__NetworkingQueryObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__NetworkingWriteObjectOut:
		return (void*)soap_instantiate__ns1__NetworkingWriteObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse:
		return (void*)soap_instantiate__ns1__NetworkingWriteObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLoginParm:
		return (void*)soap_instantiate__ns1__GetLoginParm(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetLoginParmResponse:
		return (void*)soap_instantiate__ns1__GetLoginParmResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zjqueryObjectOut:
		return (void*)soap_instantiate__ns1__zjqueryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zjqueryObjectOutResponse:
		return (void*)soap_instantiate__ns1__zjqueryObjectOutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVer:
		return (void*)soap_instantiate___ns1__GetVer(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__queryObjectOut:
		return (void*)soap_instantiate___ns1__queryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__writeObjectOut:
		return (void*)soap_instantiate___ns1__writeObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut:
		return (void*)soap_instantiate___ns1__NetworkingQueryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut:
		return (void*)soap_instantiate___ns1__NetworkingWriteObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLoginParm:
		return (void*)soap_instantiate___ns1__GetLoginParm(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zjqueryObjectOut:
		return (void*)soap_instantiate___ns1__zjqueryObjectOut(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVer_:
		return (void*)soap_instantiate___ns1__GetVer_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__queryObjectOut_:
		return (void*)soap_instantiate___ns1__queryObjectOut_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__writeObjectOut_:
		return (void*)soap_instantiate___ns1__writeObjectOut_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut_:
		return (void*)soap_instantiate___ns1__NetworkingQueryObjectOut_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut_:
		return (void*)soap_instantiate___ns1__NetworkingWriteObjectOut_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLoginParm_:
		return (void*)soap_instantiate___ns1__GetLoginParm_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zjqueryObjectOut_:
		return (void*)soap_instantiate___ns1__zjqueryObjectOut_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetVer:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetVer*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetVerResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetVerResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetVerResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__queryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((_ns1__queryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__queryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE__ns1__queryObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__queryObjectOutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__queryObjectOutResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__writeObjectOut:
		if (p->size < 0)
			SOAP_DELETE((_ns1__writeObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__writeObjectOut*)p->ptr);
		break;
	case SOAP_TYPE__ns1__writeObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__writeObjectOutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__writeObjectOutResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__NetworkingQueryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((_ns1__NetworkingQueryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__NetworkingQueryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__NetworkingQueryObjectOutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__NetworkingQueryObjectOutResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__NetworkingWriteObjectOut:
		if (p->size < 0)
			SOAP_DELETE((_ns1__NetworkingWriteObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__NetworkingWriteObjectOut*)p->ptr);
		break;
	case SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__NetworkingWriteObjectOutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__NetworkingWriteObjectOutResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLoginParm:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLoginParm*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLoginParm*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetLoginParmResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetLoginParmResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetLoginParmResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__zjqueryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((_ns1__zjqueryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__zjqueryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE__ns1__zjqueryObjectOutResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__zjqueryObjectOutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__zjqueryObjectOutResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetVer:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetVer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetVer*)p->ptr);
		break;
	case SOAP_TYPE___ns1__queryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__queryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__queryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE___ns1__writeObjectOut:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__writeObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__writeObjectOut*)p->ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__NetworkingQueryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__NetworkingQueryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__NetworkingWriteObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__NetworkingWriteObjectOut*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLoginParm:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLoginParm*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLoginParm*)p->ptr);
		break;
	case SOAP_TYPE___ns1__zjqueryObjectOut:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__zjqueryObjectOut*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__zjqueryObjectOut*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetVer_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetVer_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetVer_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__queryObjectOut_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__queryObjectOut_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__queryObjectOut_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__writeObjectOut_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__writeObjectOut_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__writeObjectOut_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingQueryObjectOut_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__NetworkingQueryObjectOut_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__NetworkingQueryObjectOut_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__NetworkingWriteObjectOut_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__NetworkingWriteObjectOut_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__NetworkingWriteObjectOut_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLoginParm_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLoginParm_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLoginParm_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__zjqueryObjectOut_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__zjqueryObjectOut_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__zjqueryObjectOut_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::wstring, n);
		if (size)
			*size = n * sizeof(std::wstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

void _ns1__zjqueryObjectOutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__zjqueryObjectOutResponse::zjqueryObjectOutResult = NULL;
	/* transient soap skipped */
}

void _ns1__zjqueryObjectOutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__zjqueryObjectOutResponse::zjqueryObjectOutResult);
	/* transient soap skipped */
#endif
}

int _ns1__zjqueryObjectOutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zjqueryObjectOutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zjqueryObjectOutResponse(struct soap *soap, const char *tag, int id, const _ns1__zjqueryObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zjqueryObjectOutResponse), type))
		return soap->error;
	if (a->zjqueryObjectOutResult)
		soap_element_result(soap, "ns1:zjqueryObjectOutResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:zjqueryObjectOutResult", -1, &(a->_ns1__zjqueryObjectOutResponse::zjqueryObjectOutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__zjqueryObjectOutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__zjqueryObjectOutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zjqueryObjectOutResponse * SOAP_FMAC4 soap_in__ns1__zjqueryObjectOutResponse(struct soap *soap, const char *tag, _ns1__zjqueryObjectOutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zjqueryObjectOutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zjqueryObjectOutResponse, sizeof(_ns1__zjqueryObjectOutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__zjqueryObjectOutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__zjqueryObjectOutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_zjqueryObjectOutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_zjqueryObjectOutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:zjqueryObjectOutResult", &(a->_ns1__zjqueryObjectOutResponse::zjqueryObjectOutResult), "xsd:string"))
				{	soap_flag_zjqueryObjectOutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:zjqueryObjectOutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__zjqueryObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zjqueryObjectOutResponse, 0, sizeof(_ns1__zjqueryObjectOutResponse), 0, soap_copy__ns1__zjqueryObjectOutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__zjqueryObjectOutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__zjqueryObjectOutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:zjqueryObjectOutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zjqueryObjectOutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zjqueryObjectOutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zjqueryObjectOutResponse * SOAP_FMAC4 soap_get__ns1__zjqueryObjectOutResponse(struct soap *soap, _ns1__zjqueryObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zjqueryObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__zjqueryObjectOutResponse * SOAP_FMAC2 soap_instantiate__ns1__zjqueryObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zjqueryObjectOutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__zjqueryObjectOutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__zjqueryObjectOutResponse);
		if (size)
			*size = sizeof(_ns1__zjqueryObjectOutResponse);
		((_ns1__zjqueryObjectOutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__zjqueryObjectOutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__zjqueryObjectOutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__zjqueryObjectOutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__zjqueryObjectOutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__zjqueryObjectOutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__zjqueryObjectOutResponse %p -> %p\n", q, p));
	*(_ns1__zjqueryObjectOutResponse*)p = *(_ns1__zjqueryObjectOutResponse*)q;
}

void _ns1__zjqueryObjectOut::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__zjqueryObjectOut::isSucceed);
	this->_ns1__zjqueryObjectOut::jkxlh = NULL;
	this->_ns1__zjqueryObjectOut::jkid = NULL;
	this->_ns1__zjqueryObjectOut::QueryUTF8XmlDoc = NULL;
	/* transient soap skipped */
}

void _ns1__zjqueryObjectOut::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__zjqueryObjectOut::jkxlh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__zjqueryObjectOut::jkid);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__zjqueryObjectOut::QueryUTF8XmlDoc);
	/* transient soap skipped */
#endif
}

int _ns1__zjqueryObjectOut::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zjqueryObjectOut(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zjqueryObjectOut(struct soap *soap, const char *tag, int id, const _ns1__zjqueryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zjqueryObjectOut), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:isSucceed", -1, &(a->_ns1__zjqueryObjectOut::isSucceed), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkxlh", -1, &(a->_ns1__zjqueryObjectOut::jkxlh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkid", -1, &(a->_ns1__zjqueryObjectOut::jkid), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlDoc", -1, &(a->_ns1__zjqueryObjectOut::QueryUTF8XmlDoc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__zjqueryObjectOut::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__zjqueryObjectOut(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zjqueryObjectOut * SOAP_FMAC4 soap_in__ns1__zjqueryObjectOut(struct soap *soap, const char *tag, _ns1__zjqueryObjectOut *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zjqueryObjectOut *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zjqueryObjectOut, sizeof(_ns1__zjqueryObjectOut), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__zjqueryObjectOut)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__zjqueryObjectOut *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_isSucceed1 = 1;
	size_t soap_flag_jkxlh1 = 1;
	size_t soap_flag_jkid1 = 1;
	size_t soap_flag_QueryUTF8XmlDoc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isSucceed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:isSucceed", &(a->_ns1__zjqueryObjectOut::isSucceed), "xsd:int"))
				{	soap_flag_isSucceed1--;
					continue;
				}
			if (soap_flag_jkxlh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkxlh", &(a->_ns1__zjqueryObjectOut::jkxlh), "xsd:string"))
				{	soap_flag_jkxlh1--;
					continue;
				}
			if (soap_flag_jkid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkid", &(a->_ns1__zjqueryObjectOut::jkid), "xsd:string"))
				{	soap_flag_jkid1--;
					continue;
				}
			if (soap_flag_QueryUTF8XmlDoc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlDoc", &(a->_ns1__zjqueryObjectOut::QueryUTF8XmlDoc), "xsd:string"))
				{	soap_flag_QueryUTF8XmlDoc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__zjqueryObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zjqueryObjectOut, 0, sizeof(_ns1__zjqueryObjectOut), 0, soap_copy__ns1__zjqueryObjectOut);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isSucceed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__zjqueryObjectOut::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__zjqueryObjectOut);
	if (this->soap_out(soap, tag?tag:"ns1:zjqueryObjectOut", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zjqueryObjectOut::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zjqueryObjectOut(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zjqueryObjectOut * SOAP_FMAC4 soap_get__ns1__zjqueryObjectOut(struct soap *soap, _ns1__zjqueryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zjqueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__zjqueryObjectOut * SOAP_FMAC2 soap_instantiate__ns1__zjqueryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zjqueryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__zjqueryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__zjqueryObjectOut);
		if (size)
			*size = sizeof(_ns1__zjqueryObjectOut);
		((_ns1__zjqueryObjectOut*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__zjqueryObjectOut, n);
		if (size)
			*size = n * sizeof(_ns1__zjqueryObjectOut);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__zjqueryObjectOut*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__zjqueryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__zjqueryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__zjqueryObjectOut %p -> %p\n", q, p));
	*(_ns1__zjqueryObjectOut*)p = *(_ns1__zjqueryObjectOut*)q;
}

void _ns1__GetLoginParmResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLoginParmResponse::GetLoginParmResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetLoginParmResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetLoginParmResponse::GetLoginParmResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetLoginParmResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLoginParmResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLoginParmResponse(struct soap *soap, const char *tag, int id, const _ns1__GetLoginParmResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLoginParmResponse), type))
		return soap->error;
	if (a->GetLoginParmResult)
		soap_element_result(soap, "ns1:GetLoginParmResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:GetLoginParmResult", -1, &(a->_ns1__GetLoginParmResponse::GetLoginParmResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLoginParmResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLoginParmResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLoginParmResponse * SOAP_FMAC4 soap_in__ns1__GetLoginParmResponse(struct soap *soap, const char *tag, _ns1__GetLoginParmResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLoginParmResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLoginParmResponse, sizeof(_ns1__GetLoginParmResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLoginParmResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLoginParmResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLoginParmResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLoginParmResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:GetLoginParmResult", &(a->_ns1__GetLoginParmResponse::GetLoginParmResult), "xsd:string"))
				{	soap_flag_GetLoginParmResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetLoginParmResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLoginParmResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLoginParmResponse, 0, sizeof(_ns1__GetLoginParmResponse), 0, soap_copy__ns1__GetLoginParmResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetLoginParmResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLoginParmResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetLoginParmResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLoginParmResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLoginParmResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLoginParmResponse * SOAP_FMAC4 soap_get__ns1__GetLoginParmResponse(struct soap *soap, _ns1__GetLoginParmResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLoginParmResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLoginParmResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLoginParmResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLoginParmResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLoginParmResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLoginParmResponse);
		if (size)
			*size = sizeof(_ns1__GetLoginParmResponse);
		((_ns1__GetLoginParmResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLoginParmResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetLoginParmResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLoginParmResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLoginParmResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLoginParmResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLoginParmResponse %p -> %p\n", q, p));
	*(_ns1__GetLoginParmResponse*)p = *(_ns1__GetLoginParmResponse*)q;
}

void _ns1__GetLoginParm::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetLoginParm::_USCORECYYID = NULL;
	this->_ns1__GetLoginParm::mac = NULL;
	this->_ns1__GetLoginParm::imie = NULL;
	this->_ns1__GetLoginParm::ip = NULL;
	/* transient soap skipped */
}

void _ns1__GetLoginParm::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetLoginParm::_USCORECYYID);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetLoginParm::mac);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetLoginParm::imie);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetLoginParm::ip);
	/* transient soap skipped */
#endif
}

int _ns1__GetLoginParm::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetLoginParm(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLoginParm(struct soap *soap, const char *tag, int id, const _ns1__GetLoginParm *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetLoginParm), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:_CYYID", -1, &(a->_ns1__GetLoginParm::_USCORECYYID), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:mac", -1, &(a->_ns1__GetLoginParm::mac), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:imie", -1, &(a->_ns1__GetLoginParm::imie), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:ip", -1, &(a->_ns1__GetLoginParm::ip), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetLoginParm::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetLoginParm(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetLoginParm * SOAP_FMAC4 soap_in__ns1__GetLoginParm(struct soap *soap, const char *tag, _ns1__GetLoginParm *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetLoginParm *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetLoginParm, sizeof(_ns1__GetLoginParm), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetLoginParm)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetLoginParm *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag__USCORECYYID1 = 1;
	size_t soap_flag_mac1 = 1;
	size_t soap_flag_imie1 = 1;
	size_t soap_flag_ip1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__USCORECYYID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:_CYYID", &(a->_ns1__GetLoginParm::_USCORECYYID), "xsd:string"))
				{	soap_flag__USCORECYYID1--;
					continue;
				}
			if (soap_flag_mac1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:mac", &(a->_ns1__GetLoginParm::mac), "xsd:string"))
				{	soap_flag_mac1--;
					continue;
				}
			if (soap_flag_imie1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:imie", &(a->_ns1__GetLoginParm::imie), "xsd:string"))
				{	soap_flag_imie1--;
					continue;
				}
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:ip", &(a->_ns1__GetLoginParm::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetLoginParm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetLoginParm, 0, sizeof(_ns1__GetLoginParm), 0, soap_copy__ns1__GetLoginParm);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetLoginParm::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetLoginParm);
	if (this->soap_out(soap, tag?tag:"ns1:GetLoginParm", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetLoginParm::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetLoginParm(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetLoginParm * SOAP_FMAC4 soap_get__ns1__GetLoginParm(struct soap *soap, _ns1__GetLoginParm *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetLoginParm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetLoginParm * SOAP_FMAC2 soap_instantiate__ns1__GetLoginParm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetLoginParm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetLoginParm, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetLoginParm);
		if (size)
			*size = sizeof(_ns1__GetLoginParm);
		((_ns1__GetLoginParm*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetLoginParm, n);
		if (size)
			*size = n * sizeof(_ns1__GetLoginParm);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetLoginParm*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetLoginParm*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLoginParm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetLoginParm %p -> %p\n", q, p));
	*(_ns1__GetLoginParm*)p = *(_ns1__GetLoginParm*)q;
}

void _ns1__NetworkingWriteObjectOutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__NetworkingWriteObjectOutResponse::NetworkingWriteObjectOutResult = NULL;
	/* transient soap skipped */
}

void _ns1__NetworkingWriteObjectOutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingWriteObjectOutResponse::NetworkingWriteObjectOutResult);
	/* transient soap skipped */
#endif
}

int _ns1__NetworkingWriteObjectOutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__NetworkingWriteObjectOutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NetworkingWriteObjectOutResponse(struct soap *soap, const char *tag, int id, const _ns1__NetworkingWriteObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse), type))
		return soap->error;
	if (a->NetworkingWriteObjectOutResult)
		soap_element_result(soap, "ns1:NetworkingWriteObjectOutResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:NetworkingWriteObjectOutResult", -1, &(a->_ns1__NetworkingWriteObjectOutResponse::NetworkingWriteObjectOutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__NetworkingWriteObjectOutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__NetworkingWriteObjectOutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOutResponse * SOAP_FMAC4 soap_in__ns1__NetworkingWriteObjectOutResponse(struct soap *soap, const char *tag, _ns1__NetworkingWriteObjectOutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__NetworkingWriteObjectOutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse, sizeof(_ns1__NetworkingWriteObjectOutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__NetworkingWriteObjectOutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_NetworkingWriteObjectOutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NetworkingWriteObjectOutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:NetworkingWriteObjectOutResult", &(a->_ns1__NetworkingWriteObjectOutResponse::NetworkingWriteObjectOutResult), "xsd:string"))
				{	soap_flag_NetworkingWriteObjectOutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:NetworkingWriteObjectOutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__NetworkingWriteObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse, 0, sizeof(_ns1__NetworkingWriteObjectOutResponse), 0, soap_copy__ns1__NetworkingWriteObjectOutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__NetworkingWriteObjectOutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:NetworkingWriteObjectOutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__NetworkingWriteObjectOutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__NetworkingWriteObjectOutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOutResponse * SOAP_FMAC4 soap_get__ns1__NetworkingWriteObjectOutResponse(struct soap *soap, _ns1__NetworkingWriteObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__NetworkingWriteObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__NetworkingWriteObjectOutResponse * SOAP_FMAC2 soap_instantiate__ns1__NetworkingWriteObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__NetworkingWriteObjectOutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__NetworkingWriteObjectOutResponse);
		if (size)
			*size = sizeof(_ns1__NetworkingWriteObjectOutResponse);
		((_ns1__NetworkingWriteObjectOutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__NetworkingWriteObjectOutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__NetworkingWriteObjectOutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__NetworkingWriteObjectOutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__NetworkingWriteObjectOutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__NetworkingWriteObjectOutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__NetworkingWriteObjectOutResponse %p -> %p\n", q, p));
	*(_ns1__NetworkingWriteObjectOutResponse*)p = *(_ns1__NetworkingWriteObjectOutResponse*)q;
}

void _ns1__NetworkingWriteObjectOut::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__NetworkingWriteObjectOut::xtlb = NULL;
	this->_ns1__NetworkingWriteObjectOut::jkxlh = NULL;
	this->_ns1__NetworkingWriteObjectOut::jkid = NULL;
	this->_ns1__NetworkingWriteObjectOut::WriteUTF8XmlJsonDoc = NULL;
	/* transient soap skipped */
}

void _ns1__NetworkingWriteObjectOut::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingWriteObjectOut::xtlb);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingWriteObjectOut::jkxlh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingWriteObjectOut::jkid);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingWriteObjectOut::WriteUTF8XmlJsonDoc);
	/* transient soap skipped */
#endif
}

int _ns1__NetworkingWriteObjectOut::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__NetworkingWriteObjectOut(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, int id, const _ns1__NetworkingWriteObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__NetworkingWriteObjectOut), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:xtlb", -1, &(a->_ns1__NetworkingWriteObjectOut::xtlb), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkxlh", -1, &(a->_ns1__NetworkingWriteObjectOut::jkxlh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkid", -1, &(a->_ns1__NetworkingWriteObjectOut::jkid), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:WriteUTF8XmlJsonDoc", -1, &(a->_ns1__NetworkingWriteObjectOut::WriteUTF8XmlJsonDoc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__NetworkingWriteObjectOut::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__NetworkingWriteObjectOut(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOut * SOAP_FMAC4 soap_in__ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, _ns1__NetworkingWriteObjectOut *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__NetworkingWriteObjectOut *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__NetworkingWriteObjectOut, sizeof(_ns1__NetworkingWriteObjectOut), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__NetworkingWriteObjectOut)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__NetworkingWriteObjectOut *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xtlb1 = 1;
	size_t soap_flag_jkxlh1 = 1;
	size_t soap_flag_jkid1 = 1;
	size_t soap_flag_WriteUTF8XmlJsonDoc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xtlb1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:xtlb", &(a->_ns1__NetworkingWriteObjectOut::xtlb), "xsd:string"))
				{	soap_flag_xtlb1--;
					continue;
				}
			if (soap_flag_jkxlh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkxlh", &(a->_ns1__NetworkingWriteObjectOut::jkxlh), "xsd:string"))
				{	soap_flag_jkxlh1--;
					continue;
				}
			if (soap_flag_jkid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkid", &(a->_ns1__NetworkingWriteObjectOut::jkid), "xsd:string"))
				{	soap_flag_jkid1--;
					continue;
				}
			if (soap_flag_WriteUTF8XmlJsonDoc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:WriteUTF8XmlJsonDoc", &(a->_ns1__NetworkingWriteObjectOut::WriteUTF8XmlJsonDoc), "xsd:string"))
				{	soap_flag_WriteUTF8XmlJsonDoc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__NetworkingWriteObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__NetworkingWriteObjectOut, 0, sizeof(_ns1__NetworkingWriteObjectOut), 0, soap_copy__ns1__NetworkingWriteObjectOut);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__NetworkingWriteObjectOut::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__NetworkingWriteObjectOut);
	if (this->soap_out(soap, tag?tag:"ns1:NetworkingWriteObjectOut", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__NetworkingWriteObjectOut::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__NetworkingWriteObjectOut(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOut * SOAP_FMAC4 soap_get__ns1__NetworkingWriteObjectOut(struct soap *soap, _ns1__NetworkingWriteObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__NetworkingWriteObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__NetworkingWriteObjectOut * SOAP_FMAC2 soap_instantiate__ns1__NetworkingWriteObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__NetworkingWriteObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__NetworkingWriteObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__NetworkingWriteObjectOut);
		if (size)
			*size = sizeof(_ns1__NetworkingWriteObjectOut);
		((_ns1__NetworkingWriteObjectOut*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__NetworkingWriteObjectOut, n);
		if (size)
			*size = n * sizeof(_ns1__NetworkingWriteObjectOut);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__NetworkingWriteObjectOut*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__NetworkingWriteObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__NetworkingWriteObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__NetworkingWriteObjectOut %p -> %p\n", q, p));
	*(_ns1__NetworkingWriteObjectOut*)p = *(_ns1__NetworkingWriteObjectOut*)q;
}

void _ns1__NetworkingQueryObjectOutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__NetworkingQueryObjectOutResponse::NetworkingQueryObjectOutResult = NULL;
	/* transient soap skipped */
}

void _ns1__NetworkingQueryObjectOutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingQueryObjectOutResponse::NetworkingQueryObjectOutResult);
	/* transient soap skipped */
#endif
}

int _ns1__NetworkingQueryObjectOutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__NetworkingQueryObjectOutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NetworkingQueryObjectOutResponse(struct soap *soap, const char *tag, int id, const _ns1__NetworkingQueryObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse), type))
		return soap->error;
	if (a->NetworkingQueryObjectOutResult)
		soap_element_result(soap, "ns1:NetworkingQueryObjectOutResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:NetworkingQueryObjectOutResult", -1, &(a->_ns1__NetworkingQueryObjectOutResponse::NetworkingQueryObjectOutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__NetworkingQueryObjectOutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__NetworkingQueryObjectOutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOutResponse * SOAP_FMAC4 soap_in__ns1__NetworkingQueryObjectOutResponse(struct soap *soap, const char *tag, _ns1__NetworkingQueryObjectOutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__NetworkingQueryObjectOutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse, sizeof(_ns1__NetworkingQueryObjectOutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__NetworkingQueryObjectOutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_NetworkingQueryObjectOutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NetworkingQueryObjectOutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:NetworkingQueryObjectOutResult", &(a->_ns1__NetworkingQueryObjectOutResponse::NetworkingQueryObjectOutResult), "xsd:string"))
				{	soap_flag_NetworkingQueryObjectOutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:NetworkingQueryObjectOutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__NetworkingQueryObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse, 0, sizeof(_ns1__NetworkingQueryObjectOutResponse), 0, soap_copy__ns1__NetworkingQueryObjectOutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__NetworkingQueryObjectOutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:NetworkingQueryObjectOutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__NetworkingQueryObjectOutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__NetworkingQueryObjectOutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOutResponse * SOAP_FMAC4 soap_get__ns1__NetworkingQueryObjectOutResponse(struct soap *soap, _ns1__NetworkingQueryObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__NetworkingQueryObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__NetworkingQueryObjectOutResponse * SOAP_FMAC2 soap_instantiate__ns1__NetworkingQueryObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__NetworkingQueryObjectOutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__NetworkingQueryObjectOutResponse);
		if (size)
			*size = sizeof(_ns1__NetworkingQueryObjectOutResponse);
		((_ns1__NetworkingQueryObjectOutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__NetworkingQueryObjectOutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__NetworkingQueryObjectOutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__NetworkingQueryObjectOutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__NetworkingQueryObjectOutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__NetworkingQueryObjectOutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__NetworkingQueryObjectOutResponse %p -> %p\n", q, p));
	*(_ns1__NetworkingQueryObjectOutResponse*)p = *(_ns1__NetworkingQueryObjectOutResponse*)q;
}

void _ns1__NetworkingQueryObjectOut::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__NetworkingQueryObjectOut::xtlb = NULL;
	this->_ns1__NetworkingQueryObjectOut::jkxlh = NULL;
	this->_ns1__NetworkingQueryObjectOut::jkid = NULL;
	this->_ns1__NetworkingQueryObjectOut::QueryUTF8XmlJsonDoc = NULL;
	/* transient soap skipped */
}

void _ns1__NetworkingQueryObjectOut::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingQueryObjectOut::xtlb);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingQueryObjectOut::jkxlh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingQueryObjectOut::jkid);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__NetworkingQueryObjectOut::QueryUTF8XmlJsonDoc);
	/* transient soap skipped */
#endif
}

int _ns1__NetworkingQueryObjectOut::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__NetworkingQueryObjectOut(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, int id, const _ns1__NetworkingQueryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__NetworkingQueryObjectOut), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:xtlb", -1, &(a->_ns1__NetworkingQueryObjectOut::xtlb), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkxlh", -1, &(a->_ns1__NetworkingQueryObjectOut::jkxlh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkid", -1, &(a->_ns1__NetworkingQueryObjectOut::jkid), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlJsonDoc", -1, &(a->_ns1__NetworkingQueryObjectOut::QueryUTF8XmlJsonDoc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__NetworkingQueryObjectOut::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__NetworkingQueryObjectOut(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOut * SOAP_FMAC4 soap_in__ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, _ns1__NetworkingQueryObjectOut *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__NetworkingQueryObjectOut *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__NetworkingQueryObjectOut, sizeof(_ns1__NetworkingQueryObjectOut), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__NetworkingQueryObjectOut)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__NetworkingQueryObjectOut *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xtlb1 = 1;
	size_t soap_flag_jkxlh1 = 1;
	size_t soap_flag_jkid1 = 1;
	size_t soap_flag_QueryUTF8XmlJsonDoc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xtlb1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:xtlb", &(a->_ns1__NetworkingQueryObjectOut::xtlb), "xsd:string"))
				{	soap_flag_xtlb1--;
					continue;
				}
			if (soap_flag_jkxlh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkxlh", &(a->_ns1__NetworkingQueryObjectOut::jkxlh), "xsd:string"))
				{	soap_flag_jkxlh1--;
					continue;
				}
			if (soap_flag_jkid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkid", &(a->_ns1__NetworkingQueryObjectOut::jkid), "xsd:string"))
				{	soap_flag_jkid1--;
					continue;
				}
			if (soap_flag_QueryUTF8XmlJsonDoc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlJsonDoc", &(a->_ns1__NetworkingQueryObjectOut::QueryUTF8XmlJsonDoc), "xsd:string"))
				{	soap_flag_QueryUTF8XmlJsonDoc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__NetworkingQueryObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__NetworkingQueryObjectOut, 0, sizeof(_ns1__NetworkingQueryObjectOut), 0, soap_copy__ns1__NetworkingQueryObjectOut);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__NetworkingQueryObjectOut::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__NetworkingQueryObjectOut);
	if (this->soap_out(soap, tag?tag:"ns1:NetworkingQueryObjectOut", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__NetworkingQueryObjectOut::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__NetworkingQueryObjectOut(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOut * SOAP_FMAC4 soap_get__ns1__NetworkingQueryObjectOut(struct soap *soap, _ns1__NetworkingQueryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__NetworkingQueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__NetworkingQueryObjectOut * SOAP_FMAC2 soap_instantiate__ns1__NetworkingQueryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__NetworkingQueryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__NetworkingQueryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__NetworkingQueryObjectOut);
		if (size)
			*size = sizeof(_ns1__NetworkingQueryObjectOut);
		((_ns1__NetworkingQueryObjectOut*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__NetworkingQueryObjectOut, n);
		if (size)
			*size = n * sizeof(_ns1__NetworkingQueryObjectOut);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__NetworkingQueryObjectOut*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__NetworkingQueryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__NetworkingQueryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__NetworkingQueryObjectOut %p -> %p\n", q, p));
	*(_ns1__NetworkingQueryObjectOut*)p = *(_ns1__NetworkingQueryObjectOut*)q;
}

void _ns1__writeObjectOutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__writeObjectOutResponse::writeObjectOutResult = NULL;
	/* transient soap skipped */
}

void _ns1__writeObjectOutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__writeObjectOutResponse::writeObjectOutResult);
	/* transient soap skipped */
#endif
}

int _ns1__writeObjectOutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__writeObjectOutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__writeObjectOutResponse(struct soap *soap, const char *tag, int id, const _ns1__writeObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__writeObjectOutResponse), type))
		return soap->error;
	if (a->writeObjectOutResult)
		soap_element_result(soap, "ns1:writeObjectOutResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:writeObjectOutResult", -1, &(a->_ns1__writeObjectOutResponse::writeObjectOutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__writeObjectOutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__writeObjectOutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__writeObjectOutResponse * SOAP_FMAC4 soap_in__ns1__writeObjectOutResponse(struct soap *soap, const char *tag, _ns1__writeObjectOutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__writeObjectOutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__writeObjectOutResponse, sizeof(_ns1__writeObjectOutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__writeObjectOutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__writeObjectOutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_writeObjectOutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_writeObjectOutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:writeObjectOutResult", &(a->_ns1__writeObjectOutResponse::writeObjectOutResult), "xsd:string"))
				{	soap_flag_writeObjectOutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:writeObjectOutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__writeObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__writeObjectOutResponse, 0, sizeof(_ns1__writeObjectOutResponse), 0, soap_copy__ns1__writeObjectOutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__writeObjectOutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__writeObjectOutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:writeObjectOutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__writeObjectOutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__writeObjectOutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__writeObjectOutResponse * SOAP_FMAC4 soap_get__ns1__writeObjectOutResponse(struct soap *soap, _ns1__writeObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__writeObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__writeObjectOutResponse * SOAP_FMAC2 soap_instantiate__ns1__writeObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__writeObjectOutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__writeObjectOutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__writeObjectOutResponse);
		if (size)
			*size = sizeof(_ns1__writeObjectOutResponse);
		((_ns1__writeObjectOutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__writeObjectOutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__writeObjectOutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__writeObjectOutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__writeObjectOutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__writeObjectOutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__writeObjectOutResponse %p -> %p\n", q, p));
	*(_ns1__writeObjectOutResponse*)p = *(_ns1__writeObjectOutResponse*)q;
}

void _ns1__writeObjectOut::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__writeObjectOut::xtlb = NULL;
	this->_ns1__writeObjectOut::jkxlh = NULL;
	this->_ns1__writeObjectOut::jkid = NULL;
	this->_ns1__writeObjectOut::writeUTF8XmlDoc = NULL;
	/* transient soap skipped */
}

void _ns1__writeObjectOut::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__writeObjectOut::xtlb);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__writeObjectOut::jkxlh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__writeObjectOut::jkid);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__writeObjectOut::writeUTF8XmlDoc);
	/* transient soap skipped */
#endif
}

int _ns1__writeObjectOut::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__writeObjectOut(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__writeObjectOut(struct soap *soap, const char *tag, int id, const _ns1__writeObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__writeObjectOut), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:xtlb", -1, &(a->_ns1__writeObjectOut::xtlb), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkxlh", -1, &(a->_ns1__writeObjectOut::jkxlh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkid", -1, &(a->_ns1__writeObjectOut::jkid), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:writeUTF8XmlDoc", -1, &(a->_ns1__writeObjectOut::writeUTF8XmlDoc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__writeObjectOut::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__writeObjectOut(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__writeObjectOut * SOAP_FMAC4 soap_in__ns1__writeObjectOut(struct soap *soap, const char *tag, _ns1__writeObjectOut *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__writeObjectOut *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__writeObjectOut, sizeof(_ns1__writeObjectOut), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__writeObjectOut)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__writeObjectOut *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xtlb1 = 1;
	size_t soap_flag_jkxlh1 = 1;
	size_t soap_flag_jkid1 = 1;
	size_t soap_flag_writeUTF8XmlDoc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xtlb1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:xtlb", &(a->_ns1__writeObjectOut::xtlb), "xsd:string"))
				{	soap_flag_xtlb1--;
					continue;
				}
			if (soap_flag_jkxlh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkxlh", &(a->_ns1__writeObjectOut::jkxlh), "xsd:string"))
				{	soap_flag_jkxlh1--;
					continue;
				}
			if (soap_flag_jkid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkid", &(a->_ns1__writeObjectOut::jkid), "xsd:string"))
				{	soap_flag_jkid1--;
					continue;
				}
			if (soap_flag_writeUTF8XmlDoc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:writeUTF8XmlDoc", &(a->_ns1__writeObjectOut::writeUTF8XmlDoc), "xsd:string"))
				{	soap_flag_writeUTF8XmlDoc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__writeObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__writeObjectOut, 0, sizeof(_ns1__writeObjectOut), 0, soap_copy__ns1__writeObjectOut);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__writeObjectOut::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__writeObjectOut);
	if (this->soap_out(soap, tag?tag:"ns1:writeObjectOut", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__writeObjectOut::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__writeObjectOut(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__writeObjectOut * SOAP_FMAC4 soap_get__ns1__writeObjectOut(struct soap *soap, _ns1__writeObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__writeObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__writeObjectOut * SOAP_FMAC2 soap_instantiate__ns1__writeObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__writeObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__writeObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__writeObjectOut);
		if (size)
			*size = sizeof(_ns1__writeObjectOut);
		((_ns1__writeObjectOut*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__writeObjectOut, n);
		if (size)
			*size = n * sizeof(_ns1__writeObjectOut);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__writeObjectOut*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__writeObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__writeObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__writeObjectOut %p -> %p\n", q, p));
	*(_ns1__writeObjectOut*)p = *(_ns1__writeObjectOut*)q;
}

void _ns1__queryObjectOutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__queryObjectOutResponse::queryObjectOutResult = NULL;
	/* transient soap skipped */
}

void _ns1__queryObjectOutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__queryObjectOutResponse::queryObjectOutResult);
	/* transient soap skipped */
#endif
}

int _ns1__queryObjectOutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__queryObjectOutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__queryObjectOutResponse(struct soap *soap, const char *tag, int id, const _ns1__queryObjectOutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__queryObjectOutResponse), type))
		return soap->error;
	if (a->queryObjectOutResult)
		soap_element_result(soap, "ns1:queryObjectOutResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:queryObjectOutResult", -1, &(a->_ns1__queryObjectOutResponse::queryObjectOutResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__queryObjectOutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__queryObjectOutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__queryObjectOutResponse * SOAP_FMAC4 soap_in__ns1__queryObjectOutResponse(struct soap *soap, const char *tag, _ns1__queryObjectOutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__queryObjectOutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__queryObjectOutResponse, sizeof(_ns1__queryObjectOutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__queryObjectOutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__queryObjectOutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_queryObjectOutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_queryObjectOutResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:queryObjectOutResult", &(a->_ns1__queryObjectOutResponse::queryObjectOutResult), "xsd:string"))
				{	soap_flag_queryObjectOutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:queryObjectOutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__queryObjectOutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__queryObjectOutResponse, 0, sizeof(_ns1__queryObjectOutResponse), 0, soap_copy__ns1__queryObjectOutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__queryObjectOutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__queryObjectOutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:queryObjectOutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__queryObjectOutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__queryObjectOutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__queryObjectOutResponse * SOAP_FMAC4 soap_get__ns1__queryObjectOutResponse(struct soap *soap, _ns1__queryObjectOutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__queryObjectOutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__queryObjectOutResponse * SOAP_FMAC2 soap_instantiate__ns1__queryObjectOutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__queryObjectOutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__queryObjectOutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__queryObjectOutResponse);
		if (size)
			*size = sizeof(_ns1__queryObjectOutResponse);
		((_ns1__queryObjectOutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__queryObjectOutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__queryObjectOutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__queryObjectOutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__queryObjectOutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__queryObjectOutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__queryObjectOutResponse %p -> %p\n", q, p));
	*(_ns1__queryObjectOutResponse*)p = *(_ns1__queryObjectOutResponse*)q;
}

void _ns1__queryObjectOut::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__queryObjectOut::xtlb = NULL;
	this->_ns1__queryObjectOut::jkxlh = NULL;
	this->_ns1__queryObjectOut::jkid = NULL;
	this->_ns1__queryObjectOut::QueryUTF8XmlDoc = NULL;
	/* transient soap skipped */
}

void _ns1__queryObjectOut::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__queryObjectOut::xtlb);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__queryObjectOut::jkxlh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__queryObjectOut::jkid);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__queryObjectOut::QueryUTF8XmlDoc);
	/* transient soap skipped */
#endif
}

int _ns1__queryObjectOut::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__queryObjectOut(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__queryObjectOut(struct soap *soap, const char *tag, int id, const _ns1__queryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__queryObjectOut), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:xtlb", -1, &(a->_ns1__queryObjectOut::xtlb), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkxlh", -1, &(a->_ns1__queryObjectOut::jkxlh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jkid", -1, &(a->_ns1__queryObjectOut::jkid), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlDoc", -1, &(a->_ns1__queryObjectOut::QueryUTF8XmlDoc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__queryObjectOut::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__queryObjectOut(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__queryObjectOut * SOAP_FMAC4 soap_in__ns1__queryObjectOut(struct soap *soap, const char *tag, _ns1__queryObjectOut *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__queryObjectOut *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__queryObjectOut, sizeof(_ns1__queryObjectOut), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__queryObjectOut)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__queryObjectOut *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xtlb1 = 1;
	size_t soap_flag_jkxlh1 = 1;
	size_t soap_flag_jkid1 = 1;
	size_t soap_flag_QueryUTF8XmlDoc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xtlb1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:xtlb", &(a->_ns1__queryObjectOut::xtlb), "xsd:string"))
				{	soap_flag_xtlb1--;
					continue;
				}
			if (soap_flag_jkxlh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkxlh", &(a->_ns1__queryObjectOut::jkxlh), "xsd:string"))
				{	soap_flag_jkxlh1--;
					continue;
				}
			if (soap_flag_jkid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jkid", &(a->_ns1__queryObjectOut::jkid), "xsd:string"))
				{	soap_flag_jkid1--;
					continue;
				}
			if (soap_flag_QueryUTF8XmlDoc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:QueryUTF8XmlDoc", &(a->_ns1__queryObjectOut::QueryUTF8XmlDoc), "xsd:string"))
				{	soap_flag_QueryUTF8XmlDoc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__queryObjectOut *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__queryObjectOut, 0, sizeof(_ns1__queryObjectOut), 0, soap_copy__ns1__queryObjectOut);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__queryObjectOut::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__queryObjectOut);
	if (this->soap_out(soap, tag?tag:"ns1:queryObjectOut", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__queryObjectOut::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__queryObjectOut(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__queryObjectOut * SOAP_FMAC4 soap_get__ns1__queryObjectOut(struct soap *soap, _ns1__queryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__queryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__queryObjectOut * SOAP_FMAC2 soap_instantiate__ns1__queryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__queryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__queryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__queryObjectOut);
		if (size)
			*size = sizeof(_ns1__queryObjectOut);
		((_ns1__queryObjectOut*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__queryObjectOut, n);
		if (size)
			*size = n * sizeof(_ns1__queryObjectOut);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__queryObjectOut*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__queryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__queryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__queryObjectOut %p -> %p\n", q, p));
	*(_ns1__queryObjectOut*)p = *(_ns1__queryObjectOut*)q;
}

void _ns1__GetVerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetVerResponse::GetVerResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetVerResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetVerResponse::GetVerResult);
	/* transient soap skipped */
#endif
}

int _ns1__GetVerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVerResponse(struct soap *soap, const char *tag, int id, const _ns1__GetVerResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVerResponse), type))
		return soap->error;
	if (a->GetVerResult)
		soap_element_result(soap, "ns1:GetVerResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:GetVerResult", -1, &(a->_ns1__GetVerResponse::GetVerResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVerResponse * SOAP_FMAC4 soap_in__ns1__GetVerResponse(struct soap *soap, const char *tag, _ns1__GetVerResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVerResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVerResponse, sizeof(_ns1__GetVerResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVerResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVerResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetVerResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetVerResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:GetVerResult", &(a->_ns1__GetVerResponse::GetVerResult), "xsd:string"))
				{	soap_flag_GetVerResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetVerResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVerResponse, 0, sizeof(_ns1__GetVerResponse), 0, soap_copy__ns1__GetVerResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetVerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetVerResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetVerResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVerResponse * SOAP_FMAC4 soap_get__ns1__GetVerResponse(struct soap *soap, _ns1__GetVerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetVerResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVerResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVerResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetVerResponse);
		if (size)
			*size = sizeof(_ns1__GetVerResponse);
		((_ns1__GetVerResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetVerResponse, n);
		if (size)
			*size = n * sizeof(_ns1__GetVerResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetVerResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetVerResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVerResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVerResponse %p -> %p\n", q, p));
	*(_ns1__GetVerResponse*)p = *(_ns1__GetVerResponse*)q;
}

void _ns1__GetVer::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetVer::str = NULL;
	/* transient soap skipped */
}

void _ns1__GetVer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__GetVer::str);
	/* transient soap skipped */
#endif
}

int _ns1__GetVer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVer(struct soap *soap, const char *tag, int id, const _ns1__GetVer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVer), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:str", -1, &(a->_ns1__GetVer::str), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVer(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVer * SOAP_FMAC4 soap_in__ns1__GetVer(struct soap *soap, const char *tag, _ns1__GetVer *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVer, sizeof(_ns1__GetVer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_str1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_str1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:str", &(a->_ns1__GetVer::str), "xsd:string"))
				{	soap_flag_str1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVer, 0, sizeof(_ns1__GetVer), 0, soap_copy__ns1__GetVer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetVer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__GetVer);
	if (this->soap_out(soap, tag?tag:"ns1:GetVer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVer(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVer * SOAP_FMAC4 soap_get__ns1__GetVer(struct soap *soap, _ns1__GetVer *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetVer * SOAP_FMAC2 soap_instantiate__ns1__GetVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVer, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetVer);
		if (size)
			*size = sizeof(_ns1__GetVer);
		((_ns1__GetVer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetVer, n);
		if (size)
			*size = n * sizeof(_ns1__GetVer);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__GetVer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__GetVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVer %p -> %p\n", q, p));
	*(_ns1__GetVer*)p = *(_ns1__GetVer*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zjqueryObjectOut_(struct soap *soap, struct __ns1__zjqueryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zjqueryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zjqueryObjectOut_(struct soap *soap, const struct __ns1__zjqueryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zjqueryObjectOut(soap, &a->ns1__zjqueryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zjqueryObjectOut_(struct soap *soap, const char *tag, int id, const struct __ns1__zjqueryObjectOut_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zjqueryObjectOut(soap, "ns1:zjqueryObjectOut", -1, &a->ns1__zjqueryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zjqueryObjectOut_ * SOAP_FMAC4 soap_in___ns1__zjqueryObjectOut_(struct soap *soap, const char *tag, struct __ns1__zjqueryObjectOut_ *a, const char *type)
{
	size_t soap_flag_ns1__zjqueryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zjqueryObjectOut_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zjqueryObjectOut_, sizeof(struct __ns1__zjqueryObjectOut_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zjqueryObjectOut_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zjqueryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__zjqueryObjectOut(soap, "ns1:zjqueryObjectOut", &a->ns1__zjqueryObjectOut, ""))
				{	soap_flag_ns1__zjqueryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zjqueryObjectOut_(struct soap *soap, const struct __ns1__zjqueryObjectOut_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__zjqueryObjectOut_(soap, tag?tag:"-ns1:zjqueryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zjqueryObjectOut_ * SOAP_FMAC4 soap_get___ns1__zjqueryObjectOut_(struct soap *soap, struct __ns1__zjqueryObjectOut_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zjqueryObjectOut_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__zjqueryObjectOut_ * SOAP_FMAC2 soap_instantiate___ns1__zjqueryObjectOut_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zjqueryObjectOut_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__zjqueryObjectOut_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__zjqueryObjectOut_);
		if (size)
			*size = sizeof(struct __ns1__zjqueryObjectOut_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__zjqueryObjectOut_, n);
		if (size)
			*size = n * sizeof(struct __ns1__zjqueryObjectOut_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__zjqueryObjectOut_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__zjqueryObjectOut_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__zjqueryObjectOut_ %p -> %p\n", q, p));
	*(struct __ns1__zjqueryObjectOut_*)p = *(struct __ns1__zjqueryObjectOut_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLoginParm_(struct soap *soap, struct __ns1__GetLoginParm_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLoginParm = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLoginParm_(struct soap *soap, const struct __ns1__GetLoginParm_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLoginParm(soap, &a->ns1__GetLoginParm);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLoginParm_(struct soap *soap, const char *tag, int id, const struct __ns1__GetLoginParm_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLoginParm(soap, "ns1:GetLoginParm", -1, &a->ns1__GetLoginParm, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLoginParm_ * SOAP_FMAC4 soap_in___ns1__GetLoginParm_(struct soap *soap, const char *tag, struct __ns1__GetLoginParm_ *a, const char *type)
{
	size_t soap_flag_ns1__GetLoginParm = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLoginParm_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLoginParm_, sizeof(struct __ns1__GetLoginParm_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLoginParm_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLoginParm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLoginParm(soap, "ns1:GetLoginParm", &a->ns1__GetLoginParm, ""))
				{	soap_flag_ns1__GetLoginParm--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLoginParm_(struct soap *soap, const struct __ns1__GetLoginParm_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLoginParm_(soap, tag?tag:"-ns1:GetLoginParm", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLoginParm_ * SOAP_FMAC4 soap_get___ns1__GetLoginParm_(struct soap *soap, struct __ns1__GetLoginParm_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLoginParm_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLoginParm_ * SOAP_FMAC2 soap_instantiate___ns1__GetLoginParm_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLoginParm_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLoginParm_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLoginParm_);
		if (size)
			*size = sizeof(struct __ns1__GetLoginParm_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLoginParm_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLoginParm_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLoginParm_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLoginParm_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLoginParm_ %p -> %p\n", q, p));
	*(struct __ns1__GetLoginParm_*)p = *(struct __ns1__GetLoginParm_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NetworkingWriteObjectOut_(struct soap *soap, struct __ns1__NetworkingWriteObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__NetworkingWriteObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NetworkingWriteObjectOut_(struct soap *soap, const struct __ns1__NetworkingWriteObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__NetworkingWriteObjectOut(soap, &a->ns1__NetworkingWriteObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NetworkingWriteObjectOut_(struct soap *soap, const char *tag, int id, const struct __ns1__NetworkingWriteObjectOut_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__NetworkingWriteObjectOut(soap, "ns1:NetworkingWriteObjectOut", -1, &a->ns1__NetworkingWriteObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingWriteObjectOut_ * SOAP_FMAC4 soap_in___ns1__NetworkingWriteObjectOut_(struct soap *soap, const char *tag, struct __ns1__NetworkingWriteObjectOut_ *a, const char *type)
{
	size_t soap_flag_ns1__NetworkingWriteObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__NetworkingWriteObjectOut_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__NetworkingWriteObjectOut_, sizeof(struct __ns1__NetworkingWriteObjectOut_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__NetworkingWriteObjectOut_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__NetworkingWriteObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__NetworkingWriteObjectOut(soap, "ns1:NetworkingWriteObjectOut", &a->ns1__NetworkingWriteObjectOut, ""))
				{	soap_flag_ns1__NetworkingWriteObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NetworkingWriteObjectOut_(struct soap *soap, const struct __ns1__NetworkingWriteObjectOut_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__NetworkingWriteObjectOut_(soap, tag?tag:"-ns1:NetworkingWriteObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingWriteObjectOut_ * SOAP_FMAC4 soap_get___ns1__NetworkingWriteObjectOut_(struct soap *soap, struct __ns1__NetworkingWriteObjectOut_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__NetworkingWriteObjectOut_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__NetworkingWriteObjectOut_ * SOAP_FMAC2 soap_instantiate___ns1__NetworkingWriteObjectOut_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__NetworkingWriteObjectOut_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__NetworkingWriteObjectOut_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__NetworkingWriteObjectOut_);
		if (size)
			*size = sizeof(struct __ns1__NetworkingWriteObjectOut_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__NetworkingWriteObjectOut_, n);
		if (size)
			*size = n * sizeof(struct __ns1__NetworkingWriteObjectOut_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__NetworkingWriteObjectOut_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__NetworkingWriteObjectOut_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__NetworkingWriteObjectOut_ %p -> %p\n", q, p));
	*(struct __ns1__NetworkingWriteObjectOut_*)p = *(struct __ns1__NetworkingWriteObjectOut_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NetworkingQueryObjectOut_(struct soap *soap, struct __ns1__NetworkingQueryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__NetworkingQueryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NetworkingQueryObjectOut_(struct soap *soap, const struct __ns1__NetworkingQueryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__NetworkingQueryObjectOut(soap, &a->ns1__NetworkingQueryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NetworkingQueryObjectOut_(struct soap *soap, const char *tag, int id, const struct __ns1__NetworkingQueryObjectOut_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__NetworkingQueryObjectOut(soap, "ns1:NetworkingQueryObjectOut", -1, &a->ns1__NetworkingQueryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingQueryObjectOut_ * SOAP_FMAC4 soap_in___ns1__NetworkingQueryObjectOut_(struct soap *soap, const char *tag, struct __ns1__NetworkingQueryObjectOut_ *a, const char *type)
{
	size_t soap_flag_ns1__NetworkingQueryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__NetworkingQueryObjectOut_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__NetworkingQueryObjectOut_, sizeof(struct __ns1__NetworkingQueryObjectOut_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__NetworkingQueryObjectOut_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__NetworkingQueryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__NetworkingQueryObjectOut(soap, "ns1:NetworkingQueryObjectOut", &a->ns1__NetworkingQueryObjectOut, ""))
				{	soap_flag_ns1__NetworkingQueryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NetworkingQueryObjectOut_(struct soap *soap, const struct __ns1__NetworkingQueryObjectOut_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__NetworkingQueryObjectOut_(soap, tag?tag:"-ns1:NetworkingQueryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingQueryObjectOut_ * SOAP_FMAC4 soap_get___ns1__NetworkingQueryObjectOut_(struct soap *soap, struct __ns1__NetworkingQueryObjectOut_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__NetworkingQueryObjectOut_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__NetworkingQueryObjectOut_ * SOAP_FMAC2 soap_instantiate___ns1__NetworkingQueryObjectOut_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__NetworkingQueryObjectOut_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__NetworkingQueryObjectOut_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__NetworkingQueryObjectOut_);
		if (size)
			*size = sizeof(struct __ns1__NetworkingQueryObjectOut_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__NetworkingQueryObjectOut_, n);
		if (size)
			*size = n * sizeof(struct __ns1__NetworkingQueryObjectOut_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__NetworkingQueryObjectOut_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__NetworkingQueryObjectOut_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__NetworkingQueryObjectOut_ %p -> %p\n", q, p));
	*(struct __ns1__NetworkingQueryObjectOut_*)p = *(struct __ns1__NetworkingQueryObjectOut_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__writeObjectOut_(struct soap *soap, struct __ns1__writeObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__writeObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__writeObjectOut_(struct soap *soap, const struct __ns1__writeObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__writeObjectOut(soap, &a->ns1__writeObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__writeObjectOut_(struct soap *soap, const char *tag, int id, const struct __ns1__writeObjectOut_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__writeObjectOut(soap, "ns1:writeObjectOut", -1, &a->ns1__writeObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__writeObjectOut_ * SOAP_FMAC4 soap_in___ns1__writeObjectOut_(struct soap *soap, const char *tag, struct __ns1__writeObjectOut_ *a, const char *type)
{
	size_t soap_flag_ns1__writeObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__writeObjectOut_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__writeObjectOut_, sizeof(struct __ns1__writeObjectOut_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__writeObjectOut_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__writeObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__writeObjectOut(soap, "ns1:writeObjectOut", &a->ns1__writeObjectOut, ""))
				{	soap_flag_ns1__writeObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__writeObjectOut_(struct soap *soap, const struct __ns1__writeObjectOut_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__writeObjectOut_(soap, tag?tag:"-ns1:writeObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__writeObjectOut_ * SOAP_FMAC4 soap_get___ns1__writeObjectOut_(struct soap *soap, struct __ns1__writeObjectOut_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__writeObjectOut_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__writeObjectOut_ * SOAP_FMAC2 soap_instantiate___ns1__writeObjectOut_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__writeObjectOut_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__writeObjectOut_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__writeObjectOut_);
		if (size)
			*size = sizeof(struct __ns1__writeObjectOut_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__writeObjectOut_, n);
		if (size)
			*size = n * sizeof(struct __ns1__writeObjectOut_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__writeObjectOut_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__writeObjectOut_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__writeObjectOut_ %p -> %p\n", q, p));
	*(struct __ns1__writeObjectOut_*)p = *(struct __ns1__writeObjectOut_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryObjectOut_(struct soap *soap, struct __ns1__queryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__queryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryObjectOut_(struct soap *soap, const struct __ns1__queryObjectOut_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__queryObjectOut(soap, &a->ns1__queryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryObjectOut_(struct soap *soap, const char *tag, int id, const struct __ns1__queryObjectOut_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__queryObjectOut(soap, "ns1:queryObjectOut", -1, &a->ns1__queryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryObjectOut_ * SOAP_FMAC4 soap_in___ns1__queryObjectOut_(struct soap *soap, const char *tag, struct __ns1__queryObjectOut_ *a, const char *type)
{
	size_t soap_flag_ns1__queryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__queryObjectOut_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__queryObjectOut_, sizeof(struct __ns1__queryObjectOut_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__queryObjectOut_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__queryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__queryObjectOut(soap, "ns1:queryObjectOut", &a->ns1__queryObjectOut, ""))
				{	soap_flag_ns1__queryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryObjectOut_(struct soap *soap, const struct __ns1__queryObjectOut_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__queryObjectOut_(soap, tag?tag:"-ns1:queryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryObjectOut_ * SOAP_FMAC4 soap_get___ns1__queryObjectOut_(struct soap *soap, struct __ns1__queryObjectOut_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__queryObjectOut_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__queryObjectOut_ * SOAP_FMAC2 soap_instantiate___ns1__queryObjectOut_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__queryObjectOut_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__queryObjectOut_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__queryObjectOut_);
		if (size)
			*size = sizeof(struct __ns1__queryObjectOut_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__queryObjectOut_, n);
		if (size)
			*size = n * sizeof(struct __ns1__queryObjectOut_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__queryObjectOut_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__queryObjectOut_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__queryObjectOut_ %p -> %p\n", q, p));
	*(struct __ns1__queryObjectOut_*)p = *(struct __ns1__queryObjectOut_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVer_(struct soap *soap, struct __ns1__GetVer_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVer_(struct soap *soap, const struct __ns1__GetVer_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetVer(soap, &a->ns1__GetVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVer_(struct soap *soap, const char *tag, int id, const struct __ns1__GetVer_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetVer(soap, "ns1:GetVer", -1, &a->ns1__GetVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVer_ * SOAP_FMAC4 soap_in___ns1__GetVer_(struct soap *soap, const char *tag, struct __ns1__GetVer_ *a, const char *type)
{
	size_t soap_flag_ns1__GetVer = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetVer_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVer_, sizeof(struct __ns1__GetVer_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVer_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVer(soap, "ns1:GetVer", &a->ns1__GetVer, ""))
				{	soap_flag_ns1__GetVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVer_(struct soap *soap, const struct __ns1__GetVer_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetVer_(soap, tag?tag:"-ns1:GetVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVer_ * SOAP_FMAC4 soap_get___ns1__GetVer_(struct soap *soap, struct __ns1__GetVer_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVer_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetVer_ * SOAP_FMAC2 soap_instantiate___ns1__GetVer_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVer_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetVer_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetVer_);
		if (size)
			*size = sizeof(struct __ns1__GetVer_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetVer_, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetVer_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetVer_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVer_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetVer_ %p -> %p\n", q, p));
	*(struct __ns1__GetVer_*)p = *(struct __ns1__GetVer_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zjqueryObjectOut(struct soap *soap, struct __ns1__zjqueryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zjqueryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zjqueryObjectOut(struct soap *soap, const struct __ns1__zjqueryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zjqueryObjectOut(soap, &a->ns1__zjqueryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zjqueryObjectOut(struct soap *soap, const char *tag, int id, const struct __ns1__zjqueryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zjqueryObjectOut(soap, "ns1:zjqueryObjectOut", -1, &a->ns1__zjqueryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zjqueryObjectOut * SOAP_FMAC4 soap_in___ns1__zjqueryObjectOut(struct soap *soap, const char *tag, struct __ns1__zjqueryObjectOut *a, const char *type)
{
	size_t soap_flag_ns1__zjqueryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zjqueryObjectOut *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zjqueryObjectOut, sizeof(struct __ns1__zjqueryObjectOut), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zjqueryObjectOut(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zjqueryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__zjqueryObjectOut(soap, "ns1:zjqueryObjectOut", &a->ns1__zjqueryObjectOut, ""))
				{	soap_flag_ns1__zjqueryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zjqueryObjectOut(struct soap *soap, const struct __ns1__zjqueryObjectOut *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__zjqueryObjectOut(soap, tag?tag:"-ns1:zjqueryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zjqueryObjectOut * SOAP_FMAC4 soap_get___ns1__zjqueryObjectOut(struct soap *soap, struct __ns1__zjqueryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zjqueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__zjqueryObjectOut * SOAP_FMAC2 soap_instantiate___ns1__zjqueryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zjqueryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__zjqueryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__zjqueryObjectOut);
		if (size)
			*size = sizeof(struct __ns1__zjqueryObjectOut);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__zjqueryObjectOut, n);
		if (size)
			*size = n * sizeof(struct __ns1__zjqueryObjectOut);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__zjqueryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__zjqueryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__zjqueryObjectOut %p -> %p\n", q, p));
	*(struct __ns1__zjqueryObjectOut*)p = *(struct __ns1__zjqueryObjectOut*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLoginParm(struct soap *soap, struct __ns1__GetLoginParm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetLoginParm = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLoginParm(struct soap *soap, const struct __ns1__GetLoginParm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetLoginParm(soap, &a->ns1__GetLoginParm);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLoginParm(struct soap *soap, const char *tag, int id, const struct __ns1__GetLoginParm *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetLoginParm(soap, "ns1:GetLoginParm", -1, &a->ns1__GetLoginParm, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLoginParm * SOAP_FMAC4 soap_in___ns1__GetLoginParm(struct soap *soap, const char *tag, struct __ns1__GetLoginParm *a, const char *type)
{
	size_t soap_flag_ns1__GetLoginParm = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetLoginParm *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLoginParm, sizeof(struct __ns1__GetLoginParm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLoginParm(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetLoginParm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetLoginParm(soap, "ns1:GetLoginParm", &a->ns1__GetLoginParm, ""))
				{	soap_flag_ns1__GetLoginParm--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLoginParm(struct soap *soap, const struct __ns1__GetLoginParm *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLoginParm(soap, tag?tag:"-ns1:GetLoginParm", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLoginParm * SOAP_FMAC4 soap_get___ns1__GetLoginParm(struct soap *soap, struct __ns1__GetLoginParm *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLoginParm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLoginParm * SOAP_FMAC2 soap_instantiate___ns1__GetLoginParm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLoginParm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLoginParm, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLoginParm);
		if (size)
			*size = sizeof(struct __ns1__GetLoginParm);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetLoginParm, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetLoginParm);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetLoginParm*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLoginParm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLoginParm %p -> %p\n", q, p));
	*(struct __ns1__GetLoginParm*)p = *(struct __ns1__GetLoginParm*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NetworkingWriteObjectOut(struct soap *soap, struct __ns1__NetworkingWriteObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__NetworkingWriteObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NetworkingWriteObjectOut(struct soap *soap, const struct __ns1__NetworkingWriteObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__NetworkingWriteObjectOut(soap, &a->ns1__NetworkingWriteObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, int id, const struct __ns1__NetworkingWriteObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__NetworkingWriteObjectOut(soap, "ns1:NetworkingWriteObjectOut", -1, &a->ns1__NetworkingWriteObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingWriteObjectOut * SOAP_FMAC4 soap_in___ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, struct __ns1__NetworkingWriteObjectOut *a, const char *type)
{
	size_t soap_flag_ns1__NetworkingWriteObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__NetworkingWriteObjectOut *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__NetworkingWriteObjectOut, sizeof(struct __ns1__NetworkingWriteObjectOut), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__NetworkingWriteObjectOut(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__NetworkingWriteObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__NetworkingWriteObjectOut(soap, "ns1:NetworkingWriteObjectOut", &a->ns1__NetworkingWriteObjectOut, ""))
				{	soap_flag_ns1__NetworkingWriteObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NetworkingWriteObjectOut(struct soap *soap, const struct __ns1__NetworkingWriteObjectOut *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__NetworkingWriteObjectOut(soap, tag?tag:"-ns1:NetworkingWriteObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingWriteObjectOut * SOAP_FMAC4 soap_get___ns1__NetworkingWriteObjectOut(struct soap *soap, struct __ns1__NetworkingWriteObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__NetworkingWriteObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__NetworkingWriteObjectOut * SOAP_FMAC2 soap_instantiate___ns1__NetworkingWriteObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__NetworkingWriteObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__NetworkingWriteObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__NetworkingWriteObjectOut);
		if (size)
			*size = sizeof(struct __ns1__NetworkingWriteObjectOut);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__NetworkingWriteObjectOut, n);
		if (size)
			*size = n * sizeof(struct __ns1__NetworkingWriteObjectOut);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__NetworkingWriteObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__NetworkingWriteObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__NetworkingWriteObjectOut %p -> %p\n", q, p));
	*(struct __ns1__NetworkingWriteObjectOut*)p = *(struct __ns1__NetworkingWriteObjectOut*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NetworkingQueryObjectOut(struct soap *soap, struct __ns1__NetworkingQueryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__NetworkingQueryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NetworkingQueryObjectOut(struct soap *soap, const struct __ns1__NetworkingQueryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__NetworkingQueryObjectOut(soap, &a->ns1__NetworkingQueryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, int id, const struct __ns1__NetworkingQueryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__NetworkingQueryObjectOut(soap, "ns1:NetworkingQueryObjectOut", -1, &a->ns1__NetworkingQueryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingQueryObjectOut * SOAP_FMAC4 soap_in___ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, struct __ns1__NetworkingQueryObjectOut *a, const char *type)
{
	size_t soap_flag_ns1__NetworkingQueryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__NetworkingQueryObjectOut *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__NetworkingQueryObjectOut, sizeof(struct __ns1__NetworkingQueryObjectOut), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__NetworkingQueryObjectOut(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__NetworkingQueryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__NetworkingQueryObjectOut(soap, "ns1:NetworkingQueryObjectOut", &a->ns1__NetworkingQueryObjectOut, ""))
				{	soap_flag_ns1__NetworkingQueryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NetworkingQueryObjectOut(struct soap *soap, const struct __ns1__NetworkingQueryObjectOut *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__NetworkingQueryObjectOut(soap, tag?tag:"-ns1:NetworkingQueryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__NetworkingQueryObjectOut * SOAP_FMAC4 soap_get___ns1__NetworkingQueryObjectOut(struct soap *soap, struct __ns1__NetworkingQueryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__NetworkingQueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__NetworkingQueryObjectOut * SOAP_FMAC2 soap_instantiate___ns1__NetworkingQueryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__NetworkingQueryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__NetworkingQueryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__NetworkingQueryObjectOut);
		if (size)
			*size = sizeof(struct __ns1__NetworkingQueryObjectOut);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__NetworkingQueryObjectOut, n);
		if (size)
			*size = n * sizeof(struct __ns1__NetworkingQueryObjectOut);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__NetworkingQueryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__NetworkingQueryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__NetworkingQueryObjectOut %p -> %p\n", q, p));
	*(struct __ns1__NetworkingQueryObjectOut*)p = *(struct __ns1__NetworkingQueryObjectOut*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__writeObjectOut(struct soap *soap, struct __ns1__writeObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__writeObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__writeObjectOut(struct soap *soap, const struct __ns1__writeObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__writeObjectOut(soap, &a->ns1__writeObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__writeObjectOut(struct soap *soap, const char *tag, int id, const struct __ns1__writeObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__writeObjectOut(soap, "ns1:writeObjectOut", -1, &a->ns1__writeObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__writeObjectOut * SOAP_FMAC4 soap_in___ns1__writeObjectOut(struct soap *soap, const char *tag, struct __ns1__writeObjectOut *a, const char *type)
{
	size_t soap_flag_ns1__writeObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__writeObjectOut *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__writeObjectOut, sizeof(struct __ns1__writeObjectOut), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__writeObjectOut(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__writeObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__writeObjectOut(soap, "ns1:writeObjectOut", &a->ns1__writeObjectOut, ""))
				{	soap_flag_ns1__writeObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__writeObjectOut(struct soap *soap, const struct __ns1__writeObjectOut *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__writeObjectOut(soap, tag?tag:"-ns1:writeObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__writeObjectOut * SOAP_FMAC4 soap_get___ns1__writeObjectOut(struct soap *soap, struct __ns1__writeObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__writeObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__writeObjectOut * SOAP_FMAC2 soap_instantiate___ns1__writeObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__writeObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__writeObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__writeObjectOut);
		if (size)
			*size = sizeof(struct __ns1__writeObjectOut);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__writeObjectOut, n);
		if (size)
			*size = n * sizeof(struct __ns1__writeObjectOut);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__writeObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__writeObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__writeObjectOut %p -> %p\n", q, p));
	*(struct __ns1__writeObjectOut*)p = *(struct __ns1__writeObjectOut*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__queryObjectOut(struct soap *soap, struct __ns1__queryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__queryObjectOut = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__queryObjectOut(struct soap *soap, const struct __ns1__queryObjectOut *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__queryObjectOut(soap, &a->ns1__queryObjectOut);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__queryObjectOut(struct soap *soap, const char *tag, int id, const struct __ns1__queryObjectOut *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__queryObjectOut(soap, "ns1:queryObjectOut", -1, &a->ns1__queryObjectOut, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryObjectOut * SOAP_FMAC4 soap_in___ns1__queryObjectOut(struct soap *soap, const char *tag, struct __ns1__queryObjectOut *a, const char *type)
{
	size_t soap_flag_ns1__queryObjectOut = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__queryObjectOut *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__queryObjectOut, sizeof(struct __ns1__queryObjectOut), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__queryObjectOut(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__queryObjectOut && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__queryObjectOut(soap, "ns1:queryObjectOut", &a->ns1__queryObjectOut, ""))
				{	soap_flag_ns1__queryObjectOut--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__queryObjectOut(struct soap *soap, const struct __ns1__queryObjectOut *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__queryObjectOut(soap, tag?tag:"-ns1:queryObjectOut", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__queryObjectOut * SOAP_FMAC4 soap_get___ns1__queryObjectOut(struct soap *soap, struct __ns1__queryObjectOut *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__queryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__queryObjectOut * SOAP_FMAC2 soap_instantiate___ns1__queryObjectOut(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__queryObjectOut(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__queryObjectOut, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__queryObjectOut);
		if (size)
			*size = sizeof(struct __ns1__queryObjectOut);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__queryObjectOut, n);
		if (size)
			*size = n * sizeof(struct __ns1__queryObjectOut);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__queryObjectOut*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__queryObjectOut(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__queryObjectOut %p -> %p\n", q, p));
	*(struct __ns1__queryObjectOut*)p = *(struct __ns1__queryObjectOut*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVer(struct soap *soap, struct __ns1__GetVer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVer(struct soap *soap, const struct __ns1__GetVer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetVer(soap, &a->ns1__GetVer);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVer(struct soap *soap, const char *tag, int id, const struct __ns1__GetVer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetVer(soap, "ns1:GetVer", -1, &a->ns1__GetVer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVer * SOAP_FMAC4 soap_in___ns1__GetVer(struct soap *soap, const char *tag, struct __ns1__GetVer *a, const char *type)
{
	size_t soap_flag_ns1__GetVer = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetVer *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVer, sizeof(struct __ns1__GetVer), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVer(soap, "ns1:GetVer", &a->ns1__GetVer, ""))
				{	soap_flag_ns1__GetVer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVer(struct soap *soap, const struct __ns1__GetVer *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetVer(soap, tag?tag:"-ns1:GetVer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVer * SOAP_FMAC4 soap_get___ns1__GetVer(struct soap *soap, struct __ns1__GetVer *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetVer * SOAP_FMAC2 soap_instantiate___ns1__GetVer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetVer, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetVer);
		if (size)
			*size = sizeof(struct __ns1__GetVer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__GetVer, n);
		if (size)
			*size = n * sizeof(struct __ns1__GetVer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__GetVer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetVer %p -> %p\n", q, p));
	*(struct __ns1__GetVer*)p = *(struct __ns1__GetVer*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zjqueryObjectOut(struct soap *soap, _ns1__zjqueryObjectOut *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zjqueryObjectOut))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zjqueryObjectOut(struct soap *soap, const char *tag, int id, _ns1__zjqueryObjectOut *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zjqueryObjectOut);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__zjqueryObjectOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__zjqueryObjectOut(struct soap *soap, const char *tag, _ns1__zjqueryObjectOut **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zjqueryObjectOut **)soap_malloc(soap, sizeof(_ns1__zjqueryObjectOut *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zjqueryObjectOut *)soap_instantiate__ns1__zjqueryObjectOut(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__zjqueryObjectOut ** p = (_ns1__zjqueryObjectOut **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zjqueryObjectOut, sizeof(_ns1__zjqueryObjectOut), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zjqueryObjectOut(struct soap *soap, _ns1__zjqueryObjectOut *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__zjqueryObjectOut);
	if (soap_out_PointerTo_ns1__zjqueryObjectOut(soap, tag?tag:"ns1:zjqueryObjectOut", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zjqueryObjectOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__zjqueryObjectOut(struct soap *soap, _ns1__zjqueryObjectOut **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zjqueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLoginParm(struct soap *soap, _ns1__GetLoginParm *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetLoginParm))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLoginParm(struct soap *soap, const char *tag, int id, _ns1__GetLoginParm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetLoginParm);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetLoginParm ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLoginParm(struct soap *soap, const char *tag, _ns1__GetLoginParm **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetLoginParm **)soap_malloc(soap, sizeof(_ns1__GetLoginParm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetLoginParm *)soap_instantiate__ns1__GetLoginParm(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetLoginParm ** p = (_ns1__GetLoginParm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetLoginParm, sizeof(_ns1__GetLoginParm), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLoginParm(struct soap *soap, _ns1__GetLoginParm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetLoginParm);
	if (soap_out_PointerTo_ns1__GetLoginParm(soap, tag?tag:"ns1:GetLoginParm", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetLoginParm ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLoginParm(struct soap *soap, _ns1__GetLoginParm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetLoginParm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__NetworkingWriteObjectOut(struct soap *soap, _ns1__NetworkingWriteObjectOut *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__NetworkingWriteObjectOut))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, int id, _ns1__NetworkingWriteObjectOut *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__NetworkingWriteObjectOut);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__NetworkingWriteObjectOut(struct soap *soap, const char *tag, _ns1__NetworkingWriteObjectOut **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__NetworkingWriteObjectOut **)soap_malloc(soap, sizeof(_ns1__NetworkingWriteObjectOut *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__NetworkingWriteObjectOut *)soap_instantiate__ns1__NetworkingWriteObjectOut(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__NetworkingWriteObjectOut ** p = (_ns1__NetworkingWriteObjectOut **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__NetworkingWriteObjectOut, sizeof(_ns1__NetworkingWriteObjectOut), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__NetworkingWriteObjectOut(struct soap *soap, _ns1__NetworkingWriteObjectOut *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__NetworkingWriteObjectOut);
	if (soap_out_PointerTo_ns1__NetworkingWriteObjectOut(soap, tag?tag:"ns1:NetworkingWriteObjectOut", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__NetworkingWriteObjectOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__NetworkingWriteObjectOut(struct soap *soap, _ns1__NetworkingWriteObjectOut **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__NetworkingWriteObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__NetworkingQueryObjectOut(struct soap *soap, _ns1__NetworkingQueryObjectOut *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__NetworkingQueryObjectOut))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, int id, _ns1__NetworkingQueryObjectOut *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__NetworkingQueryObjectOut);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__NetworkingQueryObjectOut(struct soap *soap, const char *tag, _ns1__NetworkingQueryObjectOut **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__NetworkingQueryObjectOut **)soap_malloc(soap, sizeof(_ns1__NetworkingQueryObjectOut *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__NetworkingQueryObjectOut *)soap_instantiate__ns1__NetworkingQueryObjectOut(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__NetworkingQueryObjectOut ** p = (_ns1__NetworkingQueryObjectOut **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__NetworkingQueryObjectOut, sizeof(_ns1__NetworkingQueryObjectOut), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__NetworkingQueryObjectOut(struct soap *soap, _ns1__NetworkingQueryObjectOut *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__NetworkingQueryObjectOut);
	if (soap_out_PointerTo_ns1__NetworkingQueryObjectOut(soap, tag?tag:"ns1:NetworkingQueryObjectOut", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__NetworkingQueryObjectOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__NetworkingQueryObjectOut(struct soap *soap, _ns1__NetworkingQueryObjectOut **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__NetworkingQueryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__writeObjectOut(struct soap *soap, _ns1__writeObjectOut *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__writeObjectOut))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__writeObjectOut(struct soap *soap, const char *tag, int id, _ns1__writeObjectOut *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__writeObjectOut);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__writeObjectOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__writeObjectOut(struct soap *soap, const char *tag, _ns1__writeObjectOut **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__writeObjectOut **)soap_malloc(soap, sizeof(_ns1__writeObjectOut *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__writeObjectOut *)soap_instantiate__ns1__writeObjectOut(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__writeObjectOut ** p = (_ns1__writeObjectOut **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__writeObjectOut, sizeof(_ns1__writeObjectOut), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__writeObjectOut(struct soap *soap, _ns1__writeObjectOut *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__writeObjectOut);
	if (soap_out_PointerTo_ns1__writeObjectOut(soap, tag?tag:"ns1:writeObjectOut", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__writeObjectOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__writeObjectOut(struct soap *soap, _ns1__writeObjectOut **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__writeObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__queryObjectOut(struct soap *soap, _ns1__queryObjectOut *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__queryObjectOut))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__queryObjectOut(struct soap *soap, const char *tag, int id, _ns1__queryObjectOut *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__queryObjectOut);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__queryObjectOut ** SOAP_FMAC4 soap_in_PointerTo_ns1__queryObjectOut(struct soap *soap, const char *tag, _ns1__queryObjectOut **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__queryObjectOut **)soap_malloc(soap, sizeof(_ns1__queryObjectOut *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__queryObjectOut *)soap_instantiate__ns1__queryObjectOut(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__queryObjectOut ** p = (_ns1__queryObjectOut **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__queryObjectOut, sizeof(_ns1__queryObjectOut), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__queryObjectOut(struct soap *soap, _ns1__queryObjectOut *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__queryObjectOut);
	if (soap_out_PointerTo_ns1__queryObjectOut(soap, tag?tag:"ns1:queryObjectOut", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__queryObjectOut ** SOAP_FMAC4 soap_get_PointerTo_ns1__queryObjectOut(struct soap *soap, _ns1__queryObjectOut **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__queryObjectOut(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVer(struct soap *soap, _ns1__GetVer *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVer))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVer(struct soap *soap, const char *tag, int id, _ns1__GetVer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetVer ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVer(struct soap *soap, const char *tag, _ns1__GetVer **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVer **)soap_malloc(soap, sizeof(_ns1__GetVer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVer *)soap_instantiate__ns1__GetVer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetVer ** p = (_ns1__GetVer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVer, sizeof(_ns1__GetVer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVer(struct soap *soap, _ns1__GetVer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__GetVer);
	if (soap_out_PointerTo_ns1__GetVer(soap, tag?tag:"ns1:GetVer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetVer ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVer(struct soap *soap, _ns1__GetVer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__wstring);
	if (soap_out_PointerTostd__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
