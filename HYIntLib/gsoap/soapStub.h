/* soapStub.h
   Generated by gSOAP 2.8.21 from TmriOutAccess.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.hyjtkj.com/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__GetVer
#define SOAP_TYPE__ns1__GetVer (8)
/* ns1:GetVer */
class SOAP_CMAC _ns1__GetVer
{
public:
	std::wstring *str;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__ns1__GetVer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetVer() { _ns1__GetVer::soap_default(NULL); }
	virtual ~_ns1__GetVer() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetVerResponse
#define SOAP_TYPE__ns1__GetVerResponse (9)
/* ns1:GetVerResponse */
class SOAP_CMAC _ns1__GetVerResponse
{
public:
	std::wstring *GetVerResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__GetVerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetVerResponse() { _ns1__GetVerResponse::soap_default(NULL); }
	virtual ~_ns1__GetVerResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__queryObjectOut
#define SOAP_TYPE__ns1__queryObjectOut (10)
/* ns1:queryObjectOut */
class SOAP_CMAC _ns1__queryObjectOut
{
public:
	std::wstring *xtlb;	/* optional element of type xsd:string */
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *QueryUTF8XmlDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__queryObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__queryObjectOut() { _ns1__queryObjectOut::soap_default(NULL); }
	virtual ~_ns1__queryObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__queryObjectOutResponse
#define SOAP_TYPE__ns1__queryObjectOutResponse (11)
/* ns1:queryObjectOutResponse */
class SOAP_CMAC _ns1__queryObjectOutResponse
{
public:
	std::wstring *queryObjectOutResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__queryObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__queryObjectOutResponse() { _ns1__queryObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__queryObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__writeObjectOut
#define SOAP_TYPE__ns1__writeObjectOut (12)
/* ns1:writeObjectOut */
class SOAP_CMAC _ns1__writeObjectOut
{
public:
	std::wstring *xtlb;	/* optional element of type xsd:string */
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *writeUTF8XmlDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE__ns1__writeObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__writeObjectOut() { _ns1__writeObjectOut::soap_default(NULL); }
	virtual ~_ns1__writeObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__writeObjectOutResponse
#define SOAP_TYPE__ns1__writeObjectOutResponse (13)
/* ns1:writeObjectOutResponse */
class SOAP_CMAC _ns1__writeObjectOutResponse
{
public:
	std::wstring *writeObjectOutResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE__ns1__writeObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__writeObjectOutResponse() { _ns1__writeObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__writeObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__NetworkingQueryObjectOut
#define SOAP_TYPE__ns1__NetworkingQueryObjectOut (14)
/* ns1:NetworkingQueryObjectOut */
class SOAP_CMAC _ns1__NetworkingQueryObjectOut
{
public:
	std::wstring *xtlb;	/* optional element of type xsd:string */
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *QueryUTF8XmlJsonDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE__ns1__NetworkingQueryObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__NetworkingQueryObjectOut() { _ns1__NetworkingQueryObjectOut::soap_default(NULL); }
	virtual ~_ns1__NetworkingQueryObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse
#define SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse (15)
/* ns1:NetworkingQueryObjectOutResponse */
class SOAP_CMAC _ns1__NetworkingQueryObjectOutResponse
{
public:
	std::wstring *NetworkingQueryObjectOutResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE__ns1__NetworkingQueryObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__NetworkingQueryObjectOutResponse() { _ns1__NetworkingQueryObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__NetworkingQueryObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__NetworkingWriteObjectOut
#define SOAP_TYPE__ns1__NetworkingWriteObjectOut (16)
/* ns1:NetworkingWriteObjectOut */
class SOAP_CMAC _ns1__NetworkingWriteObjectOut
{
public:
	std::wstring *xtlb;	/* optional element of type xsd:string */
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *WriteUTF8XmlJsonDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE__ns1__NetworkingWriteObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__NetworkingWriteObjectOut() { _ns1__NetworkingWriteObjectOut::soap_default(NULL); }
	virtual ~_ns1__NetworkingWriteObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse
#define SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse (17)
/* ns1:NetworkingWriteObjectOutResponse */
class SOAP_CMAC _ns1__NetworkingWriteObjectOutResponse
{
public:
	std::wstring *NetworkingWriteObjectOutResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE__ns1__NetworkingWriteObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__NetworkingWriteObjectOutResponse() { _ns1__NetworkingWriteObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__NetworkingWriteObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetLoginParm
#define SOAP_TYPE__ns1__GetLoginParm (18)
/* ns1:GetLoginParm */
class SOAP_CMAC _ns1__GetLoginParm
{
public:
	std::wstring *_USCORECYYID;	/* optional element of type xsd:string */
	std::wstring *mac;	/* optional element of type xsd:string */
	std::wstring *imie;	/* optional element of type xsd:string */
	std::wstring *ip;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE__ns1__GetLoginParm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetLoginParm() { _ns1__GetLoginParm::soap_default(NULL); }
	virtual ~_ns1__GetLoginParm() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetLoginParmResponse
#define SOAP_TYPE__ns1__GetLoginParmResponse (19)
/* ns1:GetLoginParmResponse */
class SOAP_CMAC _ns1__GetLoginParmResponse
{
public:
	std::wstring *GetLoginParmResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE__ns1__GetLoginParmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetLoginParmResponse() { _ns1__GetLoginParmResponse::soap_default(NULL); }
	virtual ~_ns1__GetLoginParmResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__zjqueryObjectOut
#define SOAP_TYPE__ns1__zjqueryObjectOut (20)
/* ns1:zjqueryObjectOut */
class SOAP_CMAC _ns1__zjqueryObjectOut
{
public:
	int isSucceed;	/* required element of type xsd:int */
	std::wstring *jkxlh;	/* optional element of type xsd:string */
	std::wstring *jkid;	/* optional element of type xsd:string */
	std::wstring *QueryUTF8XmlDoc;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE__ns1__zjqueryObjectOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__zjqueryObjectOut() { _ns1__zjqueryObjectOut::soap_default(NULL); }
	virtual ~_ns1__zjqueryObjectOut() { }
};
#endif

#ifndef SOAP_TYPE__ns1__zjqueryObjectOutResponse
#define SOAP_TYPE__ns1__zjqueryObjectOutResponse (21)
/* ns1:zjqueryObjectOutResponse */
class SOAP_CMAC _ns1__zjqueryObjectOutResponse
{
public:
	std::wstring *zjqueryObjectOutResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE__ns1__zjqueryObjectOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__zjqueryObjectOutResponse() { _ns1__zjqueryObjectOutResponse::soap_default(NULL); }
	virtual ~_ns1__zjqueryObjectOutResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetVer
#define SOAP_TYPE___ns1__GetVer (28)
/* Operation wrapper: */
struct __ns1__GetVer
{
public:
	_ns1__GetVer *ns1__GetVer;	/* optional element of type ns1:GetVer */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE___ns1__GetVer */
};
#endif

#ifndef SOAP_TYPE___ns1__queryObjectOut
#define SOAP_TYPE___ns1__queryObjectOut (32)
/* Operation wrapper: */
struct __ns1__queryObjectOut
{
public:
	_ns1__queryObjectOut *ns1__queryObjectOut;	/* optional element of type ns1:queryObjectOut */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE___ns1__queryObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__writeObjectOut
#define SOAP_TYPE___ns1__writeObjectOut (36)
/* Operation wrapper: */
struct __ns1__writeObjectOut
{
public:
	_ns1__writeObjectOut *ns1__writeObjectOut;	/* optional element of type ns1:writeObjectOut */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE___ns1__writeObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__NetworkingQueryObjectOut
#define SOAP_TYPE___ns1__NetworkingQueryObjectOut (40)
/* Operation wrapper: */
struct __ns1__NetworkingQueryObjectOut
{
public:
	_ns1__NetworkingQueryObjectOut *ns1__NetworkingQueryObjectOut;	/* optional element of type ns1:NetworkingQueryObjectOut */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE___ns1__NetworkingQueryObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__NetworkingWriteObjectOut
#define SOAP_TYPE___ns1__NetworkingWriteObjectOut (44)
/* Operation wrapper: */
struct __ns1__NetworkingWriteObjectOut
{
public:
	_ns1__NetworkingWriteObjectOut *ns1__NetworkingWriteObjectOut;	/* optional element of type ns1:NetworkingWriteObjectOut */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE___ns1__NetworkingWriteObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLoginParm
#define SOAP_TYPE___ns1__GetLoginParm (48)
/* Operation wrapper: */
struct __ns1__GetLoginParm
{
public:
	_ns1__GetLoginParm *ns1__GetLoginParm;	/* optional element of type ns1:GetLoginParm */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE___ns1__GetLoginParm */
};
#endif

#ifndef SOAP_TYPE___ns1__zjqueryObjectOut
#define SOAP_TYPE___ns1__zjqueryObjectOut (52)
/* Operation wrapper: */
struct __ns1__zjqueryObjectOut
{
public:
	_ns1__zjqueryObjectOut *ns1__zjqueryObjectOut;	/* optional element of type ns1:zjqueryObjectOut */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE___ns1__zjqueryObjectOut */
};
#endif

#ifndef SOAP_TYPE___ns1__GetVer_
#define SOAP_TYPE___ns1__GetVer_ (54)
/* Operation wrapper: */
struct __ns1__GetVer_
{
public:
	_ns1__GetVer *ns1__GetVer;	/* optional element of type ns1:GetVer */
public:
	int soap_type() const { return 54; } /* = unique type id SOAP_TYPE___ns1__GetVer_ */
};
#endif

#ifndef SOAP_TYPE___ns1__queryObjectOut_
#define SOAP_TYPE___ns1__queryObjectOut_ (56)
/* Operation wrapper: */
struct __ns1__queryObjectOut_
{
public:
	_ns1__queryObjectOut *ns1__queryObjectOut;	/* optional element of type ns1:queryObjectOut */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE___ns1__queryObjectOut_ */
};
#endif

#ifndef SOAP_TYPE___ns1__writeObjectOut_
#define SOAP_TYPE___ns1__writeObjectOut_ (58)
/* Operation wrapper: */
struct __ns1__writeObjectOut_
{
public:
	_ns1__writeObjectOut *ns1__writeObjectOut;	/* optional element of type ns1:writeObjectOut */
public:
	int soap_type() const { return 58; } /* = unique type id SOAP_TYPE___ns1__writeObjectOut_ */
};
#endif

#ifndef SOAP_TYPE___ns1__NetworkingQueryObjectOut_
#define SOAP_TYPE___ns1__NetworkingQueryObjectOut_ (60)
/* Operation wrapper: */
struct __ns1__NetworkingQueryObjectOut_
{
public:
	_ns1__NetworkingQueryObjectOut *ns1__NetworkingQueryObjectOut;	/* optional element of type ns1:NetworkingQueryObjectOut */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE___ns1__NetworkingQueryObjectOut_ */
};
#endif

#ifndef SOAP_TYPE___ns1__NetworkingWriteObjectOut_
#define SOAP_TYPE___ns1__NetworkingWriteObjectOut_ (62)
/* Operation wrapper: */
struct __ns1__NetworkingWriteObjectOut_
{
public:
	_ns1__NetworkingWriteObjectOut *ns1__NetworkingWriteObjectOut;	/* optional element of type ns1:NetworkingWriteObjectOut */
public:
	int soap_type() const { return 62; } /* = unique type id SOAP_TYPE___ns1__NetworkingWriteObjectOut_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLoginParm_
#define SOAP_TYPE___ns1__GetLoginParm_ (64)
/* Operation wrapper: */
struct __ns1__GetLoginParm_
{
public:
	_ns1__GetLoginParm *ns1__GetLoginParm;	/* optional element of type ns1:GetLoginParm */
public:
	int soap_type() const { return 64; } /* = unique type id SOAP_TYPE___ns1__GetLoginParm_ */
};
#endif

#ifndef SOAP_TYPE___ns1__zjqueryObjectOut_
#define SOAP_TYPE___ns1__zjqueryObjectOut_ (66)
/* Operation wrapper: */
struct __ns1__zjqueryObjectOut_
{
public:
	_ns1__zjqueryObjectOut *ns1__zjqueryObjectOut;	/* optional element of type ns1:zjqueryObjectOut */
public:
	int soap_type() const { return 66; } /* = unique type id SOAP_TYPE___ns1__zjqueryObjectOut_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (67)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 67; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (68)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 68; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (70)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 70; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (73)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 73; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (74)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 74; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
