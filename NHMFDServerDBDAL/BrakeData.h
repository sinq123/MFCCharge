/*
* Copyright (c) 佛山市南华仪器股份有限公司
* All rights reserved.
*
* 文件名称：BrakeData.h
* 文件标识：
* 描述：制动数据表模型
*
* 版本：1.0
* 日期：20xx-xx-xx
* 作者：Cyx
*
*
* 历史信息：
*
* 版本：1.0.0beta1
* 日期：20xx-xx-xx
* 作者：Cyx
* 描述：正在开发
*/


#if !defined (NHMFDSERVERDBMODEL_BRAKEDATA_H)
#define NHMFDSERVERDBMODEL_BRAKEDATA_H

#include <string>

struct SBrakeData
{
	// 自动编号
	std::wstring strAutoID;
	// 日志编号(年月日时分秒IP)
	std::wstring strRunningNumber;
	// 检测时间起(年月日时分秒)(Det: Detect; Beg: Begin; 下同)
	std::wstring strDetBegTime;
	// 检测时间止(年月日时分秒)
	std::wstring strDetEndTime;
	// 检测线编号
	std::wstring strLineNumber;
	// 是否使用daN单位
	std::wstring strUseDaN;
	// 制动检测方式(1-平板,2-滚筒)
	std::wstring strBKDetMode;
	// 一轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle1DetMode;
	// 一轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)(L: Left; 下同)(Whe: Wheel; 下同)
	std::wstring strAxle1LWheLock;
	// 一轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)(R: Right; 下同)
	std::wstring strAxle1RWheLock;
	// 一轴求和时左制动力值[N或daN](SB: ServiceBrake; 下同)
	std::wstring strAxle1LSumSBForce;
	// 一轴求和时右制动力值[N或daN]
	std::wstring strAxle1RSumSBForce;
	// 一轴求差时左制动力值[N或daN](Sub: Subtract; 下同)
	std::wstring strAxle1LSubSBForce;
	// 一轴求差时右制动力值[N或daN]
	std::wstring strAxle1RSubSBForce;
	// 一轴制动率[%]
	std::wstring strAxle1SBRate;
	// 一轴制动率[%]
	std::wstring strAxle1SBRate_M;
	// 一轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1SBRateJudge;
	// 一轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1SBRateJudge_M;
	// 一轴不平衡率[%](Unb: Unbalance, 不平衡; 下同)
	std::wstring strAxle1UnbRate;
	// 一轴不平衡率[%](Unb: Unbalance, 不平衡; 下同)
	std::wstring strAxle1UnbRate_M;
	// 一轴不平衡率使用限值[%]
	std::wstring strAxle1UnbRateLimit;
	// 一轴不平衡率使用限值[%]
	std::wstring strAxle1UnbRateLimit_M;
	// 一轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1UnbRateJudge;
	// 一轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1UnbRateJudge_M;
	// 一轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle1UnbRateRating;
	// 一轴左阻滞力值[N或daN](Blk: Block, 阻滞; 下同)
	std::wstring strAxle1LBlkForce;
	// 一轴右阻滞力值[N或daN]
	std::wstring strAxle1RBlkForce;
	// 一轴左阻滞率[%]
	std::wstring strAxle1LBlkRate;
	// 一轴左阻滞率[%]
	std::wstring strAxle1LBlkRate_M;
	// 一轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1LBlkRateJudge;
	// 一轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1LBlkRateJudge_M;
	// 一轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle1LBlkRateRating;
	// 一轴右阻滞率[%]
	std::wstring strAxle1RBlkRate;
	// 一轴右阻滞率[%]
	std::wstring strAxle1RBlkRate_M;
	// 一轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1RBlkRateJudge;
	// 一轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1RBlkRateJudge_M;
	// 一轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle1RBlkRateRating;
	// 一轴行车操纵力[N]
	std::wstring strAxle1OpeFor;
	// 一轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle1OpeForJudge;
	// 一轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle1LoadLSumSBForce;
	// 一轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle1LoadRSumSBForce;
	// 一轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle1LoadLSubSBForce;
	// 一轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle1LoadRSubSBForce;
	// 一轴加载行车制动率[%]
	std::wstring strAxle1LoadSBRate;
	// 一轴加载行车制动率判定
	std::wstring strAxle1LoadSBRateJudge;
	// 一轴加载不平衡率[%]
	std::wstring strAxle1LoadUnbRate;
	// 一轴加载不平衡率使用限值[%]
	std::wstring strAxle1LoadUnbRateLimit;
	// 一轴加载不平衡率判定
	std::wstring strAxle1LoadUnbRateJudge;
	// 二轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle2DetMode;
	// 二轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle2LWheLock;
	// 二轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle2RWheLock;
	// 二轴求和时左制动力值[N或daN]
	std::wstring strAxle2LSumSBForce;
	// 二轴求和时右制动力值[N或daN]
	std::wstring strAxle2RSumSBForce;
	// 二轴求差时左制动力值[N或daN]
	std::wstring strAxle2LSubSBForce;
	// 二轴求差时右制动力值[N或daN]
	std::wstring strAxle2RSubSBForce;
	// 二轴制动率[%]
	std::wstring strAxle2SBRate;
	// 二轴制动率[%]
	std::wstring strAxle2SBRate_M;
	// 二轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2SBRateJudge;
	// 二轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2SBRateJudge_M;
	// 二轴不平衡率[%]
	std::wstring strAxle2UnbRate;
	// 二轴不平衡率[%]
	std::wstring strAxle2UnbRate_M;
	// 二轴不平衡率使用限值[%]
	std::wstring strAxle2UnbRateLimit;
	// 二轴不平衡率使用限值[%]
	std::wstring strAxle2UnbRateLimit_M;
	// 二轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2UnbRateJudge;
	// 二轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2UnbRateJudge_M;
	// 二轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle2UnbRateRating;
	// 二轴左阻滞力值[N或daN]
	std::wstring strAxle2LBlkForce;
	// 二轴右阻滞力值[N或daN]
	std::wstring strAxle2RBlkForce;
	// 二轴左阻滞率[%]
	std::wstring strAxle2LBlkRate;
	// 二轴左阻滞率[%]
	std::wstring strAxle2LBlkRate_M;
	// 二轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2LBlkRateJudge;
	// 二轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2LBlkRateJudge_M;
	// 二轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格） 
	std::wstring strAxle2LBlkRateRating;
	// 二轴右阻滞率[%]
	std::wstring strAxle2RBlkRate;
	// 二轴右阻滞率[%]
	std::wstring strAxle2RBlkRate_M;
	// 二轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2RBlkRateJudge;
	// 二轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2RBlkRateJudge_M;
	// 二轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格） 
	std::wstring strAxle2RBlkRateRating;
	// 二轴行车操纵力[N]
	std::wstring strAxle2OpeFor;
	// 二轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle2OpeForJudge;
	// 二轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle2LoadLSumSBForce;
	// 二轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle2LoadRSumSBForce;
	// 二轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle2LoadLSubSBForce;
	// 二轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle2LoadRSubSBForce;
	// 二轴加载行车制动率[%]
	std::wstring strAxle2LoadSBRate;
	// 二轴加载行车制动率判定
	std::wstring strAxle2LoadSBRateJudge;
	// 二轴加载不平衡率[%]
	std::wstring strAxle2LoadUnbRate;
	// 二轴加载不平衡率使用限值[%]
	std::wstring strAxle2LoadUnbRateLimit;
	// 二轴加载不平衡率判定
	std::wstring strAxle2LoadUnbRateJudge;
	// 三轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle3DetMode;
	// 三轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle3LWheLock;
	// 三轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle3RWheLock;
	// 三轴求和时左制动力值[N或daN]
	std::wstring strAxle3LSumSBForce;
	// 三轴求和时右制动力值[N或daN]
	std::wstring strAxle3RSumSBForce;
	// 三轴求差时左制动力值[N或daN]
	std::wstring strAxle3LSubSBForce;
	// 三轴求差时右制动力值[N或daN]
	std::wstring strAxle3RSubSBForce;
	// 三轴制动率[%]
	std::wstring strAxle3SBRate;
	// 三轴制动率[%]
	std::wstring strAxle3SBRate_M;
	// 三轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3SBRateJudge;
	// 三轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3SBRateJudge_M;
	// 三轴不平衡率[%]
	std::wstring strAxle3UnbRate;
	// 三轴不平衡率[%]
	std::wstring strAxle3UnbRate_M;
	// 三轴不平衡率使用限值[%]
	std::wstring strAxle3UnbRateLimit;
	// 三轴不平衡率使用限值[%]
	std::wstring strAxle3UnbRateLimit_M;
	// 三轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3UnbRateJudge;
	// 三轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3UnbRateJudge_M;
	// 三轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格） 
	std::wstring strAxle3UnbRateRating;
	// 三轴左阻滞力值[N或daN]
	std::wstring strAxle3LBlkForce;
	// 三轴右阻滞力值[N或daN]
	std::wstring strAxle3RBlkForce;
	// 三轴左阻滞率[%]
	std::wstring strAxle3LBlkRate;
	// 三轴左阻滞率[%]
	std::wstring strAxle3LBlkRate_M;
	// 三轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3LBlkRateJudge;
	// 三轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3LBlkRateJudge_M;
	// 三轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle3LBlkRateRating;
	// 三轴右阻滞率[%]
	std::wstring strAxle3RBlkRate;
	// 三轴右阻滞率[%]
	std::wstring strAxle3RBlkRate_M;
	// 三轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3RBlkRateJudge;
	// 三轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3RBlkRateJudge_M;
	// 三轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle3RBlkRateRating;
	// 三轴行车操纵力[N]
	std::wstring strAxle3OpeFor;
	// 三轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle3OpeForJudge;
	// 三轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle3LoadLSumSBForce;
	// 三轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle3LoadRSumSBForce;
	// 三轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle3LoadLSubSBForce;
	// 三轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle3LoadRSubSBForce;
	// 三轴加载行车制动率[%]
	std::wstring strAxle3LoadSBRate;
	// 三轴加载行车制动率判定
	std::wstring strAxle3LoadSBRateJudge;
	// 三轴加载不平衡率[%]
	std::wstring strAxle3LoadUnbRate;
	// 三轴加载不平衡率使用限值[%]
	std::wstring strAxle3LoadUnbRateLimit;
	// 三轴加载不平衡率判定
	std::wstring strAxle3LoadUnbRateJudge;
	// 四轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle4DetMode;
	// 四轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle4LWheLock;
	// 四轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle4RWheLock;
	// 四轴求和时左制动力值[N或daN]
	std::wstring strAxle4LSumSBForce;
	// 四轴求和时右制动力值[N或daN]
	std::wstring strAxle4RSumSBForce;
	// 四轴求差时左制动力值[N或daN]
	std::wstring strAxle4LSubSBForce;
	// 四轴求差时右制动力值[N或daN]
	std::wstring strAxle4RSubSBForce;
	// 四轴制动率[%]
	std::wstring strAxle4SBRate;
	// 四轴制动率[%]
	std::wstring strAxle4SBRate_M;
	// 四轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4SBRateJudge;
	// 四轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4SBRateJudge_M;
	// 四轴不平衡率[%]
	std::wstring strAxle4UnbRate;
	// 四轴不平衡率[%]
	std::wstring strAxle4UnbRate_M;
	// 四轴不平衡率使用限值[%]
	std::wstring strAxle4UnbRateLimit;
	// 四轴不平衡率使用限值[%]
	std::wstring strAxle4UnbRateLimit_M;
	// 四轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4UnbRateJudge;
	// 四轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4UnbRateJudge_M;
	// 四轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle4UnbRateRating;
	// 四轴左阻滞力值[N或daN]
	std::wstring strAxle4LBlkForce;
	// 四轴右阻滞力值[N或daN]
	std::wstring strAxle4RBlkForce;
	// 四轴左阻滞率[%]
	std::wstring strAxle4LBlkRate;
	// 四轴左阻滞率[%]
	std::wstring strAxle4LBlkRate_M;
	// 四轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4LBlkRateJudge;
	// 四轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4LBlkRateJudge_M;
	// 四轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle4LBlkRateRating;
	// 四轴右阻滞率[%]
	std::wstring strAxle4RBlkRate;
	// 四轴右阻滞率[%]
	std::wstring strAxle4RBlkRate_M;
	// 四轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4RBlkRateJudge;
	// 四轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4RBlkRateJudge_M;
	// 四轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle4RBlkRateRating;
	// 四轴行车操纵力[N]
	std::wstring strAxle4OpeFor;
	// 四轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle4OpeForJudge;
	// 四轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle4LoadLSumSBForce;
	// 四轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle4LoadRSumSBForce;
	// 四轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle4LoadLSubSBForce;
	// 四轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle4LoadRSubSBForce;
	// 四轴加载行车制动率[%]
	std::wstring strAxle4LoadSBRate;
	// 四轴加载行车制动率判定
	std::wstring strAxle4LoadSBRateJudge;
	// 四轴加载不平衡率[%]
	std::wstring strAxle4LoadUnbRate;
	// 四轴加载不平衡率使用限值[%]
	std::wstring strAxle4LoadUnbRateLimit;
	// 四轴加载不平衡率判定
	std::wstring strAxle4LoadUnbRateJudge;
	// 五轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle5DetMode;
	// 五轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle5LWheLock;
	// 五轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle5RWheLock;
	// 五轴求和时左制动力值[N或daN]
	std::wstring strAxle5LSumSBForce;
	// 五轴求和时右制动力值[N或daN]
	std::wstring strAxle5RSumSBForce;
	// 五轴求差时左制动力值[N或daN]
	std::wstring strAxle5LSubSBForce;
	// 五轴求差时右制动力值[N或daN]
	std::wstring strAxle5RSubSBForce;
	// 五轴制动率[%]
	std::wstring strAxle5SBRate;
	// 五轴制动率[%]
	std::wstring strAxle5SBRate_M;
	// 五轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5SBRateJudge;
	// 五轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5SBRateJudge_M;
	// 五轴不平衡率[%]
	std::wstring strAxle5UnbRate;
	// 五轴不平衡率[%]
	std::wstring strAxle5UnbRate_M;
	// 五轴不平衡率使用限值[%]
	std::wstring strAxle5UnbRateLimit;
	// 五轴不平衡率使用限值[%]
	std::wstring strAxle5UnbRateLimit_M;
	// 五轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5UnbRateJudge;
	// 五轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5UnbRateJudge_M;
	// 五轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle5UnbRateRating;
	// 五轴左阻滞力值[N或daN]
	std::wstring strAxle5LBlkForce;
	// 五轴右阻滞力值[N或daN]
	std::wstring strAxle5RBlkForce;
	// 五轴左阻滞率[%]
	std::wstring strAxle5LBlkRate;
	// 五轴左阻滞率[%]
	std::wstring strAxle5LBlkRate_M;
	// 五轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5LBlkRateJudge;
	// 五轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5LBlkRateJudge_M;
	// 五轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle5LBlkRateRating;
	// 五轴右阻滞率[%]
	std::wstring strAxle5RBlkRate;
	// 五轴右阻滞率[%]
	std::wstring strAxle5RBlkRate_M;
	// 五轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5RBlkRateJudge;
	// 五轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5RBlkRateJudge_M;
	// 五轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle5RBlkRateRating;
	// 五轴行车操纵力[N]
	std::wstring strAxle5OpeFor;
	// 五轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle5OpeForJudge;
	// 五轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle5LoadLSumSBForce;
	// 五轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle5LoadRSumSBForce;
	// 五轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle5LoadLSubSBForce;
	// 五轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle5LoadRSubSBForce;
	// 五轴加载行车制动率[%]
	std::wstring strAxle5LoadSBRate;
	// 五轴加载行车制动率判定
	std::wstring strAxle5LoadSBRateJudge;
	// 五轴加载不平衡率[%]
	std::wstring strAxle5LoadUnbRate;
	// 五轴加载不平衡率使用限值[%]
	std::wstring strAxle5LoadUnbRateLimit;
	// 五轴加载不平衡率判定
	std::wstring strAxle5LoadUnbRateJudge;
	// 六轴检测方式(1-平板,2-滚筒)
	std::wstring strAxle6DetMode;
	// 六轴左车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle6LWheLock;
	// 六轴右车轮抱死(0-不抱死,1-抱死,NULL-不抱死)
	std::wstring strAxle6RWheLock;
	// 六轴求和时左制动力值[N或daN]
	std::wstring strAxle6LSumSBForce;
	// 六轴求和时右制动力值[N或daN]
	std::wstring strAxle6RSumSBForce;
	// 六轴求差时左制动力值[N或daN]
	std::wstring strAxle6LSubSBForce;
	// 六轴求差时右制动力值[N或daN]
	std::wstring strAxle6RSubSBForce;
	// 六轴制动率[%]
	std::wstring strAxle6SBRate;
	// 六轴制动率[%]
	std::wstring strAxle6SBRate_M;
	// 六轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6SBRateJudge;
	// 六轴制动率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6SBRateJudge_M;
	// 六轴不平衡率[%]
	std::wstring strAxle6UnbRate;
	// 六轴不平衡率[%]
	std::wstring strAxle6UnbRate_M;
	// 六轴不平衡率使用限值[%]
	std::wstring strAxle6UnbRateLimit;
	// 六轴不平衡率使用限值[%]
	std::wstring strAxle6UnbRateLimit_M;
	// 六轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6UnbRateJudge;
	// 六轴不平衡率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6UnbRateJudge_M;
	// 六轴不平衡率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle6UnbRateRating;
	// 六轴左阻滞力值[N或daN]
	std::wstring strAxle6LBlkForce;
	// 六轴右阻滞力值[N或daN]
	std::wstring strAxle6RBlkForce;
	// 六轴左阻滞率[%]
	std::wstring strAxle6LBlkRate;
	// 六轴左阻滞率[%]
	std::wstring strAxle6LBlkRate_M;
	// 六轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6LBlkRateJudge;
	// 六轴左阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6LBlkRateJudge_M;
	// 六轴左阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle6LBlkRateRating;
	// 六轴右阻滞率[%]
	std::wstring strAxle6RBlkRate;
	// 六轴右阻滞率[%]
	std::wstring strAxle6RBlkRate_M;
	// 六轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6RBlkRateJudge;
	// 六轴右阻滞率判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6RBlkRateJudge_M;
	// 六轴右阻滞率等评（NULL-未检，1-一级，2-二级，3-三级，4-合格，5-不合格）
	std::wstring strAxle6RBlkRateRating;
	// 六轴行车操纵力[N]
	std::wstring strAxle6OpeFor;
	// 六轴操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strAxle6OpeForJudge;
	// 六轴加载求和时左行车制动力值[N或daN]
	std::wstring strAxle6LoadLSumSBForce;
	// 六轴加载求和时右行车制动力值[N或daN]
	std::wstring strAxle6LoadRSumSBForce;
	// 六轴加载求差时左行车制动力值[N或daN]
	std::wstring strAxle6LoadLSubSBForce;
	// 六轴加载求差时右行车制动力值[N或daN]
	std::wstring strAxle6LoadRSubSBForce;
	// 六轴加载行车制动率[%]
	std::wstring strAxle6LoadSBRate;
	// 六轴加载行车制动率判定
	std::wstring strAxle6LoadSBRateJudge;
	// 六轴加载不平衡率[%]
	std::wstring strAxle6LoadUnbRate;
	// 六轴加载不平衡率使用限值[%]
	std::wstring strAxle6LoadUnbRateLimit;
	// 六轴加载不平衡率判定
	std::wstring strAxle6LoadUnbRateJudge;
	// 一轴驻车左制动力值[N或daN](PB: ParkBrake, 下同)
	std::wstring strAxle1LPBForce;
	// 一轴驻车右制动力值[N或daN]
	std::wstring strAxle1RPBForce;
	// 二轴驻车左制动力值[N或daN]
	std::wstring strAxle2LPBForce;
	// 二轴驻车右制动力值[N或daN]
	std::wstring strAxle2RPBForce;
	// 三轴驻车左制动力值[N或daN]
	std::wstring strAxle3LPBForce;
	// 三轴驻车右制动力值[N或daN]
	std::wstring strAxle3RPBForce;
	// 四轴驻车左制动力值[N或daN]
	std::wstring strAxle4LPBForce;
	// 四轴驻车右制动力值[N或daN]
	std::wstring strAxle4RPBForce;
	// 五轴驻车左制动力值[N或daN]
	std::wstring strAxle5LPBForce;
	// 五轴驻车右制动力值[N或daN]
	std::wstring strAxle5RPBForce;
	// 六轴驻车左制动力值[N或daN]
	std::wstring strAxle6LPBForce;
	// 六轴驻车右制动力值[N或daN]
	std::wstring strAxle6RPBForce;
	// 驻车操纵力[N]
	std::wstring strVehPBOpeFor;
	// 驻车操纵力判定(0-合格,1-不合格,2-不适用)
	std::wstring strVehPBOpeForJudge;
	// 驻车左制动力值[N或daN]
	std::wstring strVehLPBForce;
	// 驻车右制动力值[N或daN]
	std::wstring strVehRPBForce;
	// 驻车制动率[%]
	std::wstring strVehPBRate;
	// 驻车制动率[%]
	std::wstring strVehPBRate_M;
	// 整车求和时制动力值[N或daN](Veh: Vehicle)
	std::wstring strVehSumSBForce;
	// 整车阻滞率[%](Veh: Vehicle)
	std::wstring strVehBlkRate;
	// 整车制动率[%](Veh: Vehicle)
	std::wstring strVehSBRate;
	// 整车制动率[%](Veh: Vehicle)
	std::wstring strVehSBRate_M;
	// 一轴行车制动协调时间[ms]
	std::wstring strAxle1SBBrakeLags;
	// 二轴行车制动协调时间[ms]
	std::wstring strAxle2SBBrakeLags;
	// 三轴行车制动协调时间[ms]
	std::wstring strAxle3SBBrakeLags;
	// 四轴行车制动协调时间[ms]
	std::wstring strAxle4SBBrakeLags;
	// 五轴行车制动协调时间[ms]
	std::wstring strAxle5SBBrakeLags;
	// 六轴行车制动协调时间[ms]
	std::wstring strAxle6SBBrakeLags;
	// 整车行车制动协调时间[ms](0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehSBBrakeLags;
	// 一轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1SBJudge;
	// 二轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2SBJudge;
	// 三轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3SBJudge;
	// 四轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4SBJudge;
	// 五轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5SBJudge;
	// 六轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6SBJudge;
	// 驻车制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strVehPBJudge;
	// 整车阻滞判定(0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehBlkJudge;
	// 整车制动判定(0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehSBJudge;
	// 一轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1SBJudge_M;
	// 二轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2SBJudge_M;
	// 三轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3SBJudge_M;
	// 四轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4SBJudge_M;
	// 五轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5SBJudge_M;
	// 六轴制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6SBJudge_M;
	// 驻车制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strVehPBJudge_M;
	// 整车阻滞判定(0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehBlkJudge_M;
	// 整车制动判定(0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehSBJudge_M;
	// 一轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle1SBBrakeLagsJudge;
	// 二轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle2SBBrakeLagsJudge;
	// 三轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle3SBBrakeLagsJudge;
	// 四轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle4SBBrakeLagsJudge;
	// 五轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle5SBBrakeLagsJudge;
	// 六轴行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strAxle6SBBrakeLagsJudge;
	// 整车行车制动协调时间判定(0-合格,1-不合格,NULL-不合格)(Veh: Vehicle)
	std::wstring strVehSBBrakeLagsJudge;
	// 判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strJudge;
	// 判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strJudge_M;
	// 牵引车判定(0-合格,1-不合格)
	std::wstring strTractorJudge;
	// 挂车求和时行车制动力值[daN]
	std::wstring strTrailerSumSBForce;
	// 挂车行车制动率[％]
	std::wstring strTrailerSBRate;
	// 挂车行车制动判定(0-合格,1-不合格,NULL-不合格)
	std::wstring strTrailerSBJudge;
	// 列车整车求和时行车制动力值[daN]
	std::wstring strTrainSumSBForce;
	// 列车整车行车制动率[%]
	std::wstring strTrainSBRate;
	// 列车整车行车制动率判定(0-合格,1-不合格,2-不适用)
	std::wstring strTrainSBRateJudge;
	// 列车驻车求和时行车制动力值[daN]
	std::wstring strTrainPBForce;
	// 列车驻车行车制动率[%]
	std::wstring strTrainPBRate;
	// 列车驻车行车制动率判定(0-合格,1-不合格,2-不适用)
	std::wstring strTrainPBJudge;
	// 列车行车制动协调时间[ms]
	std::wstring strTrainSBBrakeLags;
	// 列车行车制动协调时间判定(0-合格,1-不合格,2-不适用)
	std::wstring strTrainSBBrakeLagsJudge;
	// 牵引车整车制动率比[%]
	std::wstring strTractorSBRatePro;
	// 牵引车整车制动率判定(0-合格,1-不合格,2-不适用)
	std::wstring strTractorSBRateProJudge;
	// 挂车整车制动率比[%]
	std::wstring strTrailerSBRatePro;
	// 挂车整车制动率判定(0-合格,1-不合格,2-不适用)
	std::wstring strTrailerSBRateProJudge;
	// 一轴制动时序时间[ms]
	std::wstring strAxle1BkTime;
	// 二轴制动时序时间[ms]
	std::wstring strAxle2BkTime;
	// 三轴制动时序时间[ms]
	std::wstring strAxle3BkTime;
	// 四轴制动时序时间[ms]
	std::wstring strAxle4BkTime;
	// 五轴制动时序时间[ms]
	std::wstring strAxle5BkTime;
	// 六轴制动时序时间[ms]
	std::wstring strAxle6BkTime;
	// 一轴制动时序
	std::wstring strAxle1BkSeq;
	// 二轴制动时序
	std::wstring strAxle2BkSeq;
	// 三轴制动时序
	std::wstring strAxle3BkSeq;
	// 四轴制动时序
	std::wstring strAxle4BkSeq;
	// 五轴制动时序
	std::wstring strAxle5BkSeq;
	// 六轴制动时序
	std::wstring strAxle6BkSeq;
	// 制动时序判定(0-合格,1-不合格,2-不适用)
	std::wstring strBkSeqJud;
	// 和谐
	std::wstring strHarmon;
	// 备注
	std::wstring strRemark;
	// 保留1
	std::wstring strReserved1;
	// 保留2
	std::wstring strReserved2;
	// 保留3
	std::wstring strReserved3;
};

#endif